theory FIXUP_PROV begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman, multiset
functions: cmac/2, fst/1, pair/2, rm/3, rm1/2, s1/1, sdec/2, senc/2,
           snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



restriction Atomic:
  "∀ mk #i. (Atomic( mk ) @ #i) ⇒ (¬(∃ x y. (x+y) = mk))"
  // safety formula

rule (modulo E) OOBPK_OutChannel[color=#9aff9a]:
   [ Out_OOBPK( <channelname, SendType, ReceiveType>, D, m ) ]
  -->
   [ SecureOOBPK( <channelname, SendType, ReceiveType>, D, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) OOBPK_InChannel:
   [ SecureOOBPK( <channelname, SendType, ReceiveType>, D, m ) ]
  -->
   [ In_OOBPK( <channelname, SendType, ReceiveType>, D, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) StaticOOB_OutChannel[color=#9aff9a]:
   [ Out_StaticOOB( <channelname, SendType, ReceiveType>, D, m ) ]
  -->
   [ SecureStaticOOB( <channelname, SendType, ReceiveType>, D, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) StaticOOB_InChannel:
   [ SecureStaticOOB( <channelname, SendType, ReceiveType>, D, m ) ]
  -->
   [ In_StaticOOB( <channelname, SendType, ReceiveType>, D, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Send_UserDevice[color=#9aff9a]:
   [ Out_UD( <channelname, SendType, ReceiveType>, A, B, m ) ]
  -->
   [ SecureUD( <channelname, SendType, ReceiveType>, A, B, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Receive_UserDevice[color=#9aff9a]:
   [ SecureUD( <channelname, SendType, ReceiveType>, A, B, m ) ]
  -->
   [ In_UD( <channelname, SendType, ReceiveType>, A, B, m ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Provisioner_Init[color=#ffefd5]:
   [ Fr( ~NetKey ) ]
  --[
  Atomic( ~NetKey ), OnlyOneProvisioner( ), InitP_ReadStaticOOB( '1' ),
  InitP_ReadOOBPK( '0' )
  ]->
   [ !Provisioner( $P, ~NetKey, '0', '1', '1', 'Provisioner' ) ]

  /* has exactly the trivial AC variant */

restriction OnlyOneProvisioner:
  "∀ #i #j.
    ((OnlyOneProvisioner( ) @ #i) ∧ (OnlyOneProvisioner( ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

rule (modulo E) NewDevice_Init_0[color=#ffefd5]:
   [ Fr( ~DeviceUUID ) ]
  --[
  OnlyOneNewDevice0( ), InitD_PKType( 'InBand' ), InitD_OutputOOB( '1' ),
  InitD_InputOOB( '1' ), InitD_StaticOOB( '0' )
  ]->
   [
   NewDevice0( $D, ~DeviceUUID, 'InBand', '1', '1', '0', '1', 'NewDevice' )
   ]

  /* has exactly the trivial AC variant */

restriction OnlyOneNewDevice0:
  "∀ #i #j.
    ((OnlyOneNewDevice0( ) @ #i) ∧ (OnlyOneNewDevice0( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) NewDevice_Init_InBandPK_NoStaticOOB[color=#ffefd5]:
   [
   NewDevice0( NDev, DeviceUUID, PKType, OutputOOB, InputOOB, StaticOOB,
               NDevSeOp, 'NewDevice'
   )
   ]
  --[ Eq( PKType, 'InBand' ), Eq( StaticOOB, '0' ), OnlyOneNewDevice( ) ]->
   [
   !NewDevice( NDev, DeviceUUID, PKType, OutputOOB, InputOOB, StaticOOB,
               NDevSeOp, 'NULL', 'NULL', 'NULL', 'NULL', 'NULL', 'NewDevice'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) NewDevice_Init_OOBPK_NoStaticOOB[color=#ffefd5]:
   [
   Fr( ~skD ), Fr( ~URItoPK ),
   NewDevice0( NDev, DeviceUUID, PKType, OutputOOB, InputOOB, StaticOOB,
               NDevSeOp, 'NewDevice'
   )
   ]
  --[ Eq( PKType, 'OOB' ), Eq( StaticOOB, '0' ), OnlyOneNewDevice( ) ]->
   [
   !NewDevice( NDev, DeviceUUID, PKType, OutputOOB, InputOOB, StaticOOB,
               NDevSeOp, ~skD, 'g'^~skD, ~URItoPK, 'NULL', 'NULL', 'NewDevice'
   ),
   !OOBPKI( NDev, DeviceUUID, 'g'^~skD, ~URItoPK, 'OOBPKI' )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) NewDevice_Init_InBandPK_StaticOOB[color=#ffefd5]:
   [
   Fr( ~random ), Fr( ~URItoAuth ),
   NewDevice0( NDev, DeviceUUID, PKType, OutputOOB, InputOOB, StaticOOB,
               NDevSeOp, 'NewDevice'
   )
   ]
  --[ Eq( PKType, 'InBand' ), Eq( StaticOOB, '1' ), OnlyOneNewDevice( ) ]->
   [
   !NewDevice( NDev, DeviceUUID, PKType, OutputOOB, InputOOB, StaticOOB,
               NDevSeOp, 'NULL', 'NULL', 'NULL', ~random, ~URItoAuth, 'NewDevice'
   ),
   !StaticAuthInfo( NDev, DeviceUUID, ~random, ~URItoAuth, 'StaticAuthInfo'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) NewDevice_Init_OOBPK_StaticOOB[color=#ffefd5]:
   [
   Fr( ~skD ), Fr( ~URItoPK ), Fr( ~random ), Fr( ~URItoAuth ),
   NewDevice0( NDev, DeviceUUID, PKType, OutputOOB, InputOOB, StaticOOB,
               NDevSeOp, 'NewDevice'
   )
   ]
  --[ Eq( PKType, 'OOB' ), Eq( StaticOOB, '1' ), OnlyOneNewDevice( ) ]->
   [
   !NewDevice( NDev, DeviceUUID, PKType, OutputOOB, InputOOB, StaticOOB,
               NDevSeOp, ~skD, 'g'^~skD, ~URItoPK, ~random, ~URItoAuth, 'NewDevice'
   ),
   !OOBPKI( NDev, DeviceUUID, 'g'^~skD, ~URItoPK, 'OOBPKI' ),
   !StaticAuthInfo( NDev, DeviceUUID, ~random, ~URItoAuth, 'StaticAuthInfo'
   )
   ]

  /* has exactly the trivial AC variant */

restriction OnlyOneNewDevice:
  "∀ #i #j.
    ((OnlyOneNewDevice( ) @ #i) ∧ (OnlyOneNewDevice( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) Init_User[color=#ffefd5]:
   [ ] --[ OnlyOneUser( ) ]-> [ !User( $User ) ]

  /* has exactly the trivial AC variant */

restriction OnlyOneUser:
  "∀ #i #j. ((OnlyOneUser( ) @ #i) ∧ (OnlyOneUser( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) NDev_Beaconing[color=#fff68f]:
   [
   !NewDevice( NDev, DeviceUUID, PKType, OutputOOB, InputOOB, StaticOOB,
               NDevSeOp, skD, DHpkD, OOBPKURI, AuthValue, AuthValueURI, 'NewDevice'
   )
   ]
  --[ OnlyOnceBeaconing( ) ]->
   [
   Out( <NDev, DeviceUUID, OOBPKURI, AuthValueURI> ),
   NDevBeaconing( NDev, DeviceUUID, PKType, OutputOOB, InputOOB, StaticOOB,
                  NDevSeOp, skD, DHpkD, OOBPKURI, AuthValue, AuthValueURI
   )
   ]

  /* has exactly the trivial AC variant */

restriction OnlyOnceBeaconing:
  "∀ #i #j.
    ((OnlyOnceBeaconing( ) @ #i) ∧ (OnlyOnceBeaconing( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) Prov_LinkOpen[color=#bbffff]:
   [
   In( <NDev, DeviceUUID, OOBPKURI, AuthValueURI> ), Fr( ~LinkID ),
   !Provisioner( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                 'Provisioner'
   )
   ]
  --[ Neq( Prov, NDev ), OnlyOnceLinkOpen( ) ]->
   [
   Out( <~LinkID, 'LinkOpen', DeviceUUID> ),
   ProvLinkOpening( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                    NDev, DeviceUUID, ~LinkID, OOBPKURI, AuthValueURI
   )
   ]

  /* has exactly the trivial AC variant */

restriction OnlyOnceLinkOpen:
  "∀ #i #j.
    ((OnlyOnceLinkOpen( ) @ #i) ∧ (OnlyOnceLinkOpen( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) NDev_LinkAck[color=#fff68f]:
   [
   In( <LinkID, 'LinkOpen', DeviceUUID_In> ),
   NDevBeaconing( NDev, DeviceUUID, PKType, OutputOOB, InputOOB, StaticOOB,
                  NDevSeOp, skD, DHpkD, OOBPKURI, AuthValue, AuthValueURI
   )
   ]
  --[ Eq( DeviceUUID_In, DeviceUUID ) ]->
   [
   Out( <LinkID, 'Ack'> ),
   NDevLinkOpened( NDev, DeviceUUID, PKType, OutputOOB, InputOOB, StaticOOB,
                   NDevSeOp, skD, DHpkD, OOBPKURI, AuthValue, AuthValueURI, LinkID
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_CollectOOBInfo[color=#bbffff]:
   [
   ProvLinkOpening( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                    NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI
   )
   ]
  --[ Neq( AuthValueURI, 'NULL' ), Eq( ReadStaticOOB, '1' ) ]->
   [
   Out_StaticOOB( <'OOBReq', 'Prov', 'OOB'>, NDev, AuthValueURI ),
   ProvCollectingStaticOOB( Prov, NetKey, ReadOOBPK, ReadStaticOOB,
                            SecureOption, NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) StaticOOB_SendOOBInfo[color=#00bfff]:
   [
   In_StaticOOB( <'OOBReq', 'Prov', 'OOB'>, NDev_In, AuthValueURI_In ),
   !StaticAuthInfo( NDev, DeviceUUID, AuthValue, AuthValueURI,
                    'StaticAuthInfo'
   )
   ]
  --[ Eq( NDev, NDev_In ), Eq( AuthValueURI, AuthValueURI_In ) ]->
   [ Out_StaticOOB( <'OOBRes', 'OOB', 'Prov'>, NDev, AuthValue ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Prov_StaticAuthValueCollected[color=#bbffff]:
   [
   In_StaticOOB( <'OOBRes', 'OOB', 'Prov'>, NDev, AuthValue ),
   ProvCollectingStaticOOB( Prov, NetKey, ReadOOBPK, ReadStaticOOB,
                            SecureOption, NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI
   )
   ]
  -->
   [
   ProvLinkOpened( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                   NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_LinkOpened[color=#bbffff]:
   [
   In( <LinkID, 'Ack'> ),
   ProvLinkOpening( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                    NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI
   )
   ]
  --[ CannotCollect( ReadStaticOOB, AuthValueURI ) ]->
   [
   !Provisioning( Prov, NDev ),
   ProvLinkOpened( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                   NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, 'NULL'
   )
   ]

  /* has exactly the trivial AC variant */

restriction CannotCollect:
  "∀ r a #i. (CannotCollect( r, a ) @ #i) ⇒ ((r = '0') ∨ (a = 'NULL'))"
  // safety formula

rule (modulo E) Prov_Invite[color=#bbffff]:
   [
   ProvLinkOpened( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                   NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue
   )
   ]
  -->
   [
   Out( <LinkID, 'Invite'> ),
   ProvInvited( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
                DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) NDev_Capabilities[color=#fff68f]:
   [
   In( <LinkID, 'Invite'> ),
   NDevLinkOpened( NDev, DeviceUUID, PKType, OutputOOB, InputOOB, StaticOOB,
                   NDevSeOp, skD, DHpkD, OOBPKURI, AuthValue, AuthValueURI, LinkID
   )
   ]
  -->
   [
   Out( <LinkID, PKType, OutputOOB, InputOOB, StaticOOB> ),
   NDevSentCapabilities( NDev, DeviceUUID, PKType, OutputOOB, InputOOB,
                         StaticOOB, NDevSeOp, skD, DHpkD, OOBPKURI, AuthValue, AuthValueURI,
                         LinkID
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_Chose_InBandPK_OutputOOB[color=#bbffff]:
   [
   In( <LinkID, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D> ),
   ProvInvited( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
                DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue
   )
   ]
  --[
  UseInBandPK( PKType_D, ReadOOBPK ),
  UseOutputOOB( OutputOOB_D, InputOOB_D, StaticOOB_D, AuthValue )
  ]->
   [
   ProvChosed( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
               DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
               OutputOOB_D, InputOOB_D, StaticOOB_D, 'InBand', 'OutputOOB'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_Chose_OOBPK_OutputOOB[color=#bbffff]:
   [
   In( <LinkID, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D> ),
   ProvInvited( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
                DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue
   )
   ]
  --[
  UseOOBPK( PKType_D, ReadOOBPK ),
  UseOutputOOB( OutputOOB_D, InputOOB_D, StaticOOB_D, AuthValue )
  ]->
   [
   ProvChosed( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
               DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
               OutputOOB_D, InputOOB_D, StaticOOB_D, 'OOB', 'OutputOOB'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_Chose_InBandPK_InputOOB[color=#bbffff]:
   [
   In( <LinkID, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D> ),
   ProvInvited( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
                DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue
   )
   ]
  --[
  UseInBandPK( PKType_D, ReadOOBPK ),
  UseInputOOB( OutputOOB_D, InputOOB_D, StaticOOB_D, AuthValue )
  ]->
   [
   ProvChosed( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
               DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
               OutputOOB_D, InputOOB_D, StaticOOB_D, 'InBand', 'InputOOB'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_Chose_OOBPK_InputOOB[color=#bbffff]:
   [
   In( <LinkID, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D> ),
   ProvInvited( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
                DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue
   )
   ]
  --[
  UseOOBPK( PKType_D, ReadOOBPK ),
  UseInputOOB( OutputOOB_D, InputOOB_D, StaticOOB_D, AuthValue )
  ]->
   [
   ProvChosed( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
               DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
               OutputOOB_D, InputOOB_D, StaticOOB_D, 'OOB', 'InputOOB'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_Chose_InBandPK_StaticOOB[color=#bbffff]:
   [
   In( <LinkID, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D> ),
   ProvInvited( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
                DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue
   )
   ]
  --[
  Neq( SecureOption, '1' ), UseInBandPK( PKType_D, ReadOOBPK ),
  Eq( StaticOOB_D, '1' ), Neq( AuthValue, 'NULL' )
  ]->
   [
   ProvChosed( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
               DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
               OutputOOB_D, InputOOB_D, StaticOOB_D, 'InBand', 'StaticOOB'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_Chose_OOBPK_StaticOOB[color=#bbffff]:
   [
   In( <LinkID, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D> ),
   ProvInvited( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
                DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue
   )
   ]
  --[
  UseOOBPK( PKType_D, ReadOOBPK ), Eq( StaticOOB_D, '1' ),
  Neq( AuthValue, 'NULL' )
  ]->
   [
   ProvChosed( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
               DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
               OutputOOB_D, InputOOB_D, StaticOOB_D, 'OOB', 'StaticOOB'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_Chose_InBandPK_NoOOB[color=#bbffff]:
   [
   In( <LinkID, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D> ),
   ProvInvited( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
                DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue
   )
   ]
  --[
  Neq( SecureOption, '1' ), UseInBandPK( PKType_D, ReadOOBPK ),
  UseNoOOB( OutputOOB_D, InputOOB_D, StaticOOB_D, AuthValue )
  ]->
   [
   ProvChosed( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
               DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
               OutputOOB_D, InputOOB_D, StaticOOB_D, 'InBand', 'NoOOB'
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_Chose_OOBPK_NoOOB[color=#bbffff]:
   [
   In( <LinkID, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D> ),
   ProvInvited( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
                DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue
   )
   ]
  --[
  Neq( SecureOption, '1' ), UseOOBPK( PKType_D, ReadOOBPK ),
  UseNoOOB( OutputOOB_D, InputOOB_D, StaticOOB_D, AuthValue )
  ]->
   [
   ProvChosed( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
               DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
               OutputOOB_D, InputOOB_D, StaticOOB_D, 'OOB', 'NoOOB'
   )
   ]

  /* has exactly the trivial AC variant */

restriction UseInBandPK:
  "∀ p r #i. (UseInBandPK( p, r ) @ #i) ⇒ ((p = 'InBand') ∨ (r = '0'))"
  // safety formula

restriction UseOOBPK:
  "∀ p r #i. (UseOOBPK( p, r ) @ #i) ⇒ ((p = 'OOB') ∧ (r = '1'))"
  // safety formula

restriction UseOutputOOB:
  "∀ o i s a #j.
    (UseOutputOOB( o, i, s, a ) @ #j) ⇒
    (((s = '0') ∨ (a = 'NULL')) ∧ (o = '1'))"
  // safety formula

restriction UseInputOOB:
  "∀ o i s a #j.
    (UseInputOOB( o, i, s, a ) @ #j) ⇒
    ((((s = '0') ∨ (a = 'NULL')) ∧ (o = '0')) ∧ (i = '1'))"
  // safety formula

restriction UseNoOOB:
  "∀ o i s a #j.
    (UseNoOOB( o, i, s, a ) @ #j) ⇒
    ((((s = '0') ∨ (a = 'NULL')) ∧ (o = '0')) ∧ (i = '0'))"
  // safety formula

rule (modulo E) Prov_SendStart[color=#bbffff]:
   [
   ProvChosed( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
               DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
               OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P
   )
   ]
  -->
   [
   Out( <LinkID, PKType_P, AuthMethod_P> ),
   ProvSentStart( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                  NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
                  OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) NDev_ReceiveStart[color=#fff68f]:
   [
   In( <LinkID, PKType_P, AuthMethod_P> ),
   NDevSentCapabilities( NDev, DeviceUUID, PKType_D, OutputOOB_D,
                         InputOOB_D, StaticOOB_D, NDevSeOp, skD, DHpkD, OOBPKURI, AuthValue,
                         AuthValueURI, LinkID
   )
   ]
  --[
  ValidityCheck( PKType_P, AuthMethod_P, PKType_D, OutputOOB_D, InputOOB_D,
                 StaticOOB_D
  ),
  SecurePolicyCheck( PKType_P, AuthMethod_P, NDevSeOp )
  ]->
   [
   NDevReceivedStart( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                      StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue, AuthValueURI, LinkID,
                      PKType_P, AuthMethod_P
   )
   ]

  /* has exactly the trivial AC variant */

restriction ValidityCheck:
  "∀ ppk pam dpk dout din dst #j.
    (ValidityCheck( ppk, pam, dpk, dout, din, dst ) @ #j) ⇒
    (((ppk = 'InBand') ∨ (dpk = 'OOB')) ∧
     (((((pam = 'OutputOOB') ∧ (dout = '1')) ∨
        ((pam = 'InputOOB') ∧ (din = '1'))) ∨
       ((pam = 'StaticOOB') ∧ (dst = '1'))) ∨
      (pam = 'NoOOB')))"
  // safety formula

restriction SecurePolicyCheck:
  "∀ ppk pam dso #i.
    (SecurePolicyCheck( ppk, pam, dso ) @ #i) ⇒
    (((dso = '1') ∧
      (((pam = 'OutputOOB') ∨ (pam = 'InputOOB')) ∨
       ((pam = 'StaticOOB') ∧ (ppk = 'OOB')))) ∨
     (dso = '0'))"
  // safety formula

rule (modulo E) Prov_SendPK_InBand[color=#bbffff]:
   [
   Fr( ~sk ),
   ProvSentStart( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                  NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
                  OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P
   )
   ]
  --[ Eq( PKType_P, 'InBand' ), ProvInBandPK( ) ]->
   [
   Out( <LinkID, 'g'^~sk> ),
   ProvSentPKInBand( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                     NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
                     OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P, ~sk,
                     'g'^~sk
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) NDev_SendPK_InBand[color=#fff68f]:
   [
   In( <LinkID, DHpkP> ), Fr( ~sk ),
   NDevReceivedStart( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                      StaticOOB_D, skD_NULL, DHpkD_NULL, OOBPKURI_NULL, AuthValue,
                      AuthValueURI, LinkID, PKType_P, AuthMethod_P
   )
   ]
  --[ Eq( PKType_P, 'InBand' ), NDevInBandPK( ) ]->
   [
   Out( <LinkID, 'g'^~sk> ),
   NDevExchanged( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                  StaticOOB_D, ~sk, 'g'^~sk, OOBPKURI_NULL, AuthValue, AuthValueURI,
                  LinkID, PKType_P, AuthMethod_P, DHpkP
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_ReceivePK_InBand[color=#bbffff]:
   [
   In( <LinkID, DHpkD> ),
   ProvSentPKInBand( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                     NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
                     OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P, skP, DHpkP
   )
   ]
  -->
   [
   ProvExchanged( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                  NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
                  OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P, skP, DHpkP,
                  DHpkD
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_ReqPK_OOB[color=#bbffff]:
   [
   ProvSentStart( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                  NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
                  OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P
   )
   ]
  --[ Eq( PKType_P, 'OOB' ), Neq( OOBPKURI, 'NULL' ), ProvOOBPK( ) ]->
   [
   Out_OOBPK( <'OOBReq', 'Prov', 'OOB'>, NDev, OOBPKURI ),
   ProvReqOOBPK( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
                 DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
                 OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) OOBPKI_SendPK[color=#00bfff]:
   [
   In_OOBPK( <'OOBReq', 'Prov', 'OOB'>, NDev_In, OOBPKURI_In ),
   !OOBPKI( NDev, DeviceUUID, DHpkD, OOBPKURI, 'OOBPKI' )
   ]
  --[ Eq( NDev, NDev_In ), Eq( OOBPKURI, OOBPKURI_In ) ]->
   [ Out_OOBPK( <'OOBRes', 'OOB', 'Prov'>, NDev, DHpkD ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Prov_SendPK_OOB[color=#bbffff]:
   [
   In_OOBPK( <'OOBRes', 'OOB', 'Prov'>, NDev, DHpkD ), Fr( ~sk ),
   ProvReqOOBPK( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
                 DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
                 OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P
   )
   ]
  -->
   [
   Out( <LinkID, 'g'^~sk> ),
   ProvExchanged( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                  NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
                  OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P, ~sk,
                  'g'^~sk, DHpkD
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) NDev_ReceivePK_OOB[color=#fff68f]:
   [
   In( <LinkID, DHpkP> ),
   NDevReceivedStart( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                      StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue, AuthValueURI, LinkID,
                      PKType_P, AuthMethod_P
   )
   ]
  --[ Eq( PKType_P, 'OOB' ), NDevOOBPK( ) ]->
   [
   NDevExchanged( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                  StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue, AuthValueURI, LinkID,
                  PKType_P, AuthMethod_P, DHpkP
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_CalculateECDH[color=#bbffff]:
   [
   ProvExchanged( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                  NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
                  OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P, skP, DHpkP,
                  DHpkD
   )
   ]
  --[ Neq( DHpkP, DHpkD ) ]->
   [
   ProvCalculatedECDH( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                       NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
                       OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P, skP, DHpkP,
                       DHpkD, DHpkD^skP
   )
   ]

  /*
  rule (modulo AC) Prov_CalculateECDH[color=#bbffff]:
     [
     ProvExchanged( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                    NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
                    OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P, skP, DHpkP,
                    DHpkD
     )
     ]
    --[ Neq( DHpkP, DHpkD ) ]->
     [
     ProvCalculatedECDH( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                         NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
                         OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P, skP, DHpkP,
                         DHpkD, z
     )
     ]
    variants (modulo AC)
     1. DHpkD = DHpkD.22
        skP   = skP.22
        z     = DHpkD.22^skP.22
    
     2. DHpkD = DHpkD.22
        skP   = one
        z     = DHpkD.22
    
     3. DHpkD = x.22^x.23
        skP   = skP.24
        z     = x.22^(x.23*skP.24)
    
     4. DHpkD = x.22^x.23
        skP   = inv(x.23)
        z     = x.22
    
     5. DHpkD = x.22^x.23
        skP   = inv((x.23*x.39))
        z     = x.22^inv(x.39)
    
     6. DHpkD = x.22^x.23
        skP   = (x.39*inv(x.23))
        z     = x.22^x.39
    
     7. DHpkD = x.22^x.23
        skP   = (x.39*inv((x.23*x.40)))
        z     = x.22^(x.39*inv(x.40))
    
     8. DHpkD = x.22^inv(x.23)
        skP   = x.23
        z     = x.22
    
     9. DHpkD = x.22^inv(x.23)
        skP   = inv(x.39)
        z     = x.22^inv((x.23*x.39))
    
    10. DHpkD = x.22^inv(x.23)
        skP   = (x.23*x.39)
        z     = x.22^x.39
    
    11. DHpkD = x.22^inv(x.23)
        skP   = (x.39*inv(x.40))
        z     = x.22^(x.39*inv((x.23*x.40)))
    
    12. DHpkD = x.22^inv((x.23*x.24))
        skP   = x.24
        z     = x.22^inv(x.23)
    
    13. DHpkD = x.22^inv((x.23*x.24))
        skP   = (x.23*x.40)
        z     = x.22^(x.40*inv(x.24))
    
    14. DHpkD = x.22^inv((x.23*x.24))
        skP   = (x.23*x.40*inv(x.41))
        z     = x.22^(x.40*inv((x.24*x.41)))
    
    15. DHpkD = x.22^inv((x.23*x.24))
        skP   = (x.23*inv(x.40))
        z     = x.22^inv((x.24*x.40))
    
    16. DHpkD = x.22^(x.23*x.24)
        skP   = inv(x.23)
        z     = x.22^x.24
    
    17. DHpkD = x.22^(x.23*x.24)
        skP   = inv((x.23*x.40))
        z     = x.22^(x.24*inv(x.40))
    
    18. DHpkD = x.22^(x.23*x.24)
        skP   = (x.40*inv(x.23))
        z     = x.22^(x.24*x.40)
    
    19. DHpkD = x.22^(x.23*x.24)
        skP   = (x.40*inv((x.23*x.41)))
        z     = x.22^(x.24*x.40*inv(x.41))
    
    20. DHpkD = x.22^(x.23*x.24*inv(x.25))
        skP   = inv((x.24*x.41))
        z     = x.22^(x.23*inv((x.25*x.41)))
    
    21. DHpkD = x.22^(x.23*x.24*inv(x.25))
        skP   = (x.25*x.41*inv(x.23))
        z     = x.22^(x.24*x.41)
    
    22. DHpkD = x.22^(x.23*x.24*inv(x.25))
        skP   = (x.25*x.41*inv((x.23*x.42)))
        z     = x.22^(x.24*x.41*inv(x.42))
    
    23. DHpkD = x.22^(x.23*x.24*inv(x.25))
        skP   = (x.25*inv(x.24))
        z     = x.22^x.23
    
    24. DHpkD = x.22^(x.23*x.24*inv(x.25))
        skP   = (x.25*inv((x.23*x.41)))
        z     = x.22^(x.24*inv(x.41))
    
    25. DHpkD = x.22^(x.23*x.24*inv(x.25))
        skP   = (x.41*inv((x.23*x.42)))
        z     = x.22^(x.24*x.41*inv((x.25*x.42)))
    
    26. DHpkD = x.22^(x.23*x.24*inv((x.25*x.26)))
        skP   = (x.25*x.42*inv(x.23))
        z     = x.22^(x.24*x.42*inv(x.26))
    
    27. DHpkD = x.22^(x.23*x.24*inv((x.25*x.26)))
        skP   = (x.25*x.42*inv((x.23*x.43)))
        z     = x.22^(x.24*x.42*inv((x.26*x.43)))
    
    28. DHpkD = x.22^(x.23*x.24*inv((x.25*x.26)))
        skP   = (x.25*inv((x.23*x.42)))
        z     = x.22^(x.24*inv((x.26*x.42)))
    
    29. DHpkD = x.22^(x.23*x.24*inv((x.25*x.26)))
        skP   = (x.26*inv(x.24))
        z     = x.22^(x.23*inv(x.25))
    
    30. DHpkD = x.22^(x.23*inv(x.24))
        skP   = x.24
        z     = x.22^x.23
    
    31. DHpkD = x.22^(x.23*inv(x.24))
        skP   = inv(x.40)
        z     = x.22^(x.23*inv((x.24*x.40)))
    
    32. DHpkD = x.22^(x.23*inv(x.24))
        skP   = inv((x.23*x.40))
        z     = x.22^inv((x.24*x.40))
    
    33. DHpkD = x.22^(x.23*inv(x.24))
        skP   = (x.24*x.40)
        z     = x.22^(x.23*x.40)
    
    34. DHpkD = x.22^(x.23*inv(x.24))
        skP   = (x.24*x.40*inv(x.23))
        z     = x.22^x.40
    
    35. DHpkD = x.22^(x.23*inv(x.24))
        skP   = (x.24*x.40*inv((x.23*x.41)))
        z     = x.22^(x.40*inv(x.41))
    
    36. DHpkD = x.22^(x.23*inv(x.24))
        skP   = (x.24*inv(x.23))
        z     = x.22
    
    37. DHpkD = x.22^(x.23*inv(x.24))
        skP   = (x.24*inv((x.23*x.40)))
        z     = x.22^inv(x.40)
    
    38. DHpkD = x.22^(x.23*inv(x.24))
        skP   = (x.40*inv(x.41))
        z     = x.22^(x.23*x.40*inv((x.24*x.41)))
    
    39. DHpkD = x.22^(x.23*inv(x.24))
        skP   = (x.40*inv((x.23*x.41)))
        z     = x.22^(x.40*inv((x.24*x.41)))
    
    40. DHpkD = x.22^(x.23*inv((x.24*x.25)))
        skP   = x.25
        z     = x.22^(x.23*inv(x.24))
    
    41. DHpkD = x.22^(x.23*inv((x.24*x.25)))
        skP   = (x.24*x.41)
        z     = x.22^(x.23*x.41*inv(x.25))
    
    42. DHpkD = x.22^(x.23*inv((x.24*x.25)))
        skP   = (x.24*x.41*inv(x.23))
        z     = x.22^(x.41*inv(x.25))
    
    43. DHpkD = x.22^(x.23*inv((x.24*x.25)))
        skP   = (x.24*x.41*inv(x.42))
        z     = x.22^(x.23*x.41*inv((x.25*x.42)))
    
    44. DHpkD = x.22^(x.23*inv((x.24*x.25)))
        skP   = (x.24*x.41*inv((x.23*x.42)))
        z     = x.22^(x.41*inv((x.25*x.42)))
    
    45. DHpkD = x.22^(x.23*inv((x.24*x.25)))
        skP   = (x.24*inv(x.41))
        z     = x.22^(x.23*inv((x.25*x.41)))
    
    46. DHpkD = x.22^(x.23*inv((x.24*x.25)))
        skP   = (x.24*inv((x.23*x.41)))
        z     = x.22^inv((x.25*x.41))
    
    47. DHpkD = x.22^(x.23*inv((x.24*x.25)))
        skP   = (x.25*inv(x.23))
        z     = x.22^inv(x.24)
  */

rule (modulo E) NDev_CalculateECDH[color=#fff68f]:
   [
   NDevExchanged( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                  StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue, AuthValueURI, LinkID,
                  PKType_P, AuthMethod_P, DHpkP
   )
   ]
  --[ Neq( DHpkP, DHpkD ) ]->
   [
   NDevCalculatedECDH( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                       StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue, AuthValueURI, LinkID,
                       PKType_P, AuthMethod_P, DHpkP, DHpkP^skD
   )
   ]

  /*
  rule (modulo AC) NDev_CalculateECDH[color=#fff68f]:
     [
     NDevExchanged( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                    StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue, AuthValueURI, LinkID,
                    PKType_P, AuthMethod_P, DHpkP
     )
     ]
    --[ Neq( DHpkP, DHpkD ) ]->
     [
     NDevCalculatedECDH( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                         StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue, AuthValueURI, LinkID,
                         PKType_P, AuthMethod_P, DHpkP, z
     )
     ]
    variants (modulo AC)
     1. DHpkP = DHpkP.17
        skD   = skD.17
        z     = DHpkP.17^skD.17
    
     2. DHpkP = DHpkP.17
        skD   = one
        z     = DHpkP.17
    
     3. DHpkP = x.17^x.18
        skD   = skD.19
        z     = x.17^(x.18*skD.19)
    
     4. DHpkP = x.17^x.18
        skD   = inv(x.18)
        z     = x.17
    
     5. DHpkP = x.17^x.18
        skD   = inv((x.18*x.28))
        z     = x.17^inv(x.28)
    
     6. DHpkP = x.17^x.18
        skD   = (x.28*inv(x.18))
        z     = x.17^x.28
    
     7. DHpkP = x.17^x.18
        skD   = (x.28*inv((x.18*x.29)))
        z     = x.17^(x.28*inv(x.29))
    
     8. DHpkP = x.17^inv(x.18)
        skD   = x.18
        z     = x.17
    
     9. DHpkP = x.17^inv(x.18)
        skD   = inv(x.28)
        z     = x.17^inv((x.18*x.28))
    
    10. DHpkP = x.17^inv(x.18)
        skD   = (x.18*x.28)
        z     = x.17^x.28
    
    11. DHpkP = x.17^inv(x.18)
        skD   = (x.28*inv(x.29))
        z     = x.17^(x.28*inv((x.18*x.29)))
    
    12. DHpkP = x.17^inv((x.18*x.19))
        skD   = x.19
        z     = x.17^inv(x.18)
    
    13. DHpkP = x.17^inv((x.18*x.19))
        skD   = (x.18*x.29)
        z     = x.17^(x.29*inv(x.19))
    
    14. DHpkP = x.17^inv((x.18*x.19))
        skD   = (x.18*x.29*inv(x.30))
        z     = x.17^(x.29*inv((x.19*x.30)))
    
    15. DHpkP = x.17^inv((x.18*x.19))
        skD   = (x.18*inv(x.29))
        z     = x.17^inv((x.19*x.29))
    
    16. DHpkP = x.17^(x.18*x.19)
        skD   = inv(x.18)
        z     = x.17^x.19
    
    17. DHpkP = x.17^(x.18*x.19)
        skD   = inv((x.18*x.29))
        z     = x.17^(x.19*inv(x.29))
    
    18. DHpkP = x.17^(x.18*x.19)
        skD   = (x.29*inv(x.18))
        z     = x.17^(x.19*x.29)
    
    19. DHpkP = x.17^(x.18*x.19)
        skD   = (x.29*inv((x.18*x.30)))
        z     = x.17^(x.19*x.29*inv(x.30))
    
    20. DHpkP = x.17^(x.18*x.19*inv(x.20))
        skD   = inv((x.19*x.30))
        z     = x.17^(x.18*inv((x.20*x.30)))
    
    21. DHpkP = x.17^(x.18*x.19*inv(x.20))
        skD   = (x.20*x.30*inv(x.18))
        z     = x.17^(x.19*x.30)
    
    22. DHpkP = x.17^(x.18*x.19*inv(x.20))
        skD   = (x.20*x.30*inv((x.18*x.31)))
        z     = x.17^(x.19*x.30*inv(x.31))
    
    23. DHpkP = x.17^(x.18*x.19*inv(x.20))
        skD   = (x.20*inv(x.19))
        z     = x.17^x.18
    
    24. DHpkP = x.17^(x.18*x.19*inv(x.20))
        skD   = (x.20*inv((x.18*x.30)))
        z     = x.17^(x.19*inv(x.30))
    
    25. DHpkP = x.17^(x.18*x.19*inv(x.20))
        skD   = (x.30*inv((x.18*x.31)))
        z     = x.17^(x.19*x.30*inv((x.20*x.31)))
    
    26. DHpkP = x.17^(x.18*x.19*inv((x.20*x.21)))
        skD   = (x.20*x.31*inv(x.18))
        z     = x.17^(x.19*x.31*inv(x.21))
    
    27. DHpkP = x.17^(x.18*x.19*inv((x.20*x.21)))
        skD   = (x.20*x.31*inv((x.18*x.32)))
        z     = x.17^(x.19*x.31*inv((x.21*x.32)))
    
    28. DHpkP = x.17^(x.18*x.19*inv((x.20*x.21)))
        skD   = (x.20*inv((x.18*x.31)))
        z     = x.17^(x.19*inv((x.21*x.31)))
    
    29. DHpkP = x.17^(x.18*x.19*inv((x.20*x.21)))
        skD   = (x.21*inv(x.19))
        z     = x.17^(x.18*inv(x.20))
    
    30. DHpkP = x.17^(x.18*inv(x.19))
        skD   = x.19
        z     = x.17^x.18
    
    31. DHpkP = x.17^(x.18*inv(x.19))
        skD   = inv(x.29)
        z     = x.17^(x.18*inv((x.19*x.29)))
    
    32. DHpkP = x.17^(x.18*inv(x.19))
        skD   = inv((x.18*x.29))
        z     = x.17^inv((x.19*x.29))
    
    33. DHpkP = x.17^(x.18*inv(x.19))
        skD   = (x.19*x.29)
        z     = x.17^(x.18*x.29)
    
    34. DHpkP = x.17^(x.18*inv(x.19))
        skD   = (x.19*x.29*inv(x.18))
        z     = x.17^x.29
    
    35. DHpkP = x.17^(x.18*inv(x.19))
        skD   = (x.19*x.29*inv((x.18*x.30)))
        z     = x.17^(x.29*inv(x.30))
    
    36. DHpkP = x.17^(x.18*inv(x.19))
        skD   = (x.19*inv(x.18))
        z     = x.17
    
    37. DHpkP = x.17^(x.18*inv(x.19))
        skD   = (x.19*inv((x.18*x.29)))
        z     = x.17^inv(x.29)
    
    38. DHpkP = x.17^(x.18*inv(x.19))
        skD   = (x.29*inv(x.30))
        z     = x.17^(x.18*x.29*inv((x.19*x.30)))
    
    39. DHpkP = x.17^(x.18*inv(x.19))
        skD   = (x.29*inv((x.18*x.30)))
        z     = x.17^(x.29*inv((x.19*x.30)))
    
    40. DHpkP = x.17^(x.18*inv((x.19*x.20)))
        skD   = x.20
        z     = x.17^(x.18*inv(x.19))
    
    41. DHpkP = x.17^(x.18*inv((x.19*x.20)))
        skD   = (x.19*x.30)
        z     = x.17^(x.18*x.30*inv(x.20))
    
    42. DHpkP = x.17^(x.18*inv((x.19*x.20)))
        skD   = (x.19*x.30*inv(x.18))
        z     = x.17^(x.30*inv(x.20))
    
    43. DHpkP = x.17^(x.18*inv((x.19*x.20)))
        skD   = (x.19*x.30*inv(x.31))
        z     = x.17^(x.18*x.30*inv((x.20*x.31)))
    
    44. DHpkP = x.17^(x.18*inv((x.19*x.20)))
        skD   = (x.19*x.30*inv((x.18*x.31)))
        z     = x.17^(x.30*inv((x.20*x.31)))
    
    45. DHpkP = x.17^(x.18*inv((x.19*x.20)))
        skD   = (x.19*inv(x.30))
        z     = x.17^(x.18*inv((x.20*x.30)))
    
    46. DHpkP = x.17^(x.18*inv((x.19*x.20)))
        skD   = (x.19*inv((x.18*x.30)))
        z     = x.17^inv((x.20*x.30))
    
    47. DHpkP = x.17^(x.18*inv((x.19*x.20)))
        skD   = (x.20*inv(x.18))
        z     = x.17^inv(x.19)
  */

rule (modulo E) NDev_DisplayAuthValue_OutputOOB[color=#fff68f]:
   [
   Fr( ~random ),
   NDevCalculatedECDH( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                       StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_NULL, AuthValueURI_NULL,
                       LinkID, PKType_P, AuthMethod_P, DHpkP, ECDHSecret
   )
   ]
  --[
  Eq( AuthMethod_P, 'OutputOOB' ), NDevOutputOOB( ),
  NDEV_DIS_AUTHVALUE( ~random )
  ]->
   [
   Out_UD( <'Display', 'Device', 'User'>, NDev, $User, ~random ),
   NDevWaitConfirm( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                    StaticOOB_D, skD, DHpkD, OOBPKURI, ~random, AuthValueURI_NULL, LinkID,
                    PKType_P, AuthMethod_P, DHpkP, ECDHSecret
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_AskForInput_OutputOOB[color=#bbffff]:
   [
   ProvCalculatedECDH( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                       NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
                       OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P, skP, DHpkP,
                       DHpkD, ECDHSecret
   )
   ]
  --[ Eq( AuthMethod_P, 'OutputOOB' ), ProvOutputOOB( ) ]->
   [
   Out_UD( <'AskForInput', 'Device', 'User'>, Prov, $User, 'Input' ),
   ProvAskedForInput( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                      NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
                      OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P, skP, DHpkP,
                      DHpkD, ECDHSecret
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_GetAuthValue_OutputOOB[color=#bbffff]:
   [
   In_UD( <'Input', 'User', 'Device'>, $User, Prov, random ),
   ProvAskedForInput( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                      NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI_NULL, AuthValue_NULL,
                      PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P,
                      skP, DHpkP, DHpkD, ECDHSecret
   )
   ]
  -->
   [
   ProvReadyForConfirm( Prov, NetKey, ReadOOBPK, ReadStaticOOB,
                        SecureOption, NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI_NULL,
                        random, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P,
                        AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_DisplayAuthValue_InputOOB[color=#bbffff]:
   [
   Fr( ~random ),
   ProvCalculatedECDH( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                       NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI_NULL, AuthValue_NULL,
                       PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P,
                       skP, DHpkP, DHpkD, ECDHSecret
   )
   ]
  --[
  Eq( AuthMethod_P, 'InputOOB' ), ProvInputOOB( ),
  PROV_DIS_AUTHVALUE( ~random )
  ]->
   [
   Out_UD( <'Display', 'Device', 'User'>, Prov, $User, ~random ),
   ProvWaitInputComplete( Prov, NetKey, ReadOOBPK, ReadStaticOOB,
                          SecureOption, NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI_NULL,
                          ~random, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P,
                          AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) NDev_AskForInput_InputOOB[color=#fff68f]:
   [
   NDevCalculatedECDH( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                       StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue, AuthValueURI, LinkID,
                       PKType_P, AuthMethod_P, DHpkP, ECDHSecret
   )
   ]
  --[ Eq( AuthMethod_P, 'InputOOB' ), NDevInputOOB( ) ]->
   [
   Out_UD( <'AskForInput', 'Device', 'User'>, NDev, $User, 'Input' ),
   NDevAskForInput( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                    StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue, AuthValueURI, LinkID,
                    PKType_P, AuthMethod_P, DHpkP, ECDHSecret
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) NDev_GetAuthValue_InputOOB[color=#fff68f]:
   [
   In_UD( <'Input', 'User', 'Device'>, $User, NDev, random ),
   NDevAskForInput( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                    StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_NULL, AuthValueURI_NULL,
                    LinkID, PKType_P, AuthMethod_P, DHpkP, ECDHSecret
   )
   ]
  --[ NDEV_ASKFORINPUT( NDev, LinkID ) ]->
   [
   Out( <LinkID, 'InputComplete'> ),
   NDevWaitConfirm( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                    StaticOOB_D, skD, DHpkD, OOBPKURI, random, AuthValueURI_NULL, LinkID,
                    PKType_P, AuthMethod_P, DHpkP, ECDHSecret
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_ReadyForConfirm_InputOOB[color=#bbffff]:
   [
   In( <LinkID, 'InputComplete'> ),
   ProvWaitInputComplete( Prov, NetKey, ReadOOBPK, ReadStaticOOB,
                          SecureOption, NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI,
                          AuthValue, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P,
                          AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret
   )
   ]
  -->
   [
   ProvReadyForConfirm( Prov, NetKey, ReadOOBPK, ReadStaticOOB,
                        SecureOption, NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI,
                        AuthValue, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P,
                        AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_GetAuthValue_StaticOOB[color=#bbffff]:
   [
   ProvCalculatedECDH( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                       NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue, PKType_D,
                       OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P, skP, DHpkP,
                       DHpkD, ECDHSecret
   )
   ]
  --[
  PROV_STA_AUTHVALUE( AuthValue ), Eq( AuthMethod_P, 'StaticOOB' ),
  ProvStaticOOB( )
  ]->
   [
   ProvReadyForConfirm( Prov, NetKey, ReadOOBPK, ReadStaticOOB,
                        SecureOption, NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI,
                        AuthValue, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P,
                        AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) NDev_GetAuthValue_StaticOOB[color=#fff68f]:
   [
   NDevCalculatedECDH( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                       StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue, AuthValueURI, LinkID,
                       PKType_P, AuthMethod_P, DHpkP, ECDHSecret
   )
   ]
  --[
  NDEV_STA_AUTHVALUE( AuthValue ), Eq( AuthMethod_P, 'StaticOOB' ),
  NDevStaticOOB( )
  ]->
   [
   NDevWaitConfirm( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                    StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue, AuthValueURI, LinkID,
                    PKType_P, AuthMethod_P, DHpkP, ECDHSecret
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_GetAuthValue_NoOOB[color=#bbffff]:
   [
   ProvCalculatedECDH( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                       NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI_NULL, AuthValue_NULL,
                       PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P,
                       skP, DHpkP, DHpkD, ECDHSecret
   )
   ]
  --[
  Eq( AuthMethod_P, 'NoOOB' ), ProvNoOOB( ), PROV_NOO_AUTHVALUE( '000000' )
  ]->
   [
   ProvReadyForConfirm( Prov, NetKey, ReadOOBPK, ReadStaticOOB,
                        SecureOption, NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI_NULL,
                        '000000', PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P,
                        AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) NDev_GetAuthValue_NoOOB[color=#fff68f]:
   [
   NDevCalculatedECDH( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                       StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_NULL, AuthValueURI_NULL,
                       LinkID, PKType_P, AuthMethod_P, DHpkP, ECDHSecret
   )
   ]
  --[
  Eq( AuthMethod_P, 'NoOOB' ), NDevNoOOB( ), NDEV_NOO_AUTHVALUE( '000000' )
  ]->
   [
   NDevWaitConfirm( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                    StaticOOB_D, skD, DHpkD, OOBPKURI, '000000', AuthValueURI_NULL, LinkID,
                    PKType_P, AuthMethod_P, DHpkP, ECDHSecret
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) User_OutputOOB[color=#6495ed]:
   [
   !User( User ), !Provisioning( D1, D2 ),
   In_UD( <'AskForInput', 'Device', 'User'>, D1, User, 'Input' ),
   In_UD( <'Display', 'Device', 'User'>, D2, User, m )
   ]
  --[ OneInteraction( ) ]->
   [ Out_UD( <'Input', 'User', 'Device'>, User, D1, m ) ]

  // loop breakers: [2,3]
  /* has exactly the trivial AC variant */

rule (modulo E) User_InputOOB[color=#6495ed]:
   [
   !User( User ), !Provisioning( D1, D2 ),
   In_UD( <'Display', 'Device', 'User'>, D1, User, m ),
   In_UD( <'AskForInput', 'Device', 'User'>, D2, User, 'Input' )
   ]
  --[ USER_INPUT( D2 ), OneInteraction( ) ]->
   [ Out_UD( <'Input', 'User', 'Device'>, User, D2, m ) ]

  // loop breakers: [2,3]
  /* has exactly the trivial AC variant */

rule (modulo E) User_Abnormal[color=#6495ed]:
   [
   !User( User ), !Provisioning( D1, D2 ), Fr( ~m ),
   In_UD( <'AskForInput', 'Device', 'User'>, D1, User, 'Input' ),
   In_UD( <'AskForInput', 'Device', 'User'>, D2, User, 'Input' )
   ]
  --[ USER_ABNORM( ~m ), OneInteraction( ) ]->
   [
   Out_UD( <'Input', 'User', 'Device'>, User, D1, ~m ),
   Out_UD( <'Input', 'User', 'Device'>, User, D2, ~m )
   ]

  // loop breakers: [3,4]
  /* has exactly the trivial AC variant */

restriction OneInteraction:
  "∀ #i #j.
    ((OneInteraction( ) @ #i) ∧ (OneInteraction( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

rule (modulo E) Prov_Confirmation_1[color=#bbffff]:
   [
   Fr( ~Np ),
   ProvReadyForConfirm( Prov, NetKey, ReadOOBPK, ReadStaticOOB,
                        SecureOption, NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI,
                        AuthValue_In, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P,
                        AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret
   )
   ]
  --[ PROV_GET_AUTHVALUE( AuthValue_In ) ]->
   [
   Out( <LinkID, 
         cmac((
               <
                cmac('prck',
                     cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                          s1(<DHpkP, DHpkD>))), 
                '1'>+
               <fst(AuthValue_In), '2'>),
              ~Np)
        >
   ),
   ProvSentConfirm_1( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                      NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In,
                      <fst(AuthValue_In), '2'>, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D,
                      PKType_P, AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, ~Np,
                      s1(<DHpkP, DHpkD>), <fst(ECDHSecret), '1'>, <snd(ECDHSecret), '2'>,
                      <
                       cmac('prck',
                            cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                 s1(<DHpkP, DHpkD>))), 
                       '1'>,
                      cmac((
                            <
                             cmac('prck',
                                  cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                       s1(<DHpkP, DHpkD>))), 
                             '1'>+
                            <fst(AuthValue_In), '2'>),
                           ~Np)
   )
   ]

  /*
  rule (modulo AC) Prov_Confirmation_1[color=#bbffff]:
     [
     Fr( ~Np ),
     ProvReadyForConfirm( Prov, NetKey, ReadOOBPK, ReadStaticOOB,
                          SecureOption, NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI,
                          AuthValue_In, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P,
                          AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret
     )
     ]
    --[ PROV_GET_AUTHVALUE( AuthValue_In ) ]->
     [
     Out( <LinkID, 
           cmac((<z.2, '2'>+
                 <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, DHpkD>))), '1'>),
                ~Np)
          >
     ),
     ProvSentConfirm_1( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                        NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In,
                        <z.2, '2'>, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P,
                        AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, ~Np, s1(<DHpkP, DHpkD>),
                        <z, '1'>, <z.1, '2'>,
                        <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, DHpkD>))), '1'>,
                        cmac((<z.2, '2'>+
                              <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, DHpkD>))), '1'>),
                             ~Np)
     )
     ]
    variants (modulo AC)
    1. AuthValue_In
             = AuthValue_In.34
       ECDHSecret
             = ECDHSecret.38
       z     = fst(ECDHSecret.38)
       z.1   = snd(ECDHSecret.38)
       z.2   = fst(AuthValue_In.34)
    
    2. AuthValue_In
             = AuthValue_In.52
       ECDHSecret
             = <z.72, z.74>
       z     = z.72
       z.1   = z.74
       z.2   = fst(AuthValue_In.52)
    
    3. AuthValue_In
             = <z.45, x.57>
       ECDHSecret
             = <z.41, z.43>
       z     = z.41
       z.1   = z.43
       z.2   = z.45
    
    4. AuthValue_In
             = <z.93, x.137>
       ECDHSecret
             = ECDHSecret.73
       z     = fst(ECDHSecret.73)
       z.1   = snd(ECDHSecret.73)
       z.2   = z.93
  */

rule (modulo E) NDev_Confirmation_1[color=#fff68f]:
   [
   In( <LinkID, Cp_1> ), Fr( ~Nd ),
   NDevWaitConfirm( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                    StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_In, AuthValueURI, LinkID,
                    PKType_P, AuthMethod_P, DHpkP, ECDHSecret
   )
   ]
  --[
  Neq( Cp_1,
       cmac((
             <
              cmac('prck',
                   cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                        s1(<DHpkP, DHpkD>))), 
              '1'>+
             <fst(AuthValue_In), '2'>),
            ~Nd)
  ),
  NDEV_GET_AUTHVALUE( AuthValue_In )
  ]->
   [
   Out( <LinkID, 
         cmac((
               <
                cmac('prck',
                     cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                          s1(<DHpkP, DHpkD>))), 
                '1'>+
               <fst(AuthValue_In), '2'>),
              ~Nd)
        >
   ),
   NDevSentConfirm_1( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                      StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_In,
                      <fst(AuthValue_In), '2'>, AuthValueURI, LinkID, PKType_P, AuthMethod_P,
                      DHpkP, ECDHSecret, Cp_1, ~Nd, s1(<DHpkP, DHpkD>), <fst(ECDHSecret), '1'>,
                      <snd(ECDHSecret), '2'>,
                      <
                       cmac('prck',
                            cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                 s1(<DHpkP, DHpkD>))), 
                       '1'>,
                      cmac((
                            <
                             cmac('prck',
                                  cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                       s1(<DHpkP, DHpkD>))), 
                             '1'>+
                            <fst(AuthValue_In), '2'>),
                           ~Nd)
   )
   ]

  /*
  rule (modulo AC) NDev_Confirmation_1[color=#fff68f]:
     [
     In( <LinkID, Cp_1> ), Fr( ~Nd ),
     NDevWaitConfirm( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                      StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_In, AuthValueURI, LinkID,
                      PKType_P, AuthMethod_P, DHpkP, ECDHSecret
     )
     ]
    --[
    Neq( Cp_1,
         cmac((<z.2, '2'>+
               <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, DHpkD>))), '1'>),
              ~Nd)
    ),
    NDEV_GET_AUTHVALUE( AuthValue_In )
    ]->
     [
     Out( <LinkID, 
           cmac((<z.2, '2'>+
                 <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, DHpkD>))), '1'>),
                ~Nd)
          >
     ),
     NDevSentConfirm_1( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                        StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_In, <z.2, '2'>,
                        AuthValueURI, LinkID, PKType_P, AuthMethod_P, DHpkP, ECDHSecret, Cp_1,
                        ~Nd, s1(<DHpkP, DHpkD>), <z, '1'>, <z.1, '2'>,
                        <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, DHpkD>))), '1'>,
                        cmac((<z.2, '2'>+
                              <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, DHpkD>))), '1'>),
                             ~Nd)
     )
     ]
    variants (modulo AC)
    1. AuthValue_In
             = AuthValue_In.31
       ECDHSecret
             = ECDHSecret.36
       z     = fst(ECDHSecret.36)
       z.1   = snd(ECDHSecret.36)
       z.2   = fst(AuthValue_In.31)
    
    2. AuthValue_In
             = AuthValue_In.44
       ECDHSecret
             = <z.60, z.62>
       z     = z.60
       z.1   = z.62
       z.2   = fst(AuthValue_In.44)
    
    3. AuthValue_In
             = <z.41, x.53>
       ECDHSecret
             = <z.37, z.39>
       z     = z.37
       z.1   = z.39
       z.2   = z.41
    
    4. AuthValue_In
             = <z.74, x.108>
       ECDHSecret
             = ECDHSecret.59
       z     = fst(ECDHSecret.59)
       z.1   = snd(ECDHSecret.59)
       z.2   = z.74
  */

rule (modulo E) Prov_SendNonce_1[color=#bbffff]:
   [
   In( <LinkID, Cd_1> ),
   ProvSentConfirm_1( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                      NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In,
                      AuthValue_1, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P,
                      AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, Np_1, ConfirmSALT, ECDH1,
                      ECDH2, CK, Cp_1
   )
   ]
  --[ Neq( Cp_1, Cd_1 ) ]->
   [
   Out( <LinkID, Np_1> ),
   ProvSentNonce_1( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                    NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In,
                    AuthValue_1, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P,
                    AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, Np_1, ConfirmSALT, ECDH1,
                    ECDH2, CK, Cp_1, Cd_1
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) NDev_SendNonce_1[color=#fff68f]:
   [
   In( <LinkID, Np_1> ),
   NDevSentConfirm_1( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                      StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_In, AuthValue_1,
                      AuthValueURI, LinkID, PKType_P, AuthMethod_P, DHpkP, ECDHSecret, Cp_1,
                      Nd_1, ConfirmSALT, ECDH1, ECDH2, CK, Cd_1
   )
   ]
  --[ Check( Cp_1, (AuthValue_1+CK), Np_1 ) ]->
   [
   Out( <LinkID, Nd_1> ),
   NDevSentNonce_1( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                    StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_In, AuthValue_1,
                    AuthValueURI, LinkID, PKType_P, AuthMethod_P, DHpkP, ECDHSecret, Cp_1,
                    Nd_1, ConfirmSALT, ECDH1, ECDH2, CK, Cd_1, Np_1
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_Confirmation_2[color=#bbffff]:
   [
   In( <LinkID, Nd_1> ), Fr( ~Np ),
   ProvSentNonce_1( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                    NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In,
                    AuthValue_1, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P,
                    AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, Np_1, ConfirmSALT, ECDH1,
                    ECDH2, CK, Cp_1, Cd_1
   )
   ]
  --[
  Running_Prov( Prov, NDev, <ECDHSecret, Np_1, ~Np> ),
  Check( Cd_1, (AuthValue_1+CK), Nd_1 )
  ]->
   [
   Out( <LinkID, cmac((CK+<snd(AuthValue_In), '2'>), ~Np)> ),
   ProvSentConfirm_2( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                      NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In,
                      AuthValue_1, <snd(AuthValue_In), '2'>, PKType_D, OutputOOB_D, InputOOB_D,
                      StaticOOB_D, PKType_P, AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, Np_1,
                      ConfirmSALT, ECDH1, ECDH2, CK, Cp_1, Cd_1, Nd_1, ~Np,
                      cmac((CK+<snd(AuthValue_In), '2'>), ~Np)
   )
   ]

  /*
  rule (modulo AC) Prov_Confirmation_2[color=#bbffff]:
     [
     In( <LinkID, Nd_1> ), Fr( ~Np ),
     ProvSentNonce_1( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                      NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In,
                      AuthValue_1, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P,
                      AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, Np_1, ConfirmSALT, ECDH1,
                      ECDH2, CK, Cp_1, Cd_1
     )
     ]
    --[
    Running_Prov( Prov, NDev, <ECDHSecret, Np_1, ~Np> ),
    Check( Cd_1, (AuthValue_1+CK), Nd_1 )
    ]->
     [
     Out( <LinkID, cmac((CK+<z, '2'>), ~Np)> ),
     ProvSentConfirm_2( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                        NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In,
                        AuthValue_1, <z, '2'>, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D,
                        PKType_P, AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, Np_1, ConfirmSALT,
                        ECDH1, ECDH2, CK, Cp_1, Cd_1, Nd_1, ~Np, cmac((CK+<z, '2'>), ~Np)
     )
     ]
    variants (modulo AC)
    1. AuthValue_In
             = AuthValue_In.34
       z     = snd(AuthValue_In.34)
    
    2. AuthValue_In
             = <x.36, z.35>
       z     = z.35
  */

rule (modulo E) NDev_Confirmation_2[color=#fff68f]:
   [
   In( <LinkID, Cp_2> ), Fr( ~Nd ),
   NDevSentNonce_1( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                    StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_In, AuthValue_1,
                    AuthValueURI, LinkID, PKType_P, AuthMethod_P, DHpkP, ECDHSecret, Cp_1,
                    Nd_1, ConfirmSALT, ECDH1, ECDH2, CK, Cd_1, Np_1
   )
   ]
  --[
  Running_NDev( NDev, <ECDHSecret, Nd_1, ~Nd> ),
  Neq( Cp_2, cmac((CK+<snd(AuthValue_In), '2'>), ~Nd) )
  ]->
   [
   Out( <LinkID, cmac((CK+<snd(AuthValue_In), '2'>), ~Nd)> ),
   NDevSentConfirm_2( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                      StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_In, AuthValue_1,
                      <snd(AuthValue_In), '2'>, AuthValueURI, LinkID, PKType_P, AuthMethod_P,
                      DHpkP, ECDHSecret, Cp_1, Nd_1, ConfirmSALT, ECDH1, ECDH2, CK, Cd_1, Np_1,
                      Cp_2, ~Nd, cmac((CK+<snd(AuthValue_In), '2'>), ~Nd)
   )
   ]

  /*
  rule (modulo AC) NDev_Confirmation_2[color=#fff68f]:
     [
     In( <LinkID, Cp_2> ), Fr( ~Nd ),
     NDevSentNonce_1( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                      StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_In, AuthValue_1,
                      AuthValueURI, LinkID, PKType_P, AuthMethod_P, DHpkP, ECDHSecret, Cp_1,
                      Nd_1, ConfirmSALT, ECDH1, ECDH2, CK, Cd_1, Np_1
     )
     ]
    --[
    Running_NDev( NDev, <ECDHSecret, Nd_1, ~Nd> ),
    Neq( Cp_2, cmac((CK+<z, '2'>), ~Nd) )
    ]->
     [
     Out( <LinkID, cmac((CK+<z, '2'>), ~Nd)> ),
     NDevSentConfirm_2( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                        StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_In, AuthValue_1, <z, '2'>,
                        AuthValueURI, LinkID, PKType_P, AuthMethod_P, DHpkP, ECDHSecret, Cp_1,
                        Nd_1, ConfirmSALT, ECDH1, ECDH2, CK, Cd_1, Np_1, Cp_2, ~Nd,
                        cmac((CK+<z, '2'>), ~Nd)
     )
     ]
    variants (modulo AC)
    1. AuthValue_In
             = AuthValue_In.30
       z     = snd(AuthValue_In.30)
    
    2. AuthValue_In
             = <x.32, z.31>
       z     = z.31
  */

rule (modulo E) Prov_SendNonce_2[color=#bbffff]:
   [
   In( <LinkID, Cd_2> ),
   ProvSentConfirm_2( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                      NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In,
                      AuthValue_1, AuthValue_2, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D,
                      PKType_P, AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, Np_1, ConfirmSALT,
                      ECDH1, ECDH2, CK, Cp_1, Cd_1, Nd_1, Np_2, Cp_2
   )
   ]
  --[ Neq( Cp_2, Cd_2 ) ]->
   [
   Out( <LinkID, Np_2> ),
   ProvSentNonce_2( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                    NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In,
                    AuthValue_1, AuthValue_2, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D,
                    PKType_P, AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, Np_1, ConfirmSALT,
                    ECDH1, ECDH2, CK, Cp_1, Cd_1, Nd_1, Np_2, Cp_2, Cd_2
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) NDev_SendNonce_2[color=#fff68f]:
   [
   In( <LinkID, Np_2> ),
   NDevSentConfirm_2( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                      StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_In, AuthValue_1,
                      AuthValue_2, AuthValueURI, LinkID, PKType_P, AuthMethod_P, DHpkP,
                      ECDHSecret, Cp_1, Nd_1, ConfirmSALT, ECDH1, ECDH2, CK, Cd_1, Np_1, Cp_2,
                      Nd_2, Cd_2
   )
   ]
  --[ Check( Cp_2, (AuthValue_2+CK), Np_2 ) ]->
   [
   Out( <LinkID, Nd_2> ),
   NDevSentNonce_2( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                    StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_In, AuthValue_1,
                    AuthValue_2, AuthValueURI, LinkID, PKType_P, AuthMethod_P, DHpkP,
                    ECDHSecret, Cp_1, Nd_1, ConfirmSALT, ECDH1, ECDH2, CK, Cd_1, Np_1, Cp_2,
                    Nd_2, Cd_2, Np_2, s1(<ConfirmSALT, Np_2, Nd_2>),
                    cmac('prsk', cmac((ECDH1+ECDH2), s1(<ConfirmSALT, Np_2, Nd_2>)))
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_Check[color=#bbffff]:
   [
   In( <LinkID, Nd_2> ),
   ProvSentNonce_2( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                    NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In,
                    AuthValue_1, AuthValue_2, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D,
                    PKType_P, AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, Np_1, ConfirmSALT,
                    ECDH1, ECDH2, CK, Cp_1, Cd_1, Nd_1, Np_2, Cp_2, Cd_2
   )
   ]
  --[ Check( Cd_2, (AuthValue_2+CK), Nd_2 ) ]->
   [
   ProvChecked( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
                DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In, AuthValue_1,
                AuthValue_2, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P,
                AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, Np_1, ConfirmSALT, ECDH1,
                ECDH2, CK, Cp_1, Cd_1, Nd_1, Np_2, Cp_2, Cd_2, Nd_2,
                s1(<ConfirmSALT, Np_2, Nd_2>),
                cmac('prsk', cmac((ECDH1+ECDH2), s1(<ConfirmSALT, Np_2, Nd_2>)))
   )
   ]

  /* has exactly the trivial AC variant */

restriction CheckCMAC:
  "∀ C M K #i.
    (Check( C, M, K ) @ #i) ⇒
    (((C = cmac(M, K)) ∨
      (∃ mk mo.
        (((mk+mo) = M) ∧ (¬(∃ x y. (x+y) = mk))) ∧ (mk = rm(C, mo, K)))) ∨
     ((¬(∃ x y. (x+y) = M)) ∧ (M = rm1(C, K))))"

rule (modulo E) Prov_Distribute[color=#bbffff]:
   [
   ProvChecked( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
                DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In, AuthValue_1,
                AuthValue_2, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P,
                AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, Np_1, ConfirmSALT, ECDH1,
                ECDH2, CK, Cp_1, Cd_1, Nd_1, Np_2, Cp_2, Cd_2, Nd_2, ProvisioningSALT,
                SessionKey
   )
   ]
  --[
  Secret( SessionKey, cmac('prdk', cmac((ECDH1+ECDH2), ProvisioningSALT)),
          NetKey
  ),
  Role( 'Prov' )
  ]->
   [
   Out( <LinkID, senc(NetKey, SessionKey)> ),
   ProvDistributed( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                    NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In,
                    AuthValue_1, AuthValue_2, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D,
                    PKType_P, AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, Np_1, ConfirmSALT,
                    ECDH1, ECDH2, CK, Cp_1, Cd_1, Nd_1, Np_2, Cp_2, Cd_2, Nd_2,
                    ProvisioningSALT, SessionKey, senc(NetKey, SessionKey),
                    cmac('prdk', cmac((ECDH1+ECDH2), ProvisioningSALT))
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) NDev_Complete[color=#fff68f]:
   [
   In( <LinkID, senc(NetKey, SessionKey)> ),
   NDevSentNonce_2( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                    StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_In, AuthValue_1,
                    AuthValue_2, AuthValueURI, LinkID, PKType_P, AuthMethod_P, DHpkP,
                    ECDHSecret, Cp_1, Nd_1, ConfirmSALT, ECDH1, ECDH2, CK, Cd_1, Np_1, Cp_2,
                    Nd_2, Cd_2, Np_2, ProvisioningSALT, SessionKey
   )
   ]
  --[
  FinishedD( ), Commit_NDev( NDev, <ECDHSecret, Np_1, Np_2> ),
  Role( 'NDev' )
  ]->
   [
   Out( <LinkID, 'Complete'> ),
   NDevComplete( NDev, DeviceUUID, PKType_D, OutputOOB_D, InputOOB_D,
                 StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_In, AuthValue_1,
                 AuthValue_2, AuthValueURI, LinkID, PKType_P, AuthMethod_P, DHpkP,
                 ECDHSecret, Cp_1, Nd_1, ConfirmSALT, ECDH1, ECDH2, CK, Cd_1, Np_1, Cp_2,
                 Nd_2, Cd_2, Np_2, ProvisioningSALT, SessionKey,
                 cmac('prdk', cmac((ECDH1+ECDH2), ProvisioningSALT)), NetKey
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Prov_Complete[color=#bbffff]:
   [
   In( <LinkID, 'Complete'> ),
   ProvDistributed( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption,
                    NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In,
                    AuthValue_1, AuthValue_2, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D,
                    PKType_P, AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, Np_1, ConfirmSALT,
                    ECDH1, ECDH2, CK, Cp_1, Cd_1, Nd_1, Np_2, Cp_2, Cd_2, Nd_2,
                    ProvisioningSALT, SessionKey, ProvData, DevKey
   )
   ]
  --[ FinishedP( ), Commit_Prov( Prov, NDev, <ECDHSecret, Nd_1, Nd_2> ) ]->
   [
   ProvComplete( Prov, NetKey, ReadOOBPK, ReadStaticOOB, SecureOption, NDev,
                 DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In, AuthValue_1,
                 AuthValue_2, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P,
                 AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, Np_1, ConfirmSALT, ECDH1,
                 ECDH2, CK, Cp_1, Cd_1, Nd_1, Np_2, Cp_2, Cd_2, Nd_2, ProvisioningSALT,
                 SessionKey, ProvData, DevKey
   )
   ]

  /* has exactly the trivial AC variant */

restriction Equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction Inequality:
  "∀ x #i. (Neq( x, x ) @ #i) ⇒ (⊥)"
  // safety formula

lemma types [sources]:
  all-traces
  "((∀ r1 #i.
      (PROV_GET_AUTHVALUE( r1 ) @ #i) ⇒
      (((((∃ #j. PROV_DIS_AUTHVALUE( r1 ) @ #j) ∨
          (∃ #j. NDEV_DIS_AUTHVALUE( r1 ) @ #j)) ∨
         (∃ #j. PROV_NOO_AUTHVALUE( r1 ) @ #j)) ∨
        (∃ #j. PROV_STA_AUTHVALUE( r1 ) @ #j)) ∨
       (∃ #j. USER_ABNORM( r1 ) @ #j))) ∧
    (∀ r2 #i.
      (NDEV_GET_AUTHVALUE( r2 ) @ #i) ⇒
      (((((∃ #j. PROV_DIS_AUTHVALUE( r2 ) @ #j) ∨
          (∃ #j. NDEV_DIS_AUTHVALUE( r2 ) @ #j)) ∨
         (∃ #j. NDEV_NOO_AUTHVALUE( r2 ) @ #j)) ∨
        (∃ #j. NDEV_STA_AUTHVALUE( r2 ) @ #j)) ∨
       (∃ #j. USER_ABNORM( r2 ) @ #j)))) ∧
   (∀ ndev linkid #i.
     (NDEV_ASKFORINPUT( ndev, linkid ) @ #i) ⇒
     (((∃ #j. USER_INPUT( ndev ) @ #j) ∨ (∃ m #l. USER_ABNORM( m ) @ #l)) ∧
      (∃ #k. (!KU( linkid ) @ #k) ∧ (#k < #i))))"
/*
guarded formula characterizing all counter-examples:
"((∃ r1 #i.
    (PROV_GET_AUTHVALUE( r1 ) @ #i)
   ∧
    (∀ #j. (PROV_DIS_AUTHVALUE( r1 ) @ #j) ⇒ ⊥) ∧
    (∀ #j. (NDEV_DIS_AUTHVALUE( r1 ) @ #j) ⇒ ⊥) ∧
    (∀ #j. (PROV_NOO_AUTHVALUE( r1 ) @ #j) ⇒ ⊥) ∧
    (∀ #j. (PROV_STA_AUTHVALUE( r1 ) @ #j) ⇒ ⊥) ∧
    (∀ #j. (USER_ABNORM( r1 ) @ #j) ⇒ ⊥)) ∨
  (∃ r2 #i.
    (NDEV_GET_AUTHVALUE( r2 ) @ #i)
   ∧
    (∀ #j. (PROV_DIS_AUTHVALUE( r2 ) @ #j) ⇒ ⊥) ∧
    (∀ #j. (NDEV_DIS_AUTHVALUE( r2 ) @ #j) ⇒ ⊥) ∧
    (∀ #j. (NDEV_NOO_AUTHVALUE( r2 ) @ #j) ⇒ ⊥) ∧
    (∀ #j. (NDEV_STA_AUTHVALUE( r2 ) @ #j) ⇒ ⊥) ∧
    (∀ #j. (USER_ABNORM( r2 ) @ #j) ⇒ ⊥)) ∨
  (∃ ndev linkid #i.
    (NDEV_ASKFORINPUT( ndev, linkid ) @ #i)
   ∧
    (((∀ #j. (USER_INPUT( ndev ) @ #j) ⇒ ⊥) ∧
      (∀ m #l. (USER_ABNORM( m ) @ #l) ⇒ ⊥)) ∨
     (∀ #k. (!KU( linkid ) @ #k) ⇒ ¬(#k < #i)))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ r1 #i.
           (PROV_GET_AUTHVALUE( r1 ) @ #i)
          ∧
           (∀ #j. (PROV_DIS_AUTHVALUE( r1 ) @ #j) ⇒ ⊥) ∧
           (∀ #j. (NDEV_DIS_AUTHVALUE( r1 ) @ #j) ⇒ ⊥) ∧
           (∀ #j. (PROV_NOO_AUTHVALUE( r1 ) @ #j) ⇒ ⊥) ∧
           (∀ #j. (PROV_STA_AUTHVALUE( r1 ) @ #j) ⇒ ⊥) ∧
           (∀ #j. (USER_ABNORM( r1 ) @ #j) ⇒ ⊥))  ∥
         (∃ r2 #i.
           (NDEV_GET_AUTHVALUE( r2 ) @ #i)
          ∧
           (∀ #j. (PROV_DIS_AUTHVALUE( r2 ) @ #j) ⇒ ⊥) ∧
           (∀ #j. (NDEV_DIS_AUTHVALUE( r2 ) @ #j) ⇒ ⊥) ∧
           (∀ #j. (NDEV_NOO_AUTHVALUE( r2 ) @ #j) ⇒ ⊥) ∧
           (∀ #j. (NDEV_STA_AUTHVALUE( r2 ) @ #j) ⇒ ⊥) ∧
           (∀ #j. (USER_ABNORM( r2 ) @ #j) ⇒ ⊥))  ∥
         (∃ ndev linkid #i.
           (NDEV_ASKFORINPUT( ndev, linkid ) @ #i)
          ∧
           (((∀ #j. (USER_INPUT( ndev ) @ #j) ⇒ ⊥) ∧
             (∀ m #l. (USER_ABNORM( m ) @ #l) ⇒ ⊥)) ∨
            (∀ #k. (!KU( linkid ) @ #k) ⇒ ¬(#k < #i)))) )
    case case_1
    solve( ((∀ r1 #i.
              (PROV_GET_AUTHVALUE( r1 ) @ #i)
             ⇒
              ((last(#i)) ∨
               (∃ #j. (PROV_DIS_AUTHVALUE( r1 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (NDEV_DIS_AUTHVALUE( r1 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (PROV_NOO_AUTHVALUE( r1 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (PROV_STA_AUTHVALUE( r1 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (USER_ABNORM( r1 ) @ #j) ∧ ¬(last(#j))))) ∧
            (∀ r2 #i.
              (NDEV_GET_AUTHVALUE( r2 ) @ #i)
             ⇒
              ((last(#i)) ∨
               (∃ #j. (PROV_DIS_AUTHVALUE( r2 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (NDEV_DIS_AUTHVALUE( r2 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (NDEV_NOO_AUTHVALUE( r2 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (NDEV_STA_AUTHVALUE( r2 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (USER_ABNORM( r2 ) @ #j) ∧ ¬(last(#j))))) ∧
            (∀ ndev linkid #i.
              (NDEV_ASKFORINPUT( ndev, linkid ) @ #i)
             ⇒
              ((last(#i)) ∨
               ((((∃ #j. (USER_INPUT( ndev ) @ #j) ∧ ¬(last(#j))) ∨
                  (∃ m #l. (USER_ABNORM( m ) @ #l) ∧ ¬(last(#l))))) ∧
                (∃ #k. (!KU( linkid ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #i))))))  ∥
           (∃ C M K #i.
             (Check( C, M, K ) @ #i)
            ∧
             (¬(last(#i))) ∧
             (¬(C = cmac(M, K))) ∧
             (∀ mk mo. ((mk+mo) = M) ∧ (mk = rm(C, mo, K)) ⇒ ∃ x y. ((x+y) = mk)) ∧
             (((∃ x y. ((x+y) = M)) ∨ (¬(M = rm1(C, K)))))) )
      case case_1
      solve( (last(#i))  ∥
             (∃ #j. (PROV_DIS_AUTHVALUE( r1 ) @ #j) ∧ ¬(last(#j)))  ∥
             (∃ #j. (NDEV_DIS_AUTHVALUE( r1 ) @ #j) ∧ ¬(last(#j)))  ∥
             (∃ #j. (PROV_NOO_AUTHVALUE( r1 ) @ #j) ∧ ¬(last(#j)))  ∥
             (∃ #j. (PROV_STA_AUTHVALUE( r1 ) @ #j) ∧ ¬(last(#j)))  ∥
             (∃ #j. (USER_ABNORM( r1 ) @ #j) ∧ ¬(last(#j))) )
        case case_1
        solve( ProvReadyForConfirm( Prov, NetKey, ReadOOBPK, ReadStaticOOB,
                                    SecureOption, NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, r1,
                                    PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P,
                                    skP, DHpkP, DHpkD, ECDHSecret
               ) ▶₁ #i )
          case Prov_GetAuthValue_OutputOOB_case_1
          solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User, 'Input'
                 ) ▶₂ #vr.5 )
            case Receive_UserDevice_case_1
            solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User, r1 ) ▶₃ #vr.5 )
              case Receive_UserDevice
              by contradiction /* from formulas */
            qed
          next
            case Receive_UserDevice_case_2
            by solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User, r1
                      ) ▶₃ #vr.5 )
          qed
        next
          case Prov_GetAuthValue_OutputOOB_case_2
          by contradiction /* from formulas */
        next
          case Prov_ReadyForConfirm_InputOOB
          by contradiction /* from formulas */
        qed
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        by contradiction /* from formulas */
      next
        case case_4
        by contradiction /* from formulas */
      next
        case case_5
        by contradiction /* from formulas */
      next
        case case_6
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (∃ x y. ((x+y) = M))  ∥ (¬(M = rm1(C, K))) )
        case case_1
        solve( (C = cmac((x+y), K))  ∥
               (∃ mk mo.
                 ((mk+mo) = (x+y)) ∧ (mk = rm(C, mo, K))
                ∧
                 ∀ x.1 y.1. ((x.1+y.1) = mk) ⇒ ⊥) )
          case case_1
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( (C = cmac(M, K))  ∥
               (∃ mk mo.
                 ((mk+mo) = M) ∧ (mk = rm(C, mo, K)) ∧ ∀ x y. ((x+y) = mk) ⇒ ⊥)  ∥
               ((∀ x y. ((x+y) = M) ⇒ ⊥) ∧ (M = rm1(C, K))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case case_2
    solve( ((∀ r1 #i.
              (PROV_GET_AUTHVALUE( r1 ) @ #i)
             ⇒
              ((last(#i)) ∨
               (∃ #j. (PROV_DIS_AUTHVALUE( r1 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (NDEV_DIS_AUTHVALUE( r1 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (PROV_NOO_AUTHVALUE( r1 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (PROV_STA_AUTHVALUE( r1 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (USER_ABNORM( r1 ) @ #j) ∧ ¬(last(#j))))) ∧
            (∀ r2 #i.
              (NDEV_GET_AUTHVALUE( r2 ) @ #i)
             ⇒
              ((last(#i)) ∨
               (∃ #j. (PROV_DIS_AUTHVALUE( r2 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (NDEV_DIS_AUTHVALUE( r2 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (NDEV_NOO_AUTHVALUE( r2 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (NDEV_STA_AUTHVALUE( r2 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (USER_ABNORM( r2 ) @ #j) ∧ ¬(last(#j))))) ∧
            (∀ ndev linkid #i.
              (NDEV_ASKFORINPUT( ndev, linkid ) @ #i)
             ⇒
              ((last(#i)) ∨
               ((((∃ #j. (USER_INPUT( ndev ) @ #j) ∧ ¬(last(#j))) ∨
                  (∃ m #l. (USER_ABNORM( m ) @ #l) ∧ ¬(last(#l))))) ∧
                (∃ #k. (!KU( linkid ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #i))))))  ∥
           (∃ C M K #i.
             (Check( C, M, K ) @ #i)
            ∧
             (¬(last(#i))) ∧
             (¬(C = cmac(M, K))) ∧
             (∀ mk mo. ((mk+mo) = M) ∧ (mk = rm(C, mo, K)) ⇒ ∃ x y. ((x+y) = mk)) ∧
             (((∃ x y. ((x+y) = M)) ∨ (¬(M = rm1(C, K)))))) )
      case case_1
      solve( (last(#i))  ∥
             (∃ #j. (PROV_DIS_AUTHVALUE( r2 ) @ #j) ∧ ¬(last(#j)))  ∥
             (∃ #j. (NDEV_DIS_AUTHVALUE( r2 ) @ #j) ∧ ¬(last(#j)))  ∥
             (∃ #j. (NDEV_NOO_AUTHVALUE( r2 ) @ #j) ∧ ¬(last(#j)))  ∥
             (∃ #j. (NDEV_STA_AUTHVALUE( r2 ) @ #j) ∧ ¬(last(#j)))  ∥
             (∃ #j. (USER_ABNORM( r2 ) @ #j) ∧ ¬(last(#j))) )
        case case_1
        solve( NDevWaitConfirm( NDev, DeviceUUID, PKType_D, OutputOOB_D,
                                InputOOB_D, StaticOOB_D, skD, DHpkD, OOBPKURI, r2, AuthValueURI, LinkID,
                                PKType_P, AuthMethod_P, DHpkP, ECDHSecret
               ) ▶₂ #i )
          case NDev_DisplayAuthValue_OutputOOB
          by contradiction /* from formulas */
        next
          case NDev_GetAuthValue_InputOOB_case_1
          by solve( (∃ #j. (USER_INPUT( $P ) @ #j) ∧ ¬(last(#j)))  ∥
                    (∃ m #l. (USER_ABNORM( m ) @ #l) ∧ ¬(last(#l))) )
        next
          case NDev_GetAuthValue_InputOOB_case_2
          solve( (∃ #j. (USER_INPUT( $D ) @ #j) ∧ ¬(last(#j)))  ∥
                 (∃ m #l. (USER_ABNORM( m ) @ #l) ∧ ¬(last(#l))) )
            case case_1
            solve( In_UD( <'Display', 'Device', 'User'>, $P, $User, r2 ) ▶₂ #vr.5 )
              case Receive_UserDevice
              by contradiction /* from formulas */
            qed
          qed
        next
          case NDev_GetAuthValue_InputOOB_case_3
          by contradiction /* from formulas */
        next
          case NDev_GetAuthValue_InputOOB_case_4
          by contradiction /* from formulas */
        qed
      next
        case case_2
        by contradiction /* from formulas */
      next
        case case_3
        by contradiction /* from formulas */
      next
        case case_4
        by contradiction /* from formulas */
      next
        case case_5
        by contradiction /* from formulas */
      next
        case case_6
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (∃ x y. ((x+y) = M))  ∥ (¬(M = rm1(C, K))) )
        case case_1
        solve( (C = cmac((x+y), K))  ∥
               (∃ mk mo.
                 ((mk+mo) = (x+y)) ∧ (mk = rm(C, mo, K))
                ∧
                 ∀ x.1 y.1. ((x.1+y.1) = mk) ⇒ ⊥) )
          case case_1
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( (C = cmac(M, K))  ∥
               (∃ mk mo.
                 ((mk+mo) = M) ∧ (mk = rm(C, mo, K)) ∧ ∀ x y. ((x+y) = mk) ⇒ ⊥)  ∥
               ((∀ x y. ((x+y) = M) ⇒ ⊥) ∧ (M = rm1(C, K))) )
          case case_1
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case case_3
    solve( ((∀ r1 #i.
              (PROV_GET_AUTHVALUE( r1 ) @ #i)
             ⇒
              ((last(#i)) ∨
               (∃ #j. (PROV_DIS_AUTHVALUE( r1 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (NDEV_DIS_AUTHVALUE( r1 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (PROV_NOO_AUTHVALUE( r1 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (PROV_STA_AUTHVALUE( r1 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (USER_ABNORM( r1 ) @ #j) ∧ ¬(last(#j))))) ∧
            (∀ r2 #i.
              (NDEV_GET_AUTHVALUE( r2 ) @ #i)
             ⇒
              ((last(#i)) ∨
               (∃ #j. (PROV_DIS_AUTHVALUE( r2 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (NDEV_DIS_AUTHVALUE( r2 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (NDEV_NOO_AUTHVALUE( r2 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (NDEV_STA_AUTHVALUE( r2 ) @ #j) ∧ ¬(last(#j))) ∨
               (∃ #j. (USER_ABNORM( r2 ) @ #j) ∧ ¬(last(#j))))) ∧
            (∀ ndev linkid #i.
              (NDEV_ASKFORINPUT( ndev, linkid ) @ #i)
             ⇒
              ((last(#i)) ∨
               ((((∃ #j. (USER_INPUT( ndev ) @ #j) ∧ ¬(last(#j))) ∨
                  (∃ m #l. (USER_ABNORM( m ) @ #l) ∧ ¬(last(#l))))) ∧
                (∃ #k. (!KU( linkid ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #i))))))  ∥
           (∃ C M K #i.
             (Check( C, M, K ) @ #i)
            ∧
             (¬(last(#i))) ∧
             (¬(C = cmac(M, K))) ∧
             (∀ mk mo. ((mk+mo) = M) ∧ (mk = rm(C, mo, K)) ⇒ ∃ x y. ((x+y) = mk)) ∧
             (((∃ x y. ((x+y) = M)) ∨ (¬(M = rm1(C, K)))))) )
      case case_1
      solve( ((∀ #j. (USER_INPUT( ndev ) @ #j) ⇒ ⊥) ∧
              (∀ m #l. (USER_ABNORM( m ) @ #l) ⇒ ⊥))  ∥
             (∀ #k. (!KU( linkid ) @ #k) ⇒ ¬(#k < #i)) )
        case case_1
        solve( (last(#i))  ∥
               ((((∃ #j. (USER_INPUT( ndev ) @ #j) ∧ ¬(last(#j))) ∨
                  (∃ m #l. (USER_ABNORM( m ) @ #l) ∧ ¬(last(#l))))) ∧
                (∃ #k. (!KU( linkid ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #i))) )
          case case_1
          solve( In_UD( <'Input', 'User', 'Device'>, $User, ndev, random ) ▶₀ #i )
            case Receive_UserDevice_case_1
            solve( NDevAskForInput( $P, DeviceUUID, PKType_D, OutputOOB_D,
                                    InputOOB_D, StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_NULL,
                                    AuthValueURI_NULL, linkid, PKType_P, AuthMethod_P, DHpkP, ECDHSecret
                   ) ▶₁ #i )
              case NDev_AskForInput_InputOOB
              solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User, 'Input'
                     ) ▶₂ #vr.2 )
                case Receive_UserDevice_case_1
                by solve( In_UD( <'Display', 'Device', 'User'>, D2, $User, random
                          ) ▶₃ #vr.2 )
              next
                case Receive_UserDevice_case_2
                solve( In_UD( <'Display', 'Device', 'User'>, D2, $User, random
                       ) ▶₃ #vr.2 )
                  case Receive_UserDevice
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case Receive_UserDevice_case_2
            by contradiction /* from formulas */
          next
            case Receive_UserDevice_case_3
            by contradiction /* from formulas */
          next
            case Receive_UserDevice_case_4
            by contradiction /* from formulas */
          qed
        next
          case case_2
          solve( (∃ #j. (USER_INPUT( ndev ) @ #j) ∧ ¬(last(#j)))  ∥
                 (∃ m #l. (USER_ABNORM( m ) @ #l) ∧ ¬(last(#l))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_2
        solve( (last(#i))  ∥
               ((((∃ #j. (USER_INPUT( ndev ) @ #j) ∧ ¬(last(#j))) ∨
                  (∃ m #l. (USER_ABNORM( m ) @ #l) ∧ ¬(last(#l))))) ∧
                (∃ #k. (!KU( linkid ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #i))) )
          case case_1
          solve( In_UD( <'Input', 'User', 'Device'>, $User, ndev, random ) ▶₀ #i )
            case Receive_UserDevice_case_1
            solve( NDevAskForInput( $P, DeviceUUID, PKType_D, OutputOOB_D,
                                    InputOOB_D, StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_NULL,
                                    AuthValueURI_NULL, linkid, PKType_P, AuthMethod_P, DHpkP, ECDHSecret
                   ) ▶₁ #i )
              case NDev_AskForInput_InputOOB
              by contradiction /* from formulas */
            qed
          next
            case Receive_UserDevice_case_2
            solve( NDevAskForInput( ndev, DeviceUUID, PKType_D, OutputOOB_D,
                                    InputOOB_D, StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_NULL,
                                    AuthValueURI_NULL, linkid, PKType_P, AuthMethod_P, DHpkP, ECDHSecret
                   ) ▶₁ #i )
              case NDev_AskForInput_InputOOB
              by contradiction /* from formulas */
            qed
          next
            case Receive_UserDevice_case_3
            solve( NDevAskForInput( $P, DeviceUUID, PKType_D, OutputOOB_D,
                                    InputOOB_D, StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_NULL,
                                    AuthValueURI_NULL, linkid, PKType_P, AuthMethod_P, DHpkP, ECDHSecret
                   ) ▶₁ #i )
              case NDev_AskForInput_InputOOB
              by contradiction /* from formulas */
            qed
          next
            case Receive_UserDevice_case_4
            solve( NDevAskForInput( ndev, DeviceUUID, PKType_D, OutputOOB_D,
                                    InputOOB_D, StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_NULL,
                                    AuthValueURI_NULL, linkid, PKType_P, AuthMethod_P, DHpkP, ECDHSecret
                   ) ▶₁ #i )
              case NDev_AskForInput_InputOOB
              by contradiction /* from formulas */
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      solve( ((∀ #j. (USER_INPUT( ndev ) @ #j) ⇒ ⊥) ∧
              (∀ m #l. (USER_ABNORM( m ) @ #l) ⇒ ⊥))  ∥
             (∀ #k. (!KU( linkid ) @ #k) ⇒ ¬(#k < #i)) )
        case case_1
        solve( (∃ x y. ((x+y) = M))  ∥ (¬(M = rm1(C, K))) )
          case case_1
          solve( (C = cmac((x+y), K))  ∥
                 (∃ mk mo.
                   ((mk+mo) = (x+y)) ∧ (mk = rm(C, mo, K))
                  ∧
                   ∀ x.1 y.1. ((x.1+y.1) = mk) ⇒ ⊥) )
            case case_1
            by contradiction /* from formulas */
          qed
        next
          case case_2
          solve( (C = cmac(M, K))  ∥
                 (∃ mk mo.
                   ((mk+mo) = M) ∧ (mk = rm(C, mo, K)) ∧ ∀ x y. ((x+y) = mk) ⇒ ⊥)  ∥
                 ((∀ x y. ((x+y) = M) ⇒ ⊥) ∧ (M = rm1(C, K))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case case_2
        solve( (∃ x y. ((x+y) = M))  ∥ (¬(M = rm1(C, K))) )
          case case_1
          solve( (C = cmac((x+y), K))  ∥
                 (∃ mk mo.
                   ((mk+mo) = (x+y)) ∧ (mk = rm(C, mo, K))
                  ∧
                   ∀ x.1 y.1. ((x.1+y.1) = mk) ⇒ ⊥) )
            case case_1
            by contradiction /* from formulas */
          qed
        next
          case case_2
          solve( (C = cmac(M, K))  ∥
                 (∃ mk mo.
                   ((mk+mo) = M) ∧ (mk = rm(C, mo, K)) ∧ ∀ x y. ((x+y) = mk) ⇒ ⊥)  ∥
                 ((∀ x y. ((x+y) = M) ⇒ ⊥) ∧ (M = rm1(C, K))) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma executability:
  exists-trace
  "∃ #i #j.
    (((((((((((FinishedP( ) @ #i) ∧ (FinishedD( ) @ #j)) ∧
             (∀ #m.
               (InitP_ReadOOBPK( '0' ) @ #m) ⇒
               (∃ #p #q. (ProvInBandPK( ) @ #p) ∧ (NDevInBandPK( ) @ #q)))) ∧
            (∀ #m #n.
              ((InitP_ReadOOBPK( '1' ) @ #m) ∧ (InitD_PKType( 'InBand' ) @ #n)) ⇒
              (∃ #p #q. (ProvInBandPK( ) @ #p) ∧ (NDevInBandPK( ) @ #q)))) ∧
           (∀ #m #n.
             ((InitP_ReadOOBPK( '1' ) @ #m) ∧ (InitD_PKType( 'OOB' ) @ #n)) ⇒
             (∃ #p #q. (ProvOOBPK( ) @ #p) ∧ (NDevOOBPK( ) @ #q)))) ∧
          (∀ #m #n.
            ((InitP_ReadStaticOOB( '0' ) @ #m) ∧ (InitD_OutputOOB( '1' ) @ #n)) ⇒
            (∃ #p #q. (ProvOutputOOB( ) @ #p) ∧ (NDevOutputOOB( ) @ #q)))) ∧
         (∀ #l #m #n.
           (((InitP_ReadStaticOOB( '1' ) @ #l) ∧ (InitD_OutputOOB( '1' ) @ #m)) ∧
            (InitD_StaticOOB( '0' ) @ #n)) ⇒
           (∃ #p #q. (ProvOutputOOB( ) @ #p) ∧ (NDevOutputOOB( ) @ #q)))) ∧
        (∀ #l #m #n.
          (((InitP_ReadStaticOOB( '0' ) @ #l) ∧ (InitD_OutputOOB( '0' ) @ #m)) ∧
           (InitD_InputOOB( '1' ) @ #n)) ⇒
          (∃ #p #q. (ProvInputOOB( ) @ #p) ∧ (NDevInputOOB( ) @ #q)))) ∧
       (∀ #k #l #m #n.
         ((((InitP_ReadStaticOOB( '1' ) @ #k) ∧ (InitD_OutputOOB( '0' ) @ #l)) ∧
           (InitD_InputOOB( '1' ) @ #m)) ∧
          (InitD_StaticOOB( '0' ) @ #n)) ⇒
         (∃ #p #q. (ProvInputOOB( ) @ #p) ∧ (NDevInputOOB( ) @ #q)))) ∧
      (∀ #m #n.
        ((InitP_ReadStaticOOB( '1' ) @ #m) ∧ (InitD_StaticOOB( '1' ) @ #n)) ⇒
        (∃ #p #q. (ProvStaticOOB( ) @ #p) ∧ (NDevStaticOOB( ) @ #q)))) ∧
     (∀ #l #m #n.
       (((InitP_ReadStaticOOB( '0' ) @ #l) ∧ (InitD_OutputOOB( '0' ) @ #m)) ∧
        (InitD_InputOOB( '0' ) @ #n)) ⇒
       (∃ #p #q. (ProvNoOOB( ) @ #p) ∧ (NDevNoOOB( ) @ #q)))) ∧
    (∀ #k #l #m #n.
      ((((InitP_ReadStaticOOB( '1' ) @ #k) ∧ (InitD_OutputOOB( '0' ) @ #l)) ∧
        (InitD_InputOOB( '0' ) @ #m)) ∧
       (InitD_StaticOOB( '0' ) @ #n)) ⇒
      (∃ #p #q. (ProvNoOOB( ) @ #p) ∧ (NDevNoOOB( ) @ #q)))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j.
  (FinishedP( ) @ #i) ∧ (FinishedD( ) @ #j)
 ∧
  (∀ #m.
    (InitP_ReadOOBPK( '0' ) @ #m)
   ⇒
    ∃ #p #q. (ProvInBandPK( ) @ #p) ∧ (NDevInBandPK( ) @ #q)) ∧
  (∀ #m #n.
    (InitP_ReadOOBPK( '1' ) @ #m) ∧ (InitD_PKType( 'InBand' ) @ #n)
   ⇒
    ∃ #p #q. (ProvInBandPK( ) @ #p) ∧ (NDevInBandPK( ) @ #q)) ∧
  (∀ #m #n.
    (InitP_ReadOOBPK( '1' ) @ #m) ∧ (InitD_PKType( 'OOB' ) @ #n)
   ⇒
    ∃ #p #q. (ProvOOBPK( ) @ #p) ∧ (NDevOOBPK( ) @ #q)) ∧
  (∀ #m #n.
    (InitP_ReadStaticOOB( '0' ) @ #m) ∧ (InitD_OutputOOB( '1' ) @ #n)
   ⇒
    ∃ #p #q. (ProvOutputOOB( ) @ #p) ∧ (NDevOutputOOB( ) @ #q)) ∧
  (∀ #l #m #n.
    (InitP_ReadStaticOOB( '1' ) @ #l) ∧
    (InitD_OutputOOB( '1' ) @ #m) ∧
    (InitD_StaticOOB( '0' ) @ #n)
   ⇒
    ∃ #p #q. (ProvOutputOOB( ) @ #p) ∧ (NDevOutputOOB( ) @ #q)) ∧
  (∀ #l #m #n.
    (InitP_ReadStaticOOB( '0' ) @ #l) ∧
    (InitD_OutputOOB( '0' ) @ #m) ∧
    (InitD_InputOOB( '1' ) @ #n)
   ⇒
    ∃ #p #q. (ProvInputOOB( ) @ #p) ∧ (NDevInputOOB( ) @ #q)) ∧
  (∀ #k #l #m #n.
    (InitP_ReadStaticOOB( '1' ) @ #k) ∧
    (InitD_OutputOOB( '0' ) @ #l) ∧
    (InitD_InputOOB( '1' ) @ #m) ∧
    (InitD_StaticOOB( '0' ) @ #n)
   ⇒
    ∃ #p #q. (ProvInputOOB( ) @ #p) ∧ (NDevInputOOB( ) @ #q)) ∧
  (∀ #m #n.
    (InitP_ReadStaticOOB( '1' ) @ #m) ∧ (InitD_StaticOOB( '1' ) @ #n)
   ⇒
    ∃ #p #q. (ProvStaticOOB( ) @ #p) ∧ (NDevStaticOOB( ) @ #q)) ∧
  (∀ #l #m #n.
    (InitP_ReadStaticOOB( '0' ) @ #l) ∧
    (InitD_OutputOOB( '0' ) @ #m) ∧
    (InitD_InputOOB( '0' ) @ #n)
   ⇒
    ∃ #p #q. (ProvNoOOB( ) @ #p) ∧ (NDevNoOOB( ) @ #q)) ∧
  (∀ #k #l #m #n.
    (InitP_ReadStaticOOB( '1' ) @ #k) ∧
    (InitD_OutputOOB( '0' ) @ #l) ∧
    (InitD_InputOOB( '0' ) @ #m) ∧
    (InitD_StaticOOB( '0' ) @ #n)
   ⇒
    ∃ #p #q. (ProvNoOOB( ) @ #p) ∧ (NDevNoOOB( ) @ #q))"
*/
simplify
solve( ProvDistributed( Prov, NetKey, ReadOOBPK, ReadStaticOOB,
                        SecureOption, NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI,
                        AuthValue_In, AuthValue_1, AuthValue_2, PKType_D, OutputOOB_D,
                        InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P, skP, DHpkP, DHpkD,
                        ECDHSecret, Np_1, ConfirmSALT, ECDH1, ECDH2, CK, Cp_1, Cd_1, Nd_1, Np_2,
                        Cp_2, Cd_2, Nd_2, ProvisioningSALT, SessionKey, ProvData, DevKey
       ) ▶₁ #i )
  case Prov_Distribute_case_1
  solve( (Cd_1 =
          cmac((<z, '2'>+
                <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
               ),
               Nd_1))  ∥
         (∃ mk mo.
           ((mk+mo) =
            (<z, '2'>+
             <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
            )) ∧
           (mk = rm(Cd_1, mo, Nd_1))
          ∧
           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
    case case_1
    solve( (Cd_2 =
            cmac((<z.1, '2'>+
                  <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
                 ),
                 Nd_2))  ∥
           (∃ mk mo.
             ((mk+mo) =
              (<z.1, '2'>+
               <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
              )) ∧
             (mk = rm(Cd_2, mo, Nd_2))
            ∧
             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
      case case_1
      solve( NDevSentNonce_2( NDev.1, DeviceUUID.1, PKType_D.1, OutputOOB_D,
                              InputOOB_D.1, StaticOOB_D.1, skD, DHpkD.1, OOBPKURI.1, AuthValue_In.1,
                              AuthValue_1, AuthValue_2, AuthValueURI, LinkID.1, PKType_P, AuthMethod_P,
                              DHpkP, ECDHSecret.1, Cp_1, Nd_1.1, ConfirmSALT, ECDH1, ECDH2, CK, Cd_1,
                              Np_1, Cp_2, Nd_2.1, Cd_2, Np_2, ProvisioningSALT, SessionKey
             ) ▶₁ #j )
        case NDev_SendNonce_2
        solve( (Cp_1 =
                cmac((
                      <cmac('prck', cmac((<z.4, '1'>+<z.5, '2'>), s1(<DHpkP, 'g'^~sk.1>))), '1'
                      >+
                      <fst(~random), '2'>),
                     Np_1))  ∥
               (∃ mk mo.
                 ((mk+mo) =
                  (
                   <cmac('prck', cmac((<z.4, '1'>+<z.5, '2'>), s1(<DHpkP, 'g'^~sk.1>))), '1'
                   >+
                   <fst(~random), '2'>)) ∧
                 (mk = rm(Cp_1, mo, Np_1))
                ∧
                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
          case case_1
          solve( (Cp_2 =
                  cmac((
                        <cmac('prck', cmac((<z.4, '1'>+<z.5, '2'>), s1(<DHpkP, 'g'^~sk.1>))), '1'
                        >+
                        <snd(~random), '2'>),
                       Np_2))  ∥
                 (∃ mk mo.
                   ((mk+mo) =
                    (
                     <cmac('prck', cmac((<z.4, '1'>+<z.5, '2'>), s1(<DHpkP, 'g'^~sk.1>))), '1'
                     >+
                     <snd(~random), '2'>)) ∧
                   (mk = rm(Cp_2, mo, Np_2))
                  ∧
                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
            case case_1
            solve( ProvSentStart( Prov, NetKey.2, ReadOOBPK, ReadStaticOOB,
                                  SecureOption, NDev.1, DeviceUUID.2, LinkID.2, OOBPKURI.1, AuthValueURI,
                                  AuthValue, PKType_D.1, OutputOOB_D, InputOOB_D.1, StaticOOB_D.1,
                                  'InBand', AuthMethod_P
                   ) ▶₁ #p )
              case Prov_SendStart
              solve( NDevReceivedStart( NDev.1, DeviceUUID.2, PKType_D.1, OutputOOB_D,
                                        InputOOB_D.1, StaticOOB_D.1, skD_NULL, DHpkD_NULL, OOBPKURI_NULL,
                                        AuthValue, AuthValueURI, LinkID.2, 'InBand', AuthMethod_P
                     ) ▶₂ #q )
                case NDev_ReceiveStart
                solve( ProvCalculatedECDH( Prov, NetKey.2, ReadOOBPK, ReadStaticOOB,
                                           SecureOption, NDev.1, DeviceUUID.2, LinkID.2, OOBPKURI.1,
                                           AuthValueURI, AuthValue, PKType_D.1, OutputOOB_D, InputOOB_D.1,
                                           StaticOOB_D.1, PKType_P, 'OutputOOB', skP, DHpkP.1, DHpkD.1,
                                           ECDHSecret.2
                       ) ▶₀ #p.1 )
                  case Prov_CalculateECDH
                  solve( NDevCalculatedECDH( NDev.1, DeviceUUID.2, PKType_D.1, OutputOOB_D,
                                             InputOOB_D.1, StaticOOB_D.1, skD, DHpkD.1, OOBPKURI.1,
                                             AuthValue_NULL, AuthValueURI_NULL, LinkID.2, PKType_P,
                                             'OutputOOB', DHpkP.1, ECDHSecret.2
                         ) ▶₁ #q.1 )
                    case NDev_CalculateECDH
                    solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.2, 'Input'
                           ) ▶₂ #vr.10 )
                      case Receive_UserDevice
                      solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User, AuthValue_In
                             ) ▶₃ #vr.10 )
                        case Receive_UserDevice
                        solve( splitEqs(3) )
                          case split_case_1
                          solve( splitEqs(8) )
                            case split_case_2
                            solve( !KU( senc(NetKey.1,
                                             cmac('prsk',
                                                  cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                       s1(<s1(<DHpkP, 'g'^~sk.1>), Np_2, ~Nd>))))
                                   ) @ #vk.20 )
                              case Prov_Distribute
                              solve( !KU( cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Nd_1)
                                     ) @ #vk.24 )
                                case NDev_Confirmation_1
                                solve( !KU( cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <fst(~random), '2'>),
                                                 Np_1)
                                       ) @ #vk.45 )
                                  case Prov_Confirmation_1
                                  solve( !KU( ~LinkID ) @ #vk.6 )
                                    case Prov_LinkOpen
                                    solve( !KU( ~DeviceUUID.1 ) @ #vk.52 )
                                      case NDev_Beaconing
                                      solve( !KU( ~Nd.1 ) @ #vk.24 )
                                        case NDev_SendNonce_2
                                        solve( !KU( ~Np.1 ) @ #vk.45 )
                                          case Prov_SendNonce_2
                                          solve( !KU( ~Nd ) @ #vk.28 )
                                            case NDev_SendNonce_1
                                            solve( !KU( ~Np ) @ #vk.47 )
                                              case Prov_SendNonce_1
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                                 '1'>+
                                                                <snd(~random), '2'>),
                                                               ~Nd.1)
                                                     ) @ #vk.29 )
                                                case NDev_Confirmation_2
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <snd(~random), '2'>),
                                                                 ~Np.1)
                                                       ) @ #vk.47 )
                                                  case Prov_Confirmation_2
                                                  solve( !KU( 'g'^~sk.1 ) @ #vk.31 )
                                                    case NDev_SendPK_InBand
                                                    solve( !KU( 'g'^~sk ) @ #vk.47 )
                                                      case Prov_SendPK_InBand
                                                      SOLVED // trace found
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma Noninj_Agreement_NDev:
  all-traces
  "∀ ndev m #i.
    (Commit_NDev( ndev, m ) @ #i) ⇒
    (∃ prov #j. Running_Prov( prov, ndev, m ) @ #j)"
/*
guarded formula characterizing all counter-examples:
"∃ ndev m #i.
  (Commit_NDev( ndev, m ) @ #i)
 ∧
  ∀ prov #j. (Running_Prov( prov, ndev, m ) @ #j) ⇒ ⊥"
*/
simplify
solve( NDevSentNonce_2( ndev, DeviceUUID, PKType_D, OutputOOB_D,
                        InputOOB_D, StaticOOB_D, skD, DHpkD, OOBPKURI, AuthValue_In, AuthValue_1,
                        AuthValue_2, AuthValueURI, LinkID, PKType_P, AuthMethod_P, DHpkP,
                        ECDHSecret, Cp_1, Nd_1, ConfirmSALT, ECDH1, ECDH2, CK, Cd_1, Np_1, Cp_2,
                        Nd_2, Cd_2, Np_2, ProvisioningSALT, SessionKey
       ) ▶₁ #i )
  case NDev_SendNonce_2_case_1
  solve( (Cp_1 =
          cmac((
                <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>+
                <fst(~random), '2'>),
               Np_1))  ∥
         (∃ mk mo.
           ((mk+mo) =
            (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>+
             <fst(~random), '2'>)) ∧
           (mk = rm(Cp_1, mo, Np_1))
          ∧
           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
    case case_1
    solve( (Cp_2 =
            cmac((
                  <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>+
                  <snd(~random), '2'>),
                 Np_2))  ∥
           (∃ mk mo.
             ((mk+mo) =
              (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>+
               <snd(~random), '2'>)) ∧
             (mk = rm(Cp_2, mo, Np_2))
            ∧
             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
      case case_1
      solve( splitEqs(2) )
        case split_case_1
        solve( !KU( senc(NetKey,
                         cmac('prsk',
                              cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                   s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))))
               ) @ #vk.10 )
          case Prov_Distribute_case_1
          solve( (Cd_1 =
                  cmac((<z, '2'>+
                        <
                         cmac('prck',
                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                   s1(<'g'^~sk.1, 'g'^~sk>))), 
                         '1'>
                       ),
                       Nd_1))  ∥
                 (∃ mk mo.
                   ((mk+mo) =
                    (<z, '2'>+
                     <
                      cmac('prck',
                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                s1(<'g'^~sk.1, 'g'^~sk>))), 
                      '1'>
                    )) ∧
                   (mk = rm(Cd_1, mo, Nd_1))
                  ∧
                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
            case case_1
            solve( (Cd_2 =
                    cmac((<z.1, '2'>+
                          <
                           cmac('prck',
                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                     s1(<'g'^~sk.1, 'g'^~sk>))), 
                           '1'>
                         ),
                         ~Nd))  ∥
                   (∃ mk mo.
                     ((mk+mo) =
                      (<z.1, '2'>+
                       <
                        cmac('prck',
                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                  s1(<'g'^~sk.1, 'g'^~sk>))), 
                        '1'>
                      )) ∧
                     (mk = rm(Cd_2, mo, ~Nd))
                    ∧
                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
              case case_1
              solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                     ) ▶₂ #vr.25 )
                case Receive_UserDevice
                solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, AuthValue_In
                       ) ▶₃ #vr.25 )
                  case Receive_UserDevice
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                               s1(<'g'^~sk.1, 'g'^~sk>))), 
                                     '1'>+
                                    <fst(~random), '2'>),
                                   Np_1)
                         ) @ #vk.14 )
                    case NDev_Confirmation_1
                    by contradiction /* cyclic */
                  next
                    case Prov_Confirmation_1
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                 s1(<'g'^~sk.1, 'g'^~sk>))), 
                                       '1'>+
                                      <fst(~random), '2'>),
                                     Nd_1)
                           ) @ #vk.34 )
                      case NDev_Confirmation_1
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk.1, 'g'^~sk>)))
                             ) @ #vk.53 )
                        case NDev_Confirmation_1
                        by contradiction /* cyclic */
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np.1 ) @ #vk.57 )
                          case Prov_SendNonce_1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_cmac
                        solve( !KU( fst(~random) ) @ #vk.55 )
                          case NDev_Confirmation_1
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_1
                          solve( !KU( ~Np.1 ) @ #vk.59 )
                            case Prov_SendNonce_1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_fst
                          solve( !KU( ~random ) @ #vk.59 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( ~Np.1 ) @ #vk.60 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Prov_Confirmation_1
                      by contradiction /* from formulas */
                    next
                      case c_cmac
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk.1, 'g'^~sk>)))
                             ) @ #vk.53 )
                        case NDev_Confirmation_1
                        by contradiction /* cyclic */
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np.1 ) @ #vk.57 )
                          case Prov_SendNonce_1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_cmac
                        solve( !KU( fst(~random) ) @ #vk.55 )
                          case NDev_Confirmation_1
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_1
                          solve( !KU( ~Np.1 ) @ #vk.59 )
                            case Prov_SendNonce_1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_fst
                          solve( !KU( ~random ) @ #vk.59 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( ~Np.1 ) @ #vk.60 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Prov_Distribute_case_2
          solve( (Cd_1 =
                  cmac((
                        <
                         cmac('prck',
                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                   s1(<'g'^~sk.1, 'g'^~sk>))), 
                         '1'>+
                        <fst(~m), '2'>),
                       Nd_1))  ∥
                 (∃ mk mo.
                   ((mk+mo) =
                    (
                     <
                      cmac('prck',
                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                s1(<'g'^~sk.1, 'g'^~sk>))), 
                      '1'>+
                     <fst(~m), '2'>)) ∧
                   (mk = rm(Cd_1, mo, Nd_1))
                  ∧
                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
            case case_1
            solve( (Cd_2 =
                    cmac((
                          <
                           cmac('prck',
                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                     s1(<'g'^~sk.1, 'g'^~sk>))), 
                           '1'>+
                          <snd(~m), '2'>),
                         ~Nd))  ∥
                   (∃ mk mo.
                     ((mk+mo) =
                      (
                       <
                        cmac('prck',
                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                  s1(<'g'^~sk.1, 'g'^~sk>))), 
                        '1'>+
                       <snd(~m), '2'>)) ∧
                     (mk = rm(Cd_2, mo, ~Nd))
                    ∧
                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
              case case_1
              solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                     ) ▶₃ #vr.25 )
                case Receive_UserDevice
                by solve( In_UD( <'AskForInput', 'Device', 'User'>, NDev, $User.1,
                                 'Input'
                          ) ▶₄ #vr.25 )
              qed
            qed
          qed
        next
          case Prov_Distribute_case_3
          solve( (Cd_1 =
                  cmac((
                        <
                         cmac('prck',
                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                   s1(<'g'^~sk.1, 'g'^~sk>))), 
                         '1'>+
                        <fst(~random.1), '2'>),
                       Nd_1))  ∥
                 (∃ mk mo.
                   ((mk+mo) =
                    (
                     <
                      cmac('prck',
                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                s1(<'g'^~sk.1, 'g'^~sk>))), 
                      '1'>+
                     <fst(~random.1), '2'>)) ∧
                   (mk = rm(Cd_1, mo, Nd_1))
                  ∧
                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
            case case_1
            solve( (Cd_2 =
                    cmac((
                          <
                           cmac('prck',
                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                     s1(<'g'^~sk.1, 'g'^~sk>))), 
                           '1'>+
                          <snd(~random.1), '2'>),
                         ~Nd))  ∥
                   (∃ mk mo.
                     ((mk+mo) =
                      (
                       <
                        cmac('prck',
                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                  s1(<'g'^~sk.1, 'g'^~sk>))), 
                        '1'>+
                       <snd(~random.1), '2'>)) ∧
                     (mk = rm(Cd_2, mo, ~Nd))
                    ∧
                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
              case case_1
              solve( !KU( cmac((
                                <
                                 cmac('prck',
                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                           s1(<'g'^~sk.1, 'g'^~sk>))), 
                                 '1'>+
                                <fst(~random), '2'>),
                               Np_1)
                     ) @ #vk.14 )
                case NDev_Confirmation_1
                by contradiction /* cyclic */
              next
                case c_cmac
                solve( !KU( cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk.1, 'g'^~sk>))), 
                                   '1'>+
                                  <snd(~random), '2'>),
                                 ~Np)
                       ) @ #vk.13 )
                  case c_cmac
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                               s1(<'g'^~sk.1, 'g'^~sk>))), 
                                     '1'>+
                                    <fst(~random.1), '2'>),
                                   Nd_1)
                         ) @ #vk.35 )
                    case Prov_Confirmation_1
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                 s1(<'g'^~sk.1, 'g'^~sk>))), 
                                       '1'>+
                                      <snd(~random.1), '2'>),
                                     ~Nd)
                           ) @ #vk.34 )
                      case c_cmac
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk.1, 'g'^~sk>)))
                             ) @ #vk.58 )
                        case NDev_Confirmation_1
                        by contradiction /* cyclic */
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np.1 ) @ #vk.68 )
                          case Prov_SendNonce_1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_cmac
                        solve( !KU( fst(~random) ) @ #vk.60 )
                          case NDev_Confirmation_1
                          by contradiction /* cyclic */
                        next
                          case c_fst
                          solve( !KU( ~random ) @ #vk.70 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( cmac((
                            <
                             cmac('prck',
                                  cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                       s1(<DHpkP, 'g'^~sk>))), 
                             '1'>+
                            <fst(~random), '2'>),
                           Np_1)
                 ) @ #vk.14 )
            case NDev_Confirmation_1
            by contradiction /* cyclic */
          next
            case Prov_Confirmation_1
            solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                   ) ▶₂ #vr.20 )
              case Receive_UserDevice
              solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, AuthValue_In
                     ) ▶₃ #vr.20 )
                case Receive_UserDevice
                solve( !KU( ~Np ) @ #vk.14 )
                  case Prov_SendNonce_1
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                               s1(<'g'^~sk.1, 'g'^~sk>))), 
                                     '1'>+
                                    <snd(~random), '2'>),
                                   Np_2)
                         ) @ #vk.14 )
                    case NDev_Confirmation_2
                    by contradiction /* cyclic */
                  next
                    case Prov_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( cmac('prsk',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>)))
                           ) @ #vk.24 )
                      case c_cmac
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk.1, 'g'^~sk>)))
                             ) @ #vk.49 )
                        case NDev_Confirmation_1
                        solve( !KU( snd(~random) ) @ #vk.51 )
                          case NDev_Confirmation_2
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_2
                          solve( (Cd_1 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk.1, 'g'^~sk>))), 
                                         '1'>+
                                        <fst(~random), '2'>),
                                       Nd_1))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk.1, 'g'^~sk>))), 
                                      '1'>+
                                     <fst(~random), '2'>)) ∧
                                   (mk = rm(Cd_1, mo, Nd_1))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( ~Np.1 ) @ #vk.60 )
                              case Prov_SendNonce_2
                              solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                               ),
                                               s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>))
                                     ) @ #vk.58 )
                                case c_cmac
                                solve( !KU( s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.66 )
                                  case c_s1
                                  solve( !KU( s1(<'g'^~sk.1, 'g'^~sk>) ) @ #vk.71 )
                                    case c_s1
                                    solve( !KU( fst(~random) ) @ #vk.68 )
                                      case c_fst
                                      solve( !KU( ~random ) @ #vk.74 )
                                        case Prov_Confirmation_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_snd
                          solve( !KU( ~random ) @ #vk.58 )
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            solve( (Cd_1 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk.1, 'g'^~sk>))), 
                                           '1'>+
                                          <fst(~random), '2'>),
                                         Nd_1))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk.1, 'g'^~sk>))), 
                                        '1'>+
                                       <fst(~random), '2'>)) ∧
                                     (mk = rm(Cd_1, mo, Nd_1))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( ~Np.1 ) @ #vk.61 )
                                case Prov_SendNonce_2
                                solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                 ),
                                                 s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>))
                                       ) @ #vk.59 )
                                  case c_cmac
                                  solve( !KU( s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.67 )
                                    case c_s1
                                    solve( !KU( s1(<'g'^~sk.1, 'g'^~sk>) ) @ #vk.72 )
                                      case c_s1
                                      solve( !KU( fst(~random) ) @ #vk.69 )
                                        case c_fst
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case Prov_Confirmation_1
                        solve( !KU( snd(~random) ) @ #vk.51 )
                          case NDev_Confirmation_2
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_2
                          solve( (Cd_1 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk.1, 'g'^~sk>))), 
                                         '1'>+
                                        <fst(~random), '2'>),
                                       Nd_1))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk.1, 'g'^~sk>))), 
                                      '1'>+
                                     <fst(~random), '2'>)) ∧
                                   (mk = rm(Cd_1, mo, Nd_1))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( ~Np.1 ) @ #vk.59 )
                              case Prov_SendNonce_2
                              solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                               ),
                                               s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>))
                                     ) @ #vk.58 )
                                case c_cmac
                                solve( !KU( s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.65 )
                                  case c_s1
                                  solve( !KU( s1(<'g'^~sk.1, 'g'^~sk>) ) @ #vk.70 )
                                    case c_s1
                                    solve( !KU( fst(~random) ) @ #vk.67 )
                                      case c_fst
                                      solve( !KU( ~random ) @ #vk.73 )
                                        case Prov_Confirmation_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_snd
                          solve( !KU( ~random ) @ #vk.57 )
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            solve( (Cd_1 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk.1, 'g'^~sk>))), 
                                           '1'>+
                                          <fst(~random), '2'>),
                                         Nd_1))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk.1, 'g'^~sk>))), 
                                        '1'>+
                                       <fst(~random), '2'>)) ∧
                                     (mk = rm(Cd_1, mo, Nd_1))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( ~Np.1 ) @ #vk.60 )
                                case Prov_SendNonce_2
                                solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                 ),
                                                 s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>))
                                       ) @ #vk.59 )
                                  case c_cmac
                                  solve( !KU( s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.66 )
                                    case c_s1
                                    solve( !KU( s1(<'g'^~sk.1, 'g'^~sk>) ) @ #vk.71 )
                                      case c_s1
                                      solve( !KU( fst(~random) ) @ #vk.68 )
                                        case c_fst
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_cmac
                        solve( !KU( snd(~random) ) @ #vk.51 )
                          case NDev_Confirmation_2
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_2
                          solve( (Cd_1 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk.1, 'g'^~sk>))), 
                                         '1'>+
                                        <fst(~random), '2'>),
                                       Nd_1))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk.1, 'g'^~sk>))), 
                                      '1'>+
                                     <fst(~random), '2'>)) ∧
                                   (mk = rm(Cd_1, mo, Nd_1))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( ~Np.1 ) @ #vk.59 )
                              case Prov_SendNonce_2
                              solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                               ),
                                               s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>))
                                     ) @ #vk.57 )
                                case c_cmac
                                solve( !KU( s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.65 )
                                  case c_s1
                                  solve( !KU( s1(<'g'^~sk.1, 'g'^~sk>) ) @ #vk.70 )
                                    case c_s1
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk.1, 'g'^~sk>))
                                           ) @ #vk.67 )
                                      case c_cmac
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk.1, 'g'^~sk>))), 
                                                         '1'>+
                                                        <fst(~random), '2'>),
                                                       Nd_1)
                                             ) @ #vk.63 )
                                        case NDev_Confirmation_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.70 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.73 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.74 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.74 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.76 )
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_1
                                        by contradiction /* from formulas */
                                      next
                                        case c_cmac
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.72 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.76 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.77 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.77 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.79 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_snd
                          solve( !KU( ~random ) @ #vk.57 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            solve( (Cd_1 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk.1, 'g'^~sk>))), 
                                           '1'>+
                                          <fst(~random), '2'>),
                                         Nd_1))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk.1, 'g'^~sk>))), 
                                        '1'>+
                                       <fst(~random), '2'>)) ∧
                                     (mk = rm(Cd_1, mo, Nd_1))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( ~Np.1 ) @ #vk.60 )
                                case Prov_SendNonce_2
                                solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                 ),
                                                 s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>))
                                       ) @ #vk.58 )
                                  case c_cmac
                                  solve( !KU( s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.67 )
                                    case c_s1
                                    solve( !KU( s1(<'g'^~sk.1, 'g'^~sk>) ) @ #vk.72 )
                                      case c_s1
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk.1, 'g'^~sk>))
                                             ) @ #vk.68 )
                                        case c_cmac
                                        solve( !KU( fst(~random) ) @ #vk.70 )
                                          case NDev_Confirmation_1
                                          solve( !KU( cmac((
                                                            <
                                                             cmac('prck',
                                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                                       s1(<'g'^~sk.1, 'g'^~sk>))), 
                                                             '1'>+
                                                            <fst(~random), '2'>),
                                                           Nd_1)
                                                 ) @ #vk.65 )
                                            case NDev_Confirmation_1
                                            solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.72 )
                                              case c_fst
                                              solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                                case NDev_SendPK_InBand
                                                by solve( !KU( ~sk.1 ) @ #vk.76 )
                                              next
                                                case Prov_SendPK_InBand
                                                by solve( !KU( ~sk ) @ #vk.76 )
                                              next
                                                case c_exp
                                                by solve( !KU( ~sk ) @ #vk.78 )
                                              qed
                                            qed
                                          next
                                            case Prov_Confirmation_1
                                            by contradiction /* from formulas */
                                          next
                                            case c_cmac
                                            solve( !KU( ~Nd.1 ) @ #vk.77 )
                                              case NDev_SendNonce_1
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        next
                                          case Prov_Confirmation_1
                                          solve( !KU( cmac((
                                                            <
                                                             cmac('prck',
                                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                                       s1(<'g'^~sk.1, 'g'^~sk>))), 
                                                             '1'>+
                                                            <fst(~random), '2'>),
                                                           Nd_1)
                                                 ) @ #vk.65 )
                                            case NDev_Confirmation_1
                                            solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.72 )
                                              case c_fst
                                              solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                                case NDev_SendPK_InBand
                                                by solve( !KU( ~sk.1 ) @ #vk.76 )
                                              next
                                                case Prov_SendPK_InBand
                                                by solve( !KU( ~sk ) @ #vk.76 )
                                              next
                                                case c_exp
                                                by solve( !KU( ~sk ) @ #vk.78 )
                                              qed
                                            qed
                                          next
                                            case Prov_Confirmation_1
                                            by contradiction /* from formulas */
                                          next
                                            case c_cmac
                                            by contradiction /* cyclic */
                                          qed
                                        next
                                          case c_fst
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Prov_Confirmation_2
            solve( (Cd_1 =
                    cmac((<z, '2'>+
                          <
                           cmac('prck',
                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                     s1(<'g'^~sk.1, 'g'^~sk>))), 
                           '1'>
                         ),
                         Nd_1))  ∥
                   (∃ mk mo.
                     ((mk+mo) =
                      (<z, '2'>+
                       <
                        cmac('prck',
                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                  s1(<'g'^~sk.1, 'g'^~sk>))), 
                        '1'>
                      )) ∧
                     (mk = rm(Cd_1, mo, Nd_1))
                    ∧
                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
              case case_1
              solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                     ) ▶₂ #vr.22 )
                case Receive_UserDevice
                by solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1,
                                 <z, fst(~random)>
                          ) ▶₃ #vr.22 )
              qed
            qed
          next
            case c_cmac
            solve( !KU( cmac((
                              <
                               cmac('prck',
                                    cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                         s1(<DHpkP, 'g'^~sk>))), 
                               '1'>+
                              <snd(~random), '2'>),
                             Np_2)
                   ) @ #vk.13 )
              case NDev_Confirmation_2
              by contradiction /* cyclic */
            next
              case Prov_Confirmation_1
              solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                     ) ▶₂ #vr.20 )
                case Receive_UserDevice
                by solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1,
                                 <snd(~random), x>
                          ) ▶₃ #vr.20 )
              qed
            next
              case Prov_Confirmation_2
              solve( (Cd_1 =
                      cmac((<z, '2'>+
                            <
                             cmac('prck',
                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                       s1(<'g'^~sk.1, 'g'^~sk>))), 
                             '1'>
                           ),
                           Nd_1))  ∥
                     (∃ mk mo.
                       ((mk+mo) =
                        (<z, '2'>+
                         <
                          cmac('prck',
                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                    s1(<'g'^~sk.1, 'g'^~sk>))), 
                          '1'>
                        )) ∧
                       (mk = rm(Cd_1, mo, Nd_1))
                      ∧
                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                case case_1
                solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                       ) ▶₂ #vr.22 )
                  case Receive_UserDevice
                  solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, AuthValue_In
                         ) ▶₃ #vr.22 )
                    case Receive_UserDevice
                    solve( !KU( ~Np ) @ #vk.13 )
                      case Prov_SendNonce_2
                      solve( !KU( cmac('prsk',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<s1(<'g'^~sk.1, 'g'^~sk>), ~Np, ~Nd>)))
                             ) @ #vk.24 )
                        case c_cmac
                        solve( !KU( cmac('prck',
                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                              s1(<'g'^~sk.1, 'g'^~sk>)))
                               ) @ #vk.27 )
                          case NDev_Confirmation_1
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_1
                          solve( !KU( fst(~random) ) @ #vk.33 )
                            case c_fst
                            solve( !KU( ~random ) @ #vk.60 )
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_cmac
                          solve( !KU( fst(~random) ) @ #vk.33 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                          <snd('g'^(~sk*~sk.1)), '2'>),
                                                         s1(<'g'^~sk.1, 'g'^~sk>))), 
                                               '1'>+
                                              <fst(~random), '2'>),
                                             Nd_1)
                                   ) @ #vk.42 )
                              case NDev_Confirmation_1
                              solve( !KU( ~Np.1 ) @ #vk.61 )
                                case Prov_SendNonce_1
                                by contradiction /* cyclic */
                              qed
                            next
                              case Prov_Confirmation_1
                              by contradiction /* from formulas */
                            next
                              case c_cmac
                              solve( !KU( ~Np.1 ) @ #vk.61 )
                                case Prov_SendNonce_1
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_fst
                            solve( !KU( ~random ) @ #vk.61 )
                              case NDev_Confirmation_1
                              by contradiction /* cyclic */
                            next
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_1
                              solve( !KU( cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk.1, 'g'^~sk>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Nd_1)
                                     ) @ #vk.43 )
                                case NDev_Confirmation_1
                                solve( !KU( ~Np.1 ) @ #vk.62 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_1
                                by contradiction /* from formulas */
                              next
                                case c_cmac
                                solve( !KU( ~Np.1 ) @ #vk.62 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case Prov_Confirmation_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_cmac
              solve( !KU( cmac('prsk',
                               cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                    s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>)))
                     ) @ #vk.24 )
                case c_cmac
                solve( !KU( cmac('prck',
                                 cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                      s1(<DHpkP, 'g'^~sk>)))
                       ) @ #vk.28 )
                  case NDev_Confirmation_1
                  by contradiction /* cyclic */
                next
                  case Prov_Confirmation_1_case_1
                  solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                         ) ▶₂ #vr.23 )
                    case Receive_UserDevice
                    solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, AuthValue_In
                           ) ▶₃ #vr.23 )
                      case Receive_UserDevice
                      solve( !KU( ~Np ) @ #vk.40 )
                        case Prov_SendNonce_1
                        solve( !KU( fst(~random) ) @ #vk.35 )
                          case c_fst
                          solve( !KU( ~random ) @ #vk.59 )
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Prov_Confirmation_1_case_2
                  solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                         ) ▶₃ #vr.23 )
                    case Receive_UserDevice
                    by solve( In_UD( <'AskForInput', 'Device', 'User'>, NDev, $User.1,
                                     'Input'
                              ) ▶₄ #vr.23 )
                  qed
                next
                  case Prov_Confirmation_1_case_3
                  solve( !KU( ~Np ) @ #vk.39 )
                    case Prov_SendNonce_1
                    solve( !KU( fst(~random) ) @ #vk.34 )
                      case NDev_Confirmation_1
                      by contradiction /* cyclic */
                    next
                      case c_fst
                      solve( !KU( ~random ) @ #vk.63 )
                        case NDev_Confirmation_1
                        by contradiction /* cyclic */
                      next
                        case NDev_Confirmation_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case c_cmac
                  solve( !KU( fst(~random) ) @ #vk.31 )
                    case NDev_Confirmation_1
                    by contradiction /* cyclic */
                  next
                    case Prov_Confirmation_1_case_1
                    solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                           ) ▶₂ #vr.23 )
                      case Receive_UserDevice
                      solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                             ) ▶₃ #vr.23 )
                        case Receive_UserDevice
                        solve( !KU( ~Np ) @ #vk.43 )
                          case Prov_SendNonce_1
                          solve( !KU( snd(~random) ) @ #vk.39 )
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            solve( (Cd_1 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                     s1(<'g'^~sk.1, DHpkD>))), 
                                           '1'>+
                                          <fst(~random), '2'>),
                                         Nd_1))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                  s1(<'g'^~sk.1, DHpkD>))), 
                                        '1'>+
                                       <fst(~random), '2'>)) ∧
                                     (mk = rm(Cd_1, mo, Nd_1))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( ~Np.1 ) @ #vk.65 )
                                case Prov_SendNonce_2
                                solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                 s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                       ) @ #vk.42 )
                                  case c_cmac
                                  solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.71 )
                                    case c_s1
                                    solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.76 )
                                      case c_s1
                                      solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                       s1(<DHpkP, 'g'^~sk>))
                                             ) @ #vk.52 )
                                        case c_cmac
                                        solve( !KU( cmac('prck',
                                                         cmac((<fst(ECDHSecret.1), '1'>+
                                                               <snd(ECDHSecret.1), '2'>),
                                                              s1(<'g'^~sk.1, DHpkD>)))
                                               ) @ #vk.53 )
                                          case c_cmac
                                          solve( !KU( cmac((
                                                            <
                                                             cmac('prck',
                                                                  cmac((<fst(ECDHSecret.1), '1'>+
                                                                        <snd(ECDHSecret.1), '2'>),
                                                                       s1(<'g'^~sk.1, DHpkD>))), 
                                                             '1'>+
                                                            <fst(~random), '2'>),
                                                           Nd_1)
                                                 ) @ #vk.73 )
                                            case NDev_Confirmation_1
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_1
                                            by contradiction /* from formulas */
                                          next
                                            case c_cmac
                                            by contradiction /* cyclic */
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case c_snd
                            solve( !KU( ~random ) @ #vk.63 )
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_1_case_1
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_1_case_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_1_case_3
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_1_case_4
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_1_case_5
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_1_case_6
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_2_case_1
                              solve( (Cd_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(DHpkD^~sk.1), '1'>+<snd(DHpkD^~sk.1), '2'>),
                                                       s1(<'g'^~sk.1, DHpkD>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Nd_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(DHpkD^~sk.1), '1'>+<snd(DHpkD^~sk.1), '2'>),
                                                    s1(<'g'^~sk.1, DHpkD>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cd_1, mo, Nd_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( ~Np.1 ) @ #vk.66 )
                                  case Prov_SendNonce_2
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                         ) @ #vk.43 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.72 )
                                      case c_s1
                                      solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.77 )
                                        case c_s1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<DHpkP, 'g'^~sk>))
                                               ) @ #vk.53 )
                                          case c_cmac
                                          solve( !KU( cmac('prck',
                                                           cmac((<fst(DHpkD^~sk.1), '1'>+
                                                                 <snd(DHpkD^~sk.1), '2'>),
                                                                s1(<'g'^~sk.1, DHpkD>)))
                                                 ) @ #vk.54 )
                                            case c_cmac
                                            solve( !KU( cmac((
                                                              <
                                                               cmac('prck',
                                                                    cmac((<fst(DHpkD^~sk.1), '1'>+
                                                                          <snd(DHpkD^~sk.1), '2'>),
                                                                         s1(<'g'^~sk.1, DHpkD>))), 
                                                               '1'>+
                                                              <fst(~random), '2'>),
                                                             Nd_1)
                                                   ) @ #vk.74 )
                                              case Prov_Confirmation_1
                                              by contradiction /* from formulas */
                                            next
                                              case c_cmac
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_2_case_2
                              solve( (Cd_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                       s1(<'g'^~sk.1, ECDHSecret.1^inv(~sk.1)>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Nd_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                    s1(<'g'^~sk.1, ECDHSecret.1^inv(~sk.1)>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cd_1, mo, Nd_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( ~Np.1 ) @ #vk.66 )
                                  case Prov_SendNonce_2
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                         ) @ #vk.43 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.72 )
                                      case c_s1
                                      solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.77 )
                                        case c_s1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<DHpkP, 'g'^~sk>))
                                               ) @ #vk.53 )
                                          case c_cmac
                                          solve( !KU( cmac('prck',
                                                           cmac((<fst(ECDHSecret.1), '1'>+
                                                                 <snd(ECDHSecret.1), '2'>),
                                                                s1(<'g'^~sk.1, ECDHSecret.1^inv(~sk.1)>)))
                                                 ) @ #vk.54 )
                                            case c_cmac
                                            solve( !KU( ECDHSecret.1^inv(~sk.1) ) @ #vk.61 )
                                              case c_exp
                                              by solve( !KU( ~sk.1 ) @ #vk.84 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_2_case_3
                              solve( (Cd_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(x^(~sk.1*x.1)), '1'>+<snd(x^(~sk.1*x.1)), '2'>),
                                                       s1(<'g'^~sk.1, x^x.1>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Nd_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(x^(~sk.1*x.1)), '1'>+<snd(x^(~sk.1*x.1)), '2'>),
                                                    s1(<'g'^~sk.1, x^x.1>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cd_1, mo, Nd_1))
                                      ∧
                                       ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( ~Np.1 ) @ #vk.66 )
                                  case Prov_SendNonce_2
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                         ) @ #vk.43 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.72 )
                                      case c_s1
                                      solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.77 )
                                        case c_s1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<DHpkP, 'g'^~sk>))
                                               ) @ #vk.53 )
                                          case c_cmac
                                          solve( !KU( cmac('prck',
                                                           cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                 <snd(x^(~sk.1*x.1)), '2'>),
                                                                s1(<'g'^~sk.1, x^x.1>)))
                                                 ) @ #vk.54 )
                                            case c_cmac
                                            solve( !KU( cmac((
                                                              <
                                                               cmac('prck',
                                                                    cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                          <snd(x^(~sk.1*x.1)), '2'>),
                                                                         s1(<'g'^~sk.1, x^x.1>))), 
                                                               '1'>+
                                                              <fst(~random), '2'>),
                                                             Nd_1)
                                                   ) @ #vk.74 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              by contradiction /* from formulas */
                                            next
                                              case c_cmac
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_2_case_4
                              solve( (Cd_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                       s1(<'g'^~sk.1, x^inv((~sk.1*x.1))>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Nd_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                    s1(<'g'^~sk.1, x^inv((~sk.1*x.1))>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cd_1, mo, Nd_1))
                                      ∧
                                       ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( ~Np.1 ) @ #vk.66 )
                                  case Prov_SendNonce_2
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                         ) @ #vk.43 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.72 )
                                      case c_s1
                                      solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.77 )
                                        case c_s1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<DHpkP, 'g'^~sk>))
                                               ) @ #vk.53 )
                                          case c_cmac
                                          solve( !KU( cmac('prck',
                                                           cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>
                                                                ),
                                                                s1(<'g'^~sk.1, x^inv((~sk.1*x.1))>)))
                                                 ) @ #vk.54 )
                                            case c_cmac
                                            solve( !KU( x^inv((~sk.1*x.1)) ) @ #vk.61 )
                                              case c_exp
                                              by solve( !KU( ~sk.1 ) @ #vk.85 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_2_case_5
                              solve( (Cd_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(x^x.1), '1'>+<snd(x^x.1), '2'>),
                                                       s1(<'g'^~sk.1, x^(x.1*inv(~sk.1))>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Nd_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(x^x.1), '1'>+<snd(x^x.1), '2'>),
                                                    s1(<'g'^~sk.1, x^(x.1*inv(~sk.1))>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cd_1, mo, Nd_1))
                                      ∧
                                       ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( ~Np.1 ) @ #vk.66 )
                                  case Prov_SendNonce_2
                                  solve( !KU( x^(x.1*inv(~sk.1)) ) @ #vk.53 )
                                    case NDev_SendPK_InBand_case_1
                                    by solve( !KU( ~sk.1 ) @ #vk.70 )
                                  next
                                    case NDev_SendPK_InBand_case_2
                                    by solve( !KU( ~sk.1 ) @ #vk.72 )
                                  next
                                    case Prov_SendPK_InBand_case_1
                                    by contradiction /* non-normal terms */
                                  next
                                    case Prov_SendPK_InBand_case_2
                                    by contradiction /* non-normal terms */
                                  next
                                    case c_exp
                                    by solve( !KU( ~sk.1 ) @ #vk.73 )
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_2_case_6
                              solve( (Cd_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(x^(x.1*inv(x.2))), '1'>+
                                                        <snd(x^(x.1*inv(x.2))), '2'>),
                                                       s1(<'g'^~sk.1, x^(x.1*inv((~sk.1*x.2)))>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Nd_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(x^(x.1*inv(x.2))), '1'>+<snd(x^(x.1*inv(x.2))), '2'>
                                                    ),
                                                    s1(<'g'^~sk.1, x^(x.1*inv((~sk.1*x.2)))>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cd_1, mo, Nd_1))
                                      ∧
                                       ∀ x.3 y. ((y+x.3) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( ~Np.1 ) @ #vk.66 )
                                  case Prov_SendNonce_2
                                  solve( !KU( x^(x.1*inv((~sk.1*x.2))) ) @ #vk.53 )
                                    case NDev_SendPK_InBand_case_1
                                    by solve( !KU( ~sk.1 ) @ #vk.71 )
                                  next
                                    case NDev_SendPK_InBand_case_2
                                    by solve( !KU( ~sk.1 ) @ #vk.73 )
                                  next
                                    case Prov_SendPK_InBand_case_1
                                    by contradiction /* non-normal terms */
                                  next
                                    case Prov_SendPK_InBand_case_2
                                    by contradiction /* non-normal terms */
                                  next
                                    case c_exp
                                    by solve( !KU( ~sk.1 ) @ #vk.74 )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case Prov_Confirmation_1_case_2
                    solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                           ) ▶₂ #vr.23 )
                      case Receive_UserDevice
                      solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                             ) ▶₃ #vr.23 )
                        case Receive_UserDevice
                        solve( !KU( ~Np ) @ #vk.43 )
                          case Prov_SendNonce_1
                          solve( !KU( snd(~random) ) @ #vk.39 )
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            solve( (Cd_1 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<z, '1'>+<z.1, '2'>),
                                                     s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>))), 
                                           '1'>+
                                          <fst(~random), '2'>),
                                         Nd_1))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<z, '1'>+<z.1, '2'>),
                                                  s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>))), 
                                        '1'>+
                                       <fst(~random), '2'>)) ∧
                                     (mk = rm(Cd_1, mo, Nd_1))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( ~Np.1 ) @ #vk.65 )
                                case Prov_SendNonce_2
                                solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                 s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                       ) @ #vk.42 )
                                  case c_cmac
                                  solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.71 )
                                    case c_s1
                                    solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.76 )
                                      case c_s1
                                      solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                       s1(<DHpkP, 'g'^~sk>))
                                             ) @ #vk.52 )
                                        case c_cmac
                                        solve( !KU( cmac('prck',
                                                         cmac((<z, '1'>+<z.1, '2'>),
                                                              s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>)))
                                               ) @ #vk.53 )
                                          case c_cmac
                                          solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.60 )
                                            case c_exp
                                            by solve( !KU( ~sk.1 ) @ #vk.85 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case c_snd
                            solve( !KU( ~random ) @ #vk.63 )
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_1
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_2
                              solve( (Cd_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<z, '1'>+<z.1, '2'>),
                                                       s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Nd_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<z, '1'>+<z.1, '2'>),
                                                    s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cd_1, mo, Nd_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( ~Np.1 ) @ #vk.66 )
                                  case Prov_SendNonce_2
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                         ) @ #vk.43 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.72 )
                                      case c_s1
                                      solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.77 )
                                        case c_s1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<DHpkP, 'g'^~sk>))
                                               ) @ #vk.53 )
                                          case c_cmac
                                          solve( !KU( cmac('prck',
                                                           cmac((<z, '1'>+<z.1, '2'>),
                                                                s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>)))
                                                 ) @ #vk.54 )
                                            case c_cmac
                                            solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.61 )
                                              case c_exp
                                              by solve( !KU( ~sk.1 ) @ #vk.86 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case c_fst
                    solve( !KU( ~random ) @ #vk.39 )
                      case NDev_Confirmation_1
                      by contradiction /* cyclic */
                    next
                      case NDev_Confirmation_2
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_1_case_1
                      solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                             ) ▶₂ #vr.23 )
                        case Receive_UserDevice
                        solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                               ) ▶₃ #vr.23 )
                          case Receive_UserDevice
                          solve( !KU( ~Np ) @ #vk.44 )
                            case Prov_SendNonce_1
                            solve( !KU( snd(~random) ) @ #vk.40 )
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_2
                              solve( (Cd_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(DHpkD^~sk.1), '1'>+<snd(DHpkD^~sk.1), '2'>),
                                                       s1(<'g'^~sk.1, DHpkD>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Nd_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(DHpkD^~sk.1), '1'>+<snd(DHpkD^~sk.1), '2'>),
                                                    s1(<'g'^~sk.1, DHpkD>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cd_1, mo, Nd_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( ~Np.1 ) @ #vk.66 )
                                  case Prov_SendNonce_2
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                         ) @ #vk.43 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.72 )
                                      case c_s1
                                      solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.77 )
                                        case c_s1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<DHpkP, 'g'^~sk>))
                                               ) @ #vk.53 )
                                          case c_cmac
                                          solve( !KU( cmac('prck',
                                                           cmac((<fst(DHpkD^~sk.1), '1'>+
                                                                 <snd(DHpkD^~sk.1), '2'>),
                                                                s1(<'g'^~sk.1, DHpkD>)))
                                                 ) @ #vk.54 )
                                            case c_cmac
                                            solve( !KU( cmac((
                                                              <
                                                               cmac('prck',
                                                                    cmac((<fst(DHpkD^~sk.1), '1'>+
                                                                          <snd(DHpkD^~sk.1), '2'>),
                                                                         s1(<'g'^~sk.1, DHpkD>))), 
                                                               '1'>+
                                                              <fst(~random), '2'>),
                                                             Nd_1)
                                                   ) @ #vk.74 )
                                              case Prov_Confirmation_1
                                              by contradiction /* from formulas */
                                            next
                                              case c_cmac
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    next
                      case Prov_Confirmation_1_case_2
                      solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                             ) ▶₂ #vr.23 )
                        case Receive_UserDevice
                        solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                               ) ▶₃ #vr.23 )
                          case Receive_UserDevice
                          solve( !KU( ~Np ) @ #vk.44 )
                            case Prov_SendNonce_1
                            solve( !KU( snd(~random) ) @ #vk.40 )
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_2
                              solve( (Cd_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                       s1(<'g'^~sk.1, ECDHSecret.1^inv(~sk.1)>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Nd_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                    s1(<'g'^~sk.1, ECDHSecret.1^inv(~sk.1)>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cd_1, mo, Nd_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( ~Np.1 ) @ #vk.66 )
                                  case Prov_SendNonce_2
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                         ) @ #vk.43 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.72 )
                                      case c_s1
                                      solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.77 )
                                        case c_s1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<DHpkP, 'g'^~sk>))
                                               ) @ #vk.53 )
                                          case c_cmac
                                          solve( !KU( cmac('prck',
                                                           cmac((<fst(ECDHSecret.1), '1'>+
                                                                 <snd(ECDHSecret.1), '2'>),
                                                                s1(<'g'^~sk.1, ECDHSecret.1^inv(~sk.1)>)))
                                                 ) @ #vk.54 )
                                            case c_cmac
                                            solve( !KU( ECDHSecret.1^inv(~sk.1) ) @ #vk.61 )
                                              case c_exp
                                              by solve( !KU( ~sk.1 ) @ #vk.84 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    next
                      case Prov_Confirmation_1_case_3
                      solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                             ) ▶₂ #vr.23 )
                        case Receive_UserDevice
                        solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                               ) ▶₃ #vr.23 )
                          case Receive_UserDevice
                          solve( !KU( ~Np ) @ #vk.44 )
                            case Prov_SendNonce_1
                            solve( !KU( snd(~random) ) @ #vk.40 )
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_2
                              solve( (Cd_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(x^(~sk.1*x.1)), '1'>+<snd(x^(~sk.1*x.1)), '2'>),
                                                       s1(<'g'^~sk.1, x^x.1>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Nd_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(x^(~sk.1*x.1)), '1'>+<snd(x^(~sk.1*x.1)), '2'>),
                                                    s1(<'g'^~sk.1, x^x.1>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cd_1, mo, Nd_1))
                                      ∧
                                       ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( ~Np.1 ) @ #vk.66 )
                                  case Prov_SendNonce_2
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                         ) @ #vk.43 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.72 )
                                      case c_s1
                                      solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.77 )
                                        case c_s1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<DHpkP, 'g'^~sk>))
                                               ) @ #vk.53 )
                                          case c_cmac
                                          solve( !KU( cmac('prck',
                                                           cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                 <snd(x^(~sk.1*x.1)), '2'>),
                                                                s1(<'g'^~sk.1, x^x.1>)))
                                                 ) @ #vk.54 )
                                            case c_cmac
                                            solve( !KU( cmac((
                                                              <
                                                               cmac('prck',
                                                                    cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                          <snd(x^(~sk.1*x.1)), '2'>),
                                                                         s1(<'g'^~sk.1, x^x.1>))), 
                                                               '1'>+
                                                              <fst(~random), '2'>),
                                                             Nd_1)
                                                   ) @ #vk.74 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              by contradiction /* from formulas */
                                            next
                                              case c_cmac
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    next
                      case Prov_Confirmation_1_case_4
                      solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                             ) ▶₂ #vr.23 )
                        case Receive_UserDevice
                        solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                               ) ▶₃ #vr.23 )
                          case Receive_UserDevice
                          solve( !KU( ~Np ) @ #vk.44 )
                            case Prov_SendNonce_1
                            solve( !KU( snd(~random) ) @ #vk.40 )
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_2
                              solve( (Cd_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                       s1(<'g'^~sk.1, x^inv((~sk.1*x.1))>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Nd_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                    s1(<'g'^~sk.1, x^inv((~sk.1*x.1))>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cd_1, mo, Nd_1))
                                      ∧
                                       ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( ~Np.1 ) @ #vk.66 )
                                  case Prov_SendNonce_2
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                         ) @ #vk.43 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.72 )
                                      case c_s1
                                      solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.77 )
                                        case c_s1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<DHpkP, 'g'^~sk>))
                                               ) @ #vk.53 )
                                          case c_cmac
                                          solve( !KU( cmac('prck',
                                                           cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>
                                                                ),
                                                                s1(<'g'^~sk.1, x^inv((~sk.1*x.1))>)))
                                                 ) @ #vk.54 )
                                            case c_cmac
                                            solve( !KU( x^inv((~sk.1*x.1)) ) @ #vk.61 )
                                              case c_exp
                                              by solve( !KU( ~sk.1 ) @ #vk.85 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    next
                      case Prov_Confirmation_1_case_5
                      solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                             ) ▶₂ #vr.23 )
                        case Receive_UserDevice
                        solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                               ) ▶₃ #vr.23 )
                          case Receive_UserDevice
                          solve( !KU( ~Np ) @ #vk.44 )
                            case Prov_SendNonce_1
                            solve( !KU( x^(x.1*inv(~sk.1)) ) @ #vk.50 )
                              case NDev_SendPK_InBand_case_1
                              by solve( !KU( ~sk.1 ) @ #vk.65 )
                            next
                              case NDev_SendPK_InBand_case_2
                              by solve( !KU( ~sk.1 ) @ #vk.67 )
                            next
                              case Prov_SendPK_InBand_case_1
                              by contradiction /* non-normal terms */
                            next
                              case Prov_SendPK_InBand_case_2
                              by contradiction /* non-normal terms */
                            next
                              case c_exp
                              by solve( !KU( ~sk.1 ) @ #vk.68 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case Prov_Confirmation_1_case_6
                      solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                             ) ▶₂ #vr.23 )
                        case Receive_UserDevice
                        solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                               ) ▶₃ #vr.23 )
                          case Receive_UserDevice
                          solve( !KU( ~Np ) @ #vk.44 )
                            case Prov_SendNonce_1
                            solve( !KU( x^(x.1*inv((~sk.1*x.2))) ) @ #vk.50 )
                              case NDev_SendPK_InBand_case_1
                              by solve( !KU( ~sk.1 ) @ #vk.66 )
                            next
                              case NDev_SendPK_InBand_case_2
                              by solve( !KU( ~sk.1 ) @ #vk.68 )
                            next
                              case Prov_SendPK_InBand_case_1
                              by contradiction /* non-normal terms */
                            next
                              case Prov_SendPK_InBand_case_2
                              by contradiction /* non-normal terms */
                            next
                              case c_exp
                              by solve( !KU( ~sk.1 ) @ #vk.69 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case Prov_Confirmation_1_case_7
                      solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                             ) ▶₂ #vr.23 )
                        case Receive_UserDevice
                        solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                               ) ▶₃ #vr.23 )
                          case Receive_UserDevice
                          solve( !KU( ~Np ) @ #vk.44 )
                            case Prov_SendNonce_1
                            solve( !KU( snd(~random) ) @ #vk.40 )
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_2
                              solve( (Cd_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<z, '1'>+<z.1, '2'>),
                                                       s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Nd_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<z, '1'>+<z.1, '2'>),
                                                    s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cd_1, mo, Nd_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( ~Np.1 ) @ #vk.66 )
                                  case Prov_SendNonce_2
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                         ) @ #vk.43 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.72 )
                                      case c_s1
                                      solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.77 )
                                        case c_s1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<DHpkP, 'g'^~sk>))
                                               ) @ #vk.53 )
                                          case c_cmac
                                          solve( !KU( cmac('prck',
                                                           cmac((<z, '1'>+<z.1, '2'>),
                                                                s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>)))
                                                 ) @ #vk.54 )
                                            case c_cmac
                                            solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.61 )
                                              case c_exp
                                              by solve( !KU( ~sk.1 ) @ #vk.86 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    next
                      case Prov_Confirmation_2_case_1
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_2_case_2
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_2_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_2_case_4
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_2_case_5
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_2_case_6
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_2_case_7
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case split_case_2
        solve( !KU( senc(NetKey,
                         cmac('prsk',
                              cmac((<z, '1'>+<z.1, '2'>),
                                   s1(<s1(<<z, z.1>^inv(~sk), 'g'^~sk>), Np_2, ~Nd>))))
               ) @ #vk.10 )
          case c_senc
          solve( !KU( cmac((
                            <
                             cmac('prck',
                                  cmac((<z, '1'>+<z.1, '2'>), s1(<<z, z.1>^inv(~sk), 'g'^~sk>))), 
                             '1'>+
                            <fst(~random), '2'>),
                           Np_1)
                 ) @ #vk.14 )
            case NDev_Confirmation_1
            by contradiction /* cyclic */
          next
            case c_cmac
            solve( !KU( cmac((
                              <
                               cmac('prck',
                                    cmac((<z, '1'>+<z.1, '2'>), s1(<<z, z.1>^inv(~sk), 'g'^~sk>))), 
                               '1'>+
                              <snd(~random), '2'>),
                             Np_2)
                   ) @ #vk.13 )
              case NDev_Confirmation_2
              by contradiction /* cyclic */
            next
              case c_cmac
              solve( !KU( <z, z.1>^inv(~sk) ) @ #vk.15 )
                case c_exp
                by solve( !KU( ~sk ) @ #vk.39 )
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case NDev_SendNonce_2_case_2
  solve( (Cp_1 =
          cmac((<z.2, '2'>+
                <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>),
               Np_1))  ∥
         (∃ mk mo.
           ((mk+mo) =
            (<z.2, '2'>+
             <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>
            )) ∧
           (mk = rm(Cp_1, mo, Np_1))
          ∧
           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
    case case_1
    solve( (Cp_2 =
            cmac((<z.3, '2'>+
                  <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>),
                 Np_2))  ∥
           (∃ mk mo.
             ((mk+mo) =
              (<z.3, '2'>+
               <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>
              )) ∧
             (mk = rm(Cp_2, mo, Np_2))
            ∧
             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
      case case_1
      solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User, 'Input'
             ) ▶₂ #vr.9 )
        case Receive_UserDevice_case_1
        by solve( In_UD( <'Display', 'Device', 'User'>, D2, $User, AuthValue_In
                  ) ▶₃ #vr.9 )
      next
        case Receive_UserDevice_case_2
        solve( In_UD( <'Display', 'Device', 'User'>, D2, $User, AuthValue_In
               ) ▶₃ #vr.9 )
          case Receive_UserDevice
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case NDev_SendNonce_2_case_3
  solve( (Cp_1 =
          cmac((<z.2, '2'>+
                <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>),
               Np_1))  ∥
         (∃ mk mo.
           ((mk+mo) =
            (<z.2, '2'>+
             <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>
            )) ∧
           (mk = rm(Cp_1, mo, Np_1))
          ∧
           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
    case case_1
    solve( (Cp_2 =
            cmac((<z.3, '2'>+
                  <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>),
                 Np_2))  ∥
           (∃ mk mo.
             ((mk+mo) =
              (<z.3, '2'>+
               <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>
              )) ∧
             (mk = rm(Cp_2, mo, Np_2))
            ∧
             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
      case case_1
      solve( In_UD( <'Display', 'Device', 'User'>, $P, $User, AuthValue_In
             ) ▶₂ #vr.9 )
        case Receive_UserDevice
        solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
               ) ▶₃ #vr.9 )
          case Receive_UserDevice
          solve( splitEqs(2) )
            case split_case_1
            solve( !KU( senc(NetKey,
                             cmac('prsk',
                                  cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                       s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))))
                   ) @ #vk.10 )
              case Prov_Distribute
              solve( (Cd_1 =
                      cmac((
                            <
                             cmac('prck',
                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                       s1(<'g'^~sk.1, 'g'^~sk>))), 
                             '1'>+
                            <fst(~random), '2'>),
                           Nd_1))  ∥
                     (∃ mk mo.
                       ((mk+mo) =
                        (
                         <
                          cmac('prck',
                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                    s1(<'g'^~sk.1, 'g'^~sk>))), 
                          '1'>+
                         <fst(~random), '2'>)) ∧
                       (mk = rm(Cd_1, mo, Nd_1))
                      ∧
                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                case case_1
                solve( (Cd_2 =
                        cmac((
                              <
                               cmac('prck',
                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                         s1(<'g'^~sk.1, 'g'^~sk>))), 
                               '1'>+
                              <snd(~random), '2'>),
                             ~Nd))  ∥
                       (∃ mk mo.
                         ((mk+mo) =
                          (
                           <
                            cmac('prck',
                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                      s1(<'g'^~sk.1, 'g'^~sk>))), 
                            '1'>+
                           <snd(~random), '2'>)) ∧
                         (mk = rm(Cd_2, mo, ~Nd))
                        ∧
                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                  case case_1
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                               s1(<'g'^~sk.1, 'g'^~sk>))), 
                                     '1'>+
                                    <fst(~random), '2'>),
                                   Np_1)
                         ) @ #vk.14 )
                    case NDev_Confirmation_1
                    by contradiction /* cyclic */
                  next
                    case Prov_Confirmation_1
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                 s1(<'g'^~sk.1, 'g'^~sk>))), 
                                       '1'>+
                                      <fst(~random), '2'>),
                                     Nd_1)
                           ) @ #vk.52 )
                      case NDev_Confirmation_1
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk.1, 'g'^~sk>)))
                             ) @ #vk.55 )
                        case NDev_Confirmation_1
                        by contradiction /* cyclic */
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np.1 ) @ #vk.59 )
                          case Prov_SendNonce_1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_cmac
                        solve( !KU( fst(~random) ) @ #vk.57 )
                          case NDev_Confirmation_1
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_1
                          solve( !KU( ~Np.1 ) @ #vk.61 )
                            case Prov_SendNonce_1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_fst
                          solve( !KU( ~random ) @ #vk.61 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( ~Np.1 ) @ #vk.62 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Prov_Confirmation_1
                      by contradiction /* from formulas */
                    next
                      case c_cmac
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk.1, 'g'^~sk>)))
                             ) @ #vk.55 )
                        case NDev_Confirmation_1
                        by contradiction /* cyclic */
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np.1 ) @ #vk.59 )
                          case Prov_SendNonce_1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_cmac
                        solve( !KU( fst(~random) ) @ #vk.57 )
                          case NDev_Confirmation_1
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_1
                          solve( !KU( ~Np.1 ) @ #vk.61 )
                            case Prov_SendNonce_1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_fst
                          solve( !KU( ~random ) @ #vk.61 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( ~Np.1 ) @ #vk.62 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( cmac((
                                <
                                 cmac('prck',
                                      cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                           s1(<DHpkP, 'g'^~sk>))), 
                                 '1'>+
                                <fst(~random), '2'>),
                               Np_1)
                     ) @ #vk.14 )
                case NDev_Confirmation_1
                by contradiction /* cyclic */
              next
                case Prov_Confirmation_1
                solve( !KU( ~Np ) @ #vk.14 )
                  case Prov_SendNonce_1
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                               s1(<'g'^~sk.1, 'g'^~sk>))), 
                                     '1'>+
                                    <snd(~random), '2'>),
                                   Np_2)
                         ) @ #vk.14 )
                    case NDev_Confirmation_2
                    by contradiction /* cyclic */
                  next
                    case Prov_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( cmac('prsk',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>)))
                           ) @ #vk.47 )
                      case c_cmac
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk.1, 'g'^~sk>)))
                             ) @ #vk.51 )
                        case NDev_Confirmation_1
                        solve( !KU( snd(~random) ) @ #vk.53 )
                          case NDev_Confirmation_2
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_2
                          solve( (Cd_1 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk.1, 'g'^~sk>))), 
                                         '1'>+
                                        <fst(~random), '2'>),
                                       Nd_1))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk.1, 'g'^~sk>))), 
                                      '1'>+
                                     <fst(~random), '2'>)) ∧
                                   (mk = rm(Cd_1, mo, Nd_1))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( ~Np.1 ) @ #vk.62 )
                              case Prov_SendNonce_2
                              solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                               ),
                                               s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>))
                                     ) @ #vk.60 )
                                case c_cmac
                                solve( !KU( s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.68 )
                                  case c_s1
                                  solve( !KU( s1(<'g'^~sk.1, 'g'^~sk>) ) @ #vk.73 )
                                    case c_s1
                                    solve( !KU( fst(~random) ) @ #vk.70 )
                                      case c_fst
                                      solve( !KU( ~random ) @ #vk.76 )
                                        case Prov_Confirmation_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_snd
                          solve( !KU( ~random ) @ #vk.60 )
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            solve( (Cd_1 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk.1, 'g'^~sk>))), 
                                           '1'>+
                                          <fst(~random), '2'>),
                                         Nd_1))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk.1, 'g'^~sk>))), 
                                        '1'>+
                                       <fst(~random), '2'>)) ∧
                                     (mk = rm(Cd_1, mo, Nd_1))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( ~Np.1 ) @ #vk.63 )
                                case Prov_SendNonce_2
                                solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                 ),
                                                 s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>))
                                       ) @ #vk.61 )
                                  case c_cmac
                                  solve( !KU( s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.69 )
                                    case c_s1
                                    solve( !KU( s1(<'g'^~sk.1, 'g'^~sk>) ) @ #vk.74 )
                                      case c_s1
                                      solve( !KU( fst(~random) ) @ #vk.71 )
                                        case c_fst
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case Prov_Confirmation_1
                        solve( !KU( snd(~random) ) @ #vk.53 )
                          case NDev_Confirmation_2
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_2
                          solve( (Cd_1 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk.1, 'g'^~sk>))), 
                                         '1'>+
                                        <fst(~random), '2'>),
                                       Nd_1))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk.1, 'g'^~sk>))), 
                                      '1'>+
                                     <fst(~random), '2'>)) ∧
                                   (mk = rm(Cd_1, mo, Nd_1))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( ~Np.1 ) @ #vk.61 )
                              case Prov_SendNonce_2
                              solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                               ),
                                               s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>))
                                     ) @ #vk.60 )
                                case c_cmac
                                solve( !KU( s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.67 )
                                  case c_s1
                                  solve( !KU( s1(<'g'^~sk.1, 'g'^~sk>) ) @ #vk.72 )
                                    case c_s1
                                    solve( !KU( fst(~random) ) @ #vk.69 )
                                      case c_fst
                                      solve( !KU( ~random ) @ #vk.75 )
                                        case Prov_Confirmation_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_snd
                          solve( !KU( ~random ) @ #vk.59 )
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            solve( (Cd_1 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk.1, 'g'^~sk>))), 
                                           '1'>+
                                          <fst(~random), '2'>),
                                         Nd_1))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk.1, 'g'^~sk>))), 
                                        '1'>+
                                       <fst(~random), '2'>)) ∧
                                     (mk = rm(Cd_1, mo, Nd_1))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( ~Np.1 ) @ #vk.62 )
                                case Prov_SendNonce_2
                                solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                 ),
                                                 s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>))
                                       ) @ #vk.61 )
                                  case c_cmac
                                  solve( !KU( s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.68 )
                                    case c_s1
                                    solve( !KU( s1(<'g'^~sk.1, 'g'^~sk>) ) @ #vk.73 )
                                      case c_s1
                                      solve( !KU( fst(~random) ) @ #vk.70 )
                                        case c_fst
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_cmac
                        solve( !KU( snd(~random) ) @ #vk.53 )
                          case NDev_Confirmation_2
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_2
                          solve( (Cd_1 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk.1, 'g'^~sk>))), 
                                         '1'>+
                                        <fst(~random), '2'>),
                                       Nd_1))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk.1, 'g'^~sk>))), 
                                      '1'>+
                                     <fst(~random), '2'>)) ∧
                                   (mk = rm(Cd_1, mo, Nd_1))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( ~Np.1 ) @ #vk.61 )
                              case Prov_SendNonce_2
                              solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                               ),
                                               s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>))
                                     ) @ #vk.59 )
                                case c_cmac
                                solve( !KU( s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.67 )
                                  case c_s1
                                  solve( !KU( s1(<'g'^~sk.1, 'g'^~sk>) ) @ #vk.72 )
                                    case c_s1
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk.1, 'g'^~sk>))
                                           ) @ #vk.69 )
                                      case c_cmac
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk.1, 'g'^~sk>))), 
                                                         '1'>+
                                                        <fst(~random), '2'>),
                                                       Nd_1)
                                             ) @ #vk.65 )
                                        case NDev_Confirmation_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.72 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.76 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.76 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.78 )
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_1
                                        by contradiction /* from formulas */
                                      next
                                        case c_cmac
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.74 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.78 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.79 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.79 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.81 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_snd
                          solve( !KU( ~random ) @ #vk.59 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            solve( (Cd_1 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk.1, 'g'^~sk>))), 
                                           '1'>+
                                          <fst(~random), '2'>),
                                         Nd_1))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk.1, 'g'^~sk>))), 
                                        '1'>+
                                       <fst(~random), '2'>)) ∧
                                     (mk = rm(Cd_1, mo, Nd_1))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( ~Np.1 ) @ #vk.62 )
                                case Prov_SendNonce_2
                                solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                 ),
                                                 s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>))
                                       ) @ #vk.60 )
                                  case c_cmac
                                  solve( !KU( s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.69 )
                                    case c_s1
                                    solve( !KU( s1(<'g'^~sk.1, 'g'^~sk>) ) @ #vk.74 )
                                      case c_s1
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk.1, 'g'^~sk>))
                                             ) @ #vk.70 )
                                        case c_cmac
                                        solve( !KU( fst(~random) ) @ #vk.72 )
                                          case NDev_Confirmation_1
                                          solve( !KU( cmac((
                                                            <
                                                             cmac('prck',
                                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                                       s1(<'g'^~sk.1, 'g'^~sk>))), 
                                                             '1'>+
                                                            <fst(~random), '2'>),
                                                           Nd_1)
                                                 ) @ #vk.67 )
                                            case NDev_Confirmation_1
                                            solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.74 )
                                              case c_fst
                                              solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.77 )
                                                case NDev_SendPK_InBand
                                                by solve( !KU( ~sk.1 ) @ #vk.78 )
                                              next
                                                case Prov_SendPK_InBand
                                                by solve( !KU( ~sk ) @ #vk.78 )
                                              next
                                                case c_exp
                                                by solve( !KU( ~sk ) @ #vk.80 )
                                              qed
                                            qed
                                          next
                                            case Prov_Confirmation_1
                                            by contradiction /* from formulas */
                                          next
                                            case c_cmac
                                            solve( !KU( ~Nd.1 ) @ #vk.79 )
                                              case NDev_SendNonce_1
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        next
                                          case Prov_Confirmation_1
                                          solve( !KU( cmac((
                                                            <
                                                             cmac('prck',
                                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                                       s1(<'g'^~sk.1, 'g'^~sk>))), 
                                                             '1'>+
                                                            <fst(~random), '2'>),
                                                           Nd_1)
                                                 ) @ #vk.67 )
                                            case NDev_Confirmation_1
                                            solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.74 )
                                              case c_fst
                                              solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.77 )
                                                case NDev_SendPK_InBand
                                                by solve( !KU( ~sk.1 ) @ #vk.78 )
                                              next
                                                case Prov_SendPK_InBand
                                                by solve( !KU( ~sk ) @ #vk.78 )
                                              next
                                                case c_exp
                                                by solve( !KU( ~sk ) @ #vk.80 )
                                              qed
                                            qed
                                          next
                                            case Prov_Confirmation_1
                                            by contradiction /* from formulas */
                                          next
                                            case c_cmac
                                            by contradiction /* cyclic */
                                          qed
                                        next
                                          case c_fst
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_cmac
                solve( !KU( cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                             s1(<DHpkP, 'g'^~sk>))), 
                                   '1'>+
                                  <snd(~random), '2'>),
                                 Np_2)
                       ) @ #vk.13 )
                  case NDev_Confirmation_2
                  by contradiction /* cyclic */
                next
                  case Prov_Confirmation_2
                  solve( (Cd_1 =
                          cmac((
                                <
                                 cmac('prck',
                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                           s1(<'g'^~sk.1, 'g'^~sk>))), 
                                 '1'>+
                                <fst(~random), '2'>),
                               Nd_1))  ∥
                         (∃ mk mo.
                           ((mk+mo) =
                            (
                             <
                              cmac('prck',
                                   cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                        s1(<'g'^~sk.1, 'g'^~sk>))), 
                              '1'>+
                             <fst(~random), '2'>)) ∧
                           (mk = rm(Cd_1, mo, Nd_1))
                          ∧
                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                    case case_1
                    solve( !KU( ~Np ) @ #vk.13 )
                      case Prov_SendNonce_2
                      solve( !KU( cmac('prsk',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<s1(<'g'^~sk.1, 'g'^~sk>), ~Np, ~Nd>)))
                             ) @ #vk.50 )
                        case c_cmac
                        solve( !KU( cmac('prck',
                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                              s1(<'g'^~sk.1, 'g'^~sk>)))
                               ) @ #vk.51 )
                          case NDev_Confirmation_1
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_1
                          solve( !KU( fst(~random) ) @ #vk.53 )
                            case c_fst
                            solve( !KU( ~random ) @ #vk.62 )
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_cmac
                          solve( !KU( fst(~random) ) @ #vk.53 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                          <snd('g'^(~sk*~sk.1)), '2'>),
                                                         s1(<'g'^~sk.1, 'g'^~sk>))), 
                                               '1'>+
                                              <fst(~random), '2'>),
                                             Nd_1)
                                   ) @ #vk.56 )
                              case NDev_Confirmation_1
                              solve( !KU( ~Np.1 ) @ #vk.63 )
                                case Prov_SendNonce_1
                                by contradiction /* cyclic */
                              qed
                            next
                              case Prov_Confirmation_1
                              by contradiction /* from formulas */
                            next
                              case c_cmac
                              solve( !KU( ~Np.1 ) @ #vk.63 )
                                case Prov_SendNonce_1
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_fst
                            solve( !KU( ~random ) @ #vk.63 )
                              case NDev_Confirmation_1
                              by contradiction /* cyclic */
                            next
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_1
                              solve( !KU( cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk.1, 'g'^~sk>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Nd_1)
                                     ) @ #vk.57 )
                                case NDev_Confirmation_1
                                solve( !KU( ~Np.1 ) @ #vk.64 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_1
                                by contradiction /* from formulas */
                              next
                                case c_cmac
                                solve( !KU( ~Np.1 ) @ #vk.64 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case Prov_Confirmation_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_cmac
                  solve( !KU( cmac('prsk',
                                   cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                        s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>)))
                         ) @ #vk.47 )
                    case c_cmac
                    solve( !KU( cmac('prck',
                                     cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                          s1(<DHpkP, 'g'^~sk>)))
                           ) @ #vk.48 )
                      case NDev_Confirmation_1
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_1
                      solve( !KU( ~Np ) @ #vk.57 )
                        case Prov_SendNonce_1
                        solve( !KU( fst(~random) ) @ #vk.53 )
                          case c_fst
                          solve( !KU( ~random ) @ #vk.61 )
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case c_cmac
                      solve( !KU( fst(~random) ) @ #vk.50 )
                        case NDev_Confirmation_1
                        by contradiction /* cyclic */
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np ) @ #vk.60 )
                          case Prov_SendNonce_1
                          solve( splitEqs(8) )
                            case split_case_1
                            solve( !KU( snd(~random) ) @ #vk.57 )
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_2
                              solve( (Cd_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<z, '1'>+<z.1, '2'>),
                                                       s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Nd_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<z, '1'>+<z.1, '2'>),
                                                    s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cd_1, mo, Nd_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( ~Np.1 ) @ #vk.67 )
                                  case Prov_SendNonce_2
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                         ) @ #vk.62 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.73 )
                                      case c_s1
                                      solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.78 )
                                        case c_s1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<DHpkP, 'g'^~sk>))
                                               ) @ #vk.72 )
                                          case c_cmac
                                          solve( !KU( cmac('prck',
                                                           cmac((<z, '1'>+<z.1, '2'>),
                                                                s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>)))
                                                 ) @ #vk.73 )
                                            case c_cmac
                                            solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.58 )
                                              case c_exp
                                              by solve( !KU( ~sk.1 ) @ #vk.87 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_snd
                              solve( !KU( ~random ) @ #vk.65 )
                                case NDev_Confirmation_2_case_1
                                by contradiction /* cyclic */
                              next
                                case NDev_Confirmation_2_case_2
                                by contradiction /* cyclic */
                              next
                                case NDev_Confirmation_2_case_3
                                by contradiction /* cyclic */
                              next
                                case NDev_Confirmation_2_case_4
                                by contradiction /* cyclic */
                              next
                                case NDev_Confirmation_2_case_5
                                by contradiction /* cyclic */
                              next
                                case NDev_Confirmation_2_case_6
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2
                                solve( (Cd_1 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<z, '1'>+<z.1, '2'>),
                                                         s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>))), 
                                               '1'>+
                                              <fst(~random), '2'>),
                                             Nd_1))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<z, '1'>+<z.1, '2'>),
                                                      s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>))), 
                                            '1'>+
                                           <fst(~random), '2'>)) ∧
                                         (mk = rm(Cd_1, mo, Nd_1))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( ~Np.1 ) @ #vk.68 )
                                    case Prov_SendNonce_2
                                    solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                     s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                           ) @ #vk.63 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.74 )
                                        case c_s1
                                        solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.79 )
                                          case c_s1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<DHpkP, 'g'^~sk>))
                                                 ) @ #vk.73 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<z, '1'>+<z.1, '2'>),
                                                                  s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>)))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.59 )
                                                case c_exp
                                                by solve( !KU( ~sk.1 ) @ #vk.88 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case split_case_2
                            solve( !KU( snd(~random) ) @ #vk.57 )
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_2
                              solve( (Cd_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                       s1(<'g'^~sk.1, DHpkD>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Nd_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                    s1(<'g'^~sk.1, DHpkD>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cd_1, mo, Nd_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( ~Np.1 ) @ #vk.67 )
                                  case Prov_SendNonce_2
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                         ) @ #vk.62 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.73 )
                                      case c_s1
                                      solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.78 )
                                        case c_s1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<DHpkP, 'g'^~sk>))
                                               ) @ #vk.72 )
                                          case c_cmac
                                          solve( !KU( cmac('prck',
                                                           cmac((<fst(ECDHSecret.1), '1'>+
                                                                 <snd(ECDHSecret.1), '2'>),
                                                                s1(<'g'^~sk.1, DHpkD>)))
                                                 ) @ #vk.73 )
                                            case c_cmac
                                            solve( !KU( cmac((
                                                              <
                                                               cmac('prck',
                                                                    cmac((<fst(ECDHSecret.1), '1'>+
                                                                          <snd(ECDHSecret.1), '2'>),
                                                                         s1(<'g'^~sk.1, DHpkD>))), 
                                                               '1'>+
                                                              <fst(~random), '2'>),
                                                             Nd_1)
                                                   ) @ #vk.75 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              by contradiction /* from formulas */
                                            next
                                              case c_cmac
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_snd
                              solve( !KU( ~random ) @ #vk.65 )
                                case NDev_Confirmation_2_case_1
                                by contradiction /* cyclic */
                              next
                                case NDev_Confirmation_2_case_2
                                by contradiction /* cyclic */
                              next
                                case NDev_Confirmation_2_case_3
                                by contradiction /* cyclic */
                              next
                                case NDev_Confirmation_2_case_4
                                by contradiction /* cyclic */
                              next
                                case NDev_Confirmation_2_case_5
                                by contradiction /* cyclic */
                              next
                                case NDev_Confirmation_2_case_6
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2
                                solve( (Cd_1 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                         s1(<'g'^~sk.1, DHpkD>))), 
                                               '1'>+
                                              <fst(~random), '2'>),
                                             Nd_1))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                      s1(<'g'^~sk.1, DHpkD>))), 
                                            '1'>+
                                           <fst(~random), '2'>)) ∧
                                         (mk = rm(Cd_1, mo, Nd_1))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( ~Np.1 ) @ #vk.68 )
                                    case Prov_SendNonce_2
                                    solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                     s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                           ) @ #vk.63 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.74 )
                                        case c_s1
                                        solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.79 )
                                          case c_s1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<DHpkP, 'g'^~sk>))
                                                 ) @ #vk.73 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(ECDHSecret.1), '1'>+
                                                                   <snd(ECDHSecret.1), '2'>),
                                                                  s1(<'g'^~sk.1, DHpkD>)))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(ECDHSecret.1), '1'>+
                                                                            <snd(ECDHSecret.1), '2'>),
                                                                           s1(<'g'^~sk.1, DHpkD>))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Nd_1)
                                                     ) @ #vk.76 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_1
                                                by contradiction /* from formulas */
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_fst
                        solve( !KU( ~random ) @ #vk.58 )
                          case NDev_Confirmation_1_case_1
                          by contradiction /* cyclic */
                        next
                          case NDev_Confirmation_1_case_2
                          by contradiction /* cyclic */
                        next
                          case NDev_Confirmation_1_case_3
                          by contradiction /* cyclic */
                        next
                          case NDev_Confirmation_1_case_4
                          by contradiction /* cyclic */
                        next
                          case NDev_Confirmation_1_case_5
                          by contradiction /* cyclic */
                        next
                          case NDev_Confirmation_1_case_6
                          by contradiction /* cyclic */
                        next
                          case NDev_Confirmation_2_case_1
                          by contradiction /* cyclic */
                        next
                          case NDev_Confirmation_2_case_2
                          by contradiction /* cyclic */
                        next
                          case NDev_Confirmation_2_case_3
                          by contradiction /* cyclic */
                        next
                          case NDev_Confirmation_2_case_4
                          by contradiction /* cyclic */
                        next
                          case NDev_Confirmation_2_case_5
                          by contradiction /* cyclic */
                        next
                          case NDev_Confirmation_2_case_6
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_1
                          solve( !KU( ~Np ) @ #vk.61 )
                            case Prov_SendNonce_1
                            solve( splitEqs(8) )
                              case split_case_1
                              solve( !KU( snd(~random) ) @ #vk.58 )
                                case NDev_Confirmation_2
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2
                                solve( (Cd_1 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<z, '1'>+<z.1, '2'>),
                                                         s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>))), 
                                               '1'>+
                                              <fst(~random), '2'>),
                                             Nd_1))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<z, '1'>+<z.1, '2'>),
                                                      s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>))), 
                                            '1'>+
                                           <fst(~random), '2'>)) ∧
                                         (mk = rm(Cd_1, mo, Nd_1))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( ~Np.1 ) @ #vk.68 )
                                    case Prov_SendNonce_2
                                    solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                     s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                           ) @ #vk.63 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.74 )
                                        case c_s1
                                        solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.79 )
                                          case c_s1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<DHpkP, 'g'^~sk>))
                                                 ) @ #vk.73 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<z, '1'>+<z.1, '2'>),
                                                                  s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>)))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.59 )
                                                case c_exp
                                                by solve( !KU( ~sk.1 ) @ #vk.88 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case c_snd
                                by contradiction /* cyclic */
                              qed
                            next
                              case split_case_2
                              solve( !KU( snd(~random) ) @ #vk.58 )
                                case NDev_Confirmation_2
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2
                                solve( (Cd_1 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                         s1(<'g'^~sk.1, DHpkD>))), 
                                               '1'>+
                                              <fst(~random), '2'>),
                                             Nd_1))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                      s1(<'g'^~sk.1, DHpkD>))), 
                                            '1'>+
                                           <fst(~random), '2'>)) ∧
                                         (mk = rm(Cd_1, mo, Nd_1))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( ~Np.1 ) @ #vk.68 )
                                    case Prov_SendNonce_2
                                    solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                     s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                           ) @ #vk.63 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.74 )
                                        case c_s1
                                        solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.79 )
                                          case c_s1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<DHpkP, 'g'^~sk>))
                                                 ) @ #vk.73 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(ECDHSecret.1), '1'>+
                                                                   <snd(ECDHSecret.1), '2'>),
                                                                  s1(<'g'^~sk.1, DHpkD>)))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(ECDHSecret.1), '1'>+
                                                                            <snd(ECDHSecret.1), '2'>),
                                                                           s1(<'g'^~sk.1, DHpkD>))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Nd_1)
                                                     ) @ #vk.76 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_1
                                                by contradiction /* from formulas */
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case c_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case split_case_2
            solve( !KU( senc(NetKey,
                             cmac('prsk',
                                  cmac((<z, '1'>+<z.1, '2'>),
                                       s1(<s1(<<z, z.1>^inv(~sk), 'g'^~sk>), Np_2, ~Nd>))))
                   ) @ #vk.10 )
              case c_senc
              solve( !KU( cmac((
                                <
                                 cmac('prck',
                                      cmac((<z, '1'>+<z.1, '2'>), s1(<<z, z.1>^inv(~sk), 'g'^~sk>))), 
                                 '1'>+
                                <fst(~random), '2'>),
                               Np_1)
                     ) @ #vk.14 )
                case NDev_Confirmation_1
                by contradiction /* cyclic */
              next
                case c_cmac
                solve( !KU( cmac((
                                  <
                                   cmac('prck',
                                        cmac((<z, '1'>+<z.1, '2'>), s1(<<z, z.1>^inv(~sk), 'g'^~sk>))), 
                                   '1'>+
                                  <snd(~random), '2'>),
                                 Np_2)
                       ) @ #vk.13 )
                  case NDev_Confirmation_2
                  by contradiction /* cyclic */
                next
                  case c_cmac
                  solve( !KU( <z, z.1>^inv(~sk) ) @ #vk.15 )
                    case c_exp
                    by solve( !KU( ~sk ) @ #vk.58 )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case NDev_SendNonce_2_case_4
  solve( (Cp_1 =
          cmac((
                <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>+
                <fst(~m), '2'>),
               Np_1))  ∥
         (∃ mk mo.
           ((mk+mo) =
            (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>+
             <fst(~m), '2'>)) ∧
           (mk = rm(Cp_1, mo, Np_1))
          ∧
           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
    case case_1
    solve( (Cp_2 =
            cmac((
                  <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>+
                  <snd(~m), '2'>),
                 Np_2))  ∥
           (∃ mk mo.
             ((mk+mo) =
              (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>+
               <snd(~m), '2'>)) ∧
             (mk = rm(Cp_2, mo, Np_2))
            ∧
             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
      case case_1
      solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User, 'Input'
             ) ▶₃ #vr.9 )
        case Receive_UserDevice_case_1
        solve( In_UD( <'AskForInput', 'Device', 'User'>, D2, $User, 'Input'
               ) ▶₄ #vr.9 )
          case Receive_UserDevice
          by contradiction /* from formulas */
        qed
      next
        case Receive_UserDevice_case_2
        solve( In_UD( <'AskForInput', 'Device', 'User'>, D2, $User, 'Input'
               ) ▶₄ #vr.9 )
          case Receive_UserDevice
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case NDev_SendNonce_2_case_5
  solve( (Cp_1 =
          cmac((
                <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>+
                <fst(~m), '2'>),
               Np_1))  ∥
         (∃ mk mo.
           ((mk+mo) =
            (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>+
             <fst(~m), '2'>)) ∧
           (mk = rm(Cp_1, mo, Np_1))
          ∧
           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
    case case_1
    solve( (Cp_2 =
            cmac((
                  <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>+
                  <snd(~m), '2'>),
                 Np_2))  ∥
           (∃ mk mo.
             ((mk+mo) =
              (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk>))), '1'>+
               <snd(~m), '2'>)) ∧
             (mk = rm(Cp_2, mo, Np_2))
            ∧
             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
      case case_1
      solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User, 'Input'
             ) ▶₃ #vr.9 )
        case Receive_UserDevice_case_1
        solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
               ) ▶₄ #vr.9 )
          case Receive_UserDevice
          solve( splitEqs(2) )
            case split_case_1
            solve( !KU( senc(NetKey,
                             cmac('prsk',
                                  cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                       s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))))
                   ) @ #vk.10 )
              case Prov_Distribute
              solve( (Cd_1 =
                      cmac((
                            <
                             cmac('prck',
                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                       s1(<'g'^~sk.1, 'g'^~sk>))), 
                             '1'>+
                            <fst(~m), '2'>),
                           Nd_1))  ∥
                     (∃ mk mo.
                       ((mk+mo) =
                        (
                         <
                          cmac('prck',
                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                    s1(<'g'^~sk.1, 'g'^~sk>))), 
                          '1'>+
                         <fst(~m), '2'>)) ∧
                       (mk = rm(Cd_1, mo, Nd_1))
                      ∧
                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                case case_1
                solve( (Cd_2 =
                        cmac((
                              <
                               cmac('prck',
                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                         s1(<'g'^~sk.1, 'g'^~sk>))), 
                               '1'>+
                              <snd(~m), '2'>),
                             ~Nd))  ∥
                       (∃ mk mo.
                         ((mk+mo) =
                          (
                           <
                            cmac('prck',
                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                      s1(<'g'^~sk.1, 'g'^~sk>))), 
                            '1'>+
                           <snd(~m), '2'>)) ∧
                         (mk = rm(Cd_2, mo, ~Nd))
                        ∧
                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                  case case_1
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                               s1(<'g'^~sk.1, 'g'^~sk>))), 
                                     '1'>+
                                    <fst(~m), '2'>),
                                   Np_1)
                         ) @ #vk.14 )
                    case NDev_Confirmation_1
                    by contradiction /* cyclic */
                  next
                    case Prov_Confirmation_1
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                 s1(<'g'^~sk.1, 'g'^~sk>))), 
                                       '1'>+
                                      <fst(~m), '2'>),
                                     Nd_1)
                           ) @ #vk.51 )
                      case NDev_Confirmation_1
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk.1, 'g'^~sk>)))
                             ) @ #vk.53 )
                        case NDev_Confirmation_1
                        by contradiction /* cyclic */
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np.1 ) @ #vk.57 )
                          case Prov_SendNonce_1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_cmac
                        solve( !KU( fst(~m) ) @ #vk.55 )
                          case NDev_Confirmation_1
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_1
                          solve( !KU( ~Np.1 ) @ #vk.59 )
                            case Prov_SendNonce_1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_fst
                          solve( !KU( ~m ) @ #vk.59 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( ~Np.1 ) @ #vk.60 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case Prov_Confirmation_1
                      by contradiction /* from formulas */
                    next
                      case c_cmac
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk.1, 'g'^~sk>)))
                             ) @ #vk.53 )
                        case NDev_Confirmation_1
                        by contradiction /* cyclic */
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np.1 ) @ #vk.57 )
                          case Prov_SendNonce_1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_cmac
                        solve( !KU( fst(~m) ) @ #vk.55 )
                          case NDev_Confirmation_1
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_1
                          solve( !KU( ~Np.1 ) @ #vk.59 )
                            case Prov_SendNonce_1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_fst
                          solve( !KU( ~m ) @ #vk.59 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( ~Np.1 ) @ #vk.60 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case c_senc
              solve( !KU( cmac((
                                <
                                 cmac('prck',
                                      cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                           s1(<DHpkP, 'g'^~sk>))), 
                                 '1'>+
                                <fst(~m), '2'>),
                               Np_1)
                     ) @ #vk.14 )
                case NDev_Confirmation_1
                by contradiction /* cyclic */
              next
                case Prov_Confirmation_1
                solve( !KU( ~Np ) @ #vk.14 )
                  case Prov_SendNonce_1
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                               s1(<'g'^~sk.1, 'g'^~sk>))), 
                                     '1'>+
                                    <snd(~m), '2'>),
                                   Np_2)
                         ) @ #vk.14 )
                    case NDev_Confirmation_2
                    by contradiction /* cyclic */
                  next
                    case Prov_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( cmac('prsk',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>)))
                           ) @ #vk.46 )
                      case c_cmac
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk.1, 'g'^~sk>)))
                             ) @ #vk.49 )
                        case NDev_Confirmation_1
                        solve( !KU( snd(~m) ) @ #vk.51 )
                          case NDev_Confirmation_2
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_2
                          solve( (Cd_1 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk.1, 'g'^~sk>))), 
                                         '1'>+
                                        <fst(~m), '2'>),
                                       Nd_1))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk.1, 'g'^~sk>))), 
                                      '1'>+
                                     <fst(~m), '2'>)) ∧
                                   (mk = rm(Cd_1, mo, Nd_1))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( ~Np.1 ) @ #vk.60 )
                              case Prov_SendNonce_2
                              solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                               ),
                                               s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>))
                                     ) @ #vk.58 )
                                case c_cmac
                                solve( !KU( s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.66 )
                                  case c_s1
                                  solve( !KU( s1(<'g'^~sk.1, 'g'^~sk>) ) @ #vk.71 )
                                    case c_s1
                                    solve( !KU( fst(~m) ) @ #vk.68 )
                                      case c_fst
                                      solve( !KU( ~m ) @ #vk.74 )
                                        case Prov_Confirmation_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_snd
                          solve( !KU( ~m ) @ #vk.58 )
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            solve( (Cd_1 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk.1, 'g'^~sk>))), 
                                           '1'>+
                                          <fst(~m), '2'>),
                                         Nd_1))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk.1, 'g'^~sk>))), 
                                        '1'>+
                                       <fst(~m), '2'>)) ∧
                                     (mk = rm(Cd_1, mo, Nd_1))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( ~Np.1 ) @ #vk.61 )
                                case Prov_SendNonce_2
                                solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                 ),
                                                 s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>))
                                       ) @ #vk.59 )
                                  case c_cmac
                                  solve( !KU( s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.67 )
                                    case c_s1
                                    solve( !KU( s1(<'g'^~sk.1, 'g'^~sk>) ) @ #vk.72 )
                                      case c_s1
                                      solve( !KU( fst(~m) ) @ #vk.69 )
                                        case c_fst
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case Prov_Confirmation_1
                        solve( !KU( snd(~m) ) @ #vk.51 )
                          case NDev_Confirmation_2
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_2
                          solve( (Cd_1 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk.1, 'g'^~sk>))), 
                                         '1'>+
                                        <fst(~m), '2'>),
                                       Nd_1))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk.1, 'g'^~sk>))), 
                                      '1'>+
                                     <fst(~m), '2'>)) ∧
                                   (mk = rm(Cd_1, mo, Nd_1))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( ~Np.1 ) @ #vk.59 )
                              case Prov_SendNonce_2
                              solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                               ),
                                               s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>))
                                     ) @ #vk.58 )
                                case c_cmac
                                solve( !KU( s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.65 )
                                  case c_s1
                                  solve( !KU( s1(<'g'^~sk.1, 'g'^~sk>) ) @ #vk.70 )
                                    case c_s1
                                    solve( !KU( fst(~m) ) @ #vk.67 )
                                      case c_fst
                                      solve( !KU( ~m ) @ #vk.73 )
                                        case Prov_Confirmation_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_snd
                          solve( !KU( ~m ) @ #vk.57 )
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            solve( (Cd_1 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk.1, 'g'^~sk>))), 
                                           '1'>+
                                          <fst(~m), '2'>),
                                         Nd_1))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk.1, 'g'^~sk>))), 
                                        '1'>+
                                       <fst(~m), '2'>)) ∧
                                     (mk = rm(Cd_1, mo, Nd_1))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( ~Np.1 ) @ #vk.60 )
                                case Prov_SendNonce_2
                                solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                 ),
                                                 s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>))
                                       ) @ #vk.59 )
                                  case c_cmac
                                  solve( !KU( s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.66 )
                                    case c_s1
                                    solve( !KU( s1(<'g'^~sk.1, 'g'^~sk>) ) @ #vk.71 )
                                      case c_s1
                                      solve( !KU( fst(~m) ) @ #vk.68 )
                                        case c_fst
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_cmac
                        solve( !KU( snd(~m) ) @ #vk.51 )
                          case NDev_Confirmation_2
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_2
                          solve( (Cd_1 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk.1, 'g'^~sk>))), 
                                         '1'>+
                                        <fst(~m), '2'>),
                                       Nd_1))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk.1, 'g'^~sk>))), 
                                      '1'>+
                                     <fst(~m), '2'>)) ∧
                                   (mk = rm(Cd_1, mo, Nd_1))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( ~Np.1 ) @ #vk.59 )
                              case Prov_SendNonce_2
                              solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                               ),
                                               s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>))
                                     ) @ #vk.57 )
                                case c_cmac
                                solve( !KU( s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.65 )
                                  case c_s1
                                  solve( !KU( s1(<'g'^~sk.1, 'g'^~sk>) ) @ #vk.70 )
                                    case c_s1
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk.1, 'g'^~sk>))
                                           ) @ #vk.67 )
                                      case c_cmac
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk.1, 'g'^~sk>))), 
                                                         '1'>+
                                                        <fst(~m), '2'>),
                                                       Nd_1)
                                             ) @ #vk.63 )
                                        case NDev_Confirmation_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.70 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.73 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.74 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.74 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.76 )
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_1
                                        by contradiction /* from formulas */
                                      next
                                        case c_cmac
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.72 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.76 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.77 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.77 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.79 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case c_snd
                          solve( !KU( ~m ) @ #vk.57 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            solve( (Cd_1 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk.1, 'g'^~sk>))), 
                                           '1'>+
                                          <fst(~m), '2'>),
                                         Nd_1))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk.1, 'g'^~sk>))), 
                                        '1'>+
                                       <fst(~m), '2'>)) ∧
                                     (mk = rm(Cd_1, mo, Nd_1))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( ~Np.1 ) @ #vk.60 )
                                case Prov_SendNonce_2
                                solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                 ),
                                                 s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>))
                                       ) @ #vk.58 )
                                  case c_cmac
                                  solve( !KU( s1(<s1(<'g'^~sk.1, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.67 )
                                    case c_s1
                                    solve( !KU( s1(<'g'^~sk.1, 'g'^~sk>) ) @ #vk.72 )
                                      case c_s1
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk.1, 'g'^~sk>))
                                             ) @ #vk.68 )
                                        case c_cmac
                                        solve( !KU( fst(~m) ) @ #vk.70 )
                                          case NDev_Confirmation_1
                                          solve( !KU( cmac((
                                                            <
                                                             cmac('prck',
                                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                                       s1(<'g'^~sk.1, 'g'^~sk>))), 
                                                             '1'>+
                                                            <fst(~m), '2'>),
                                                           Nd_1)
                                                 ) @ #vk.65 )
                                            case NDev_Confirmation_1
                                            solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.72 )
                                              case c_fst
                                              solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                                case NDev_SendPK_InBand
                                                by solve( !KU( ~sk.1 ) @ #vk.76 )
                                              next
                                                case Prov_SendPK_InBand
                                                by solve( !KU( ~sk ) @ #vk.76 )
                                              next
                                                case c_exp
                                                by solve( !KU( ~sk ) @ #vk.78 )
                                              qed
                                            qed
                                          next
                                            case Prov_Confirmation_1
                                            by contradiction /* from formulas */
                                          next
                                            case c_cmac
                                            solve( !KU( ~Nd.1 ) @ #vk.77 )
                                              case NDev_SendNonce_1
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        next
                                          case Prov_Confirmation_1
                                          solve( !KU( cmac((
                                                            <
                                                             cmac('prck',
                                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                                       s1(<'g'^~sk.1, 'g'^~sk>))), 
                                                             '1'>+
                                                            <fst(~m), '2'>),
                                                           Nd_1)
                                                 ) @ #vk.65 )
                                            case NDev_Confirmation_1
                                            solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.72 )
                                              case c_fst
                                              solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                                case NDev_SendPK_InBand
                                                by solve( !KU( ~sk.1 ) @ #vk.76 )
                                              next
                                                case Prov_SendPK_InBand
                                                by solve( !KU( ~sk ) @ #vk.76 )
                                              next
                                                case c_exp
                                                by solve( !KU( ~sk ) @ #vk.78 )
                                              qed
                                            qed
                                          next
                                            case Prov_Confirmation_1
                                            by contradiction /* from formulas */
                                          next
                                            case c_cmac
                                            by contradiction /* cyclic */
                                          qed
                                        next
                                          case c_fst
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case c_cmac
                solve( !KU( cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                             s1(<DHpkP, 'g'^~sk>))), 
                                   '1'>+
                                  <snd(~m), '2'>),
                                 Np_2)
                       ) @ #vk.13 )
                  case NDev_Confirmation_2
                  by contradiction /* cyclic */
                next
                  case Prov_Confirmation_2
                  solve( (Cd_1 =
                          cmac((
                                <
                                 cmac('prck',
                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                           s1(<'g'^~sk.1, 'g'^~sk>))), 
                                 '1'>+
                                <fst(~m), '2'>),
                               Nd_1))  ∥
                         (∃ mk mo.
                           ((mk+mo) =
                            (
                             <
                              cmac('prck',
                                   cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                        s1(<'g'^~sk.1, 'g'^~sk>))), 
                              '1'>+
                             <fst(~m), '2'>)) ∧
                           (mk = rm(Cd_1, mo, Nd_1))
                          ∧
                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                    case case_1
                    solve( !KU( ~Np ) @ #vk.13 )
                      case Prov_SendNonce_2
                      solve( !KU( cmac('prsk',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<s1(<'g'^~sk.1, 'g'^~sk>), ~Np, ~Nd>)))
                             ) @ #vk.49 )
                        case c_cmac
                        solve( !KU( cmac('prck',
                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                              s1(<'g'^~sk.1, 'g'^~sk>)))
                               ) @ #vk.50 )
                          case NDev_Confirmation_1
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_1
                          solve( !KU( fst(~m) ) @ #vk.52 )
                            case c_fst
                            solve( !KU( ~m ) @ #vk.60 )
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        next
                          case c_cmac
                          solve( !KU( fst(~m) ) @ #vk.52 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                          <snd('g'^(~sk*~sk.1)), '2'>),
                                                         s1(<'g'^~sk.1, 'g'^~sk>))), 
                                               '1'>+
                                              <fst(~m), '2'>),
                                             Nd_1)
                                   ) @ #vk.55 )
                              case NDev_Confirmation_1
                              solve( !KU( ~Np.1 ) @ #vk.61 )
                                case Prov_SendNonce_1
                                by contradiction /* cyclic */
                              qed
                            next
                              case Prov_Confirmation_1
                              by contradiction /* from formulas */
                            next
                              case c_cmac
                              solve( !KU( ~Np.1 ) @ #vk.61 )
                                case Prov_SendNonce_1
                                by contradiction /* cyclic */
                              qed
                            qed
                          next
                            case c_fst
                            solve( !KU( ~m ) @ #vk.61 )
                              case NDev_Confirmation_1
                              by contradiction /* cyclic */
                            next
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_1
                              solve( !KU( cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk.1, 'g'^~sk>))), 
                                                 '1'>+
                                                <fst(~m), '2'>),
                                               Nd_1)
                                     ) @ #vk.56 )
                                case NDev_Confirmation_1
                                solve( !KU( ~Np.1 ) @ #vk.62 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_1
                                by contradiction /* from formulas */
                              next
                                case c_cmac
                                solve( !KU( ~Np.1 ) @ #vk.62 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case Prov_Confirmation_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_cmac
                  solve( !KU( cmac('prsk',
                                   cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                        s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>)))
                         ) @ #vk.47 )
                    case c_cmac
                    solve( !KU( cmac('prck',
                                     cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                          s1(<DHpkP, 'g'^~sk>)))
                           ) @ #vk.48 )
                      case NDev_Confirmation_1
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_1
                      solve( !KU( ~Np ) @ #vk.56 )
                        case Prov_SendNonce_1
                        solve( !KU( fst(~m) ) @ #vk.52 )
                          case c_fst
                          solve( !KU( ~m ) @ #vk.59 )
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case c_cmac
                      solve( !KU( fst(~m) ) @ #vk.50 )
                        case NDev_Confirmation_1
                        by contradiction /* cyclic */
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np ) @ #vk.59 )
                          case Prov_SendNonce_1
                          solve( splitEqs(7) )
                            case split_case_1
                            solve( !KU( snd(~m) ) @ #vk.56 )
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_2
                              solve( (Cd_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<z, '1'>+<z.1, '2'>),
                                                       s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>))), 
                                             '1'>+
                                            <fst(~m), '2'>),
                                           Nd_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<z, '1'>+<z.1, '2'>),
                                                    s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>))), 
                                          '1'>+
                                         <fst(~m), '2'>)) ∧
                                       (mk = rm(Cd_1, mo, Nd_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( ~Np.1 ) @ #vk.65 )
                                  case Prov_SendNonce_2
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                         ) @ #vk.61 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.71 )
                                      case c_s1
                                      solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.76 )
                                        case c_s1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<DHpkP, 'g'^~sk>))
                                               ) @ #vk.71 )
                                          case c_cmac
                                          solve( !KU( cmac('prck',
                                                           cmac((<z, '1'>+<z.1, '2'>),
                                                                s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>)))
                                                 ) @ #vk.72 )
                                            case c_cmac
                                            solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.57 )
                                              case c_exp
                                              by solve( !KU( ~sk.1 ) @ #vk.85 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_snd
                              solve( !KU( ~m ) @ #vk.63 )
                                case NDev_Confirmation_2
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2
                                solve( (Cd_1 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<z, '1'>+<z.1, '2'>),
                                                         s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>))), 
                                               '1'>+
                                              <fst(~m), '2'>),
                                             Nd_1))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<z, '1'>+<z.1, '2'>),
                                                      s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>))), 
                                            '1'>+
                                           <fst(~m), '2'>)) ∧
                                         (mk = rm(Cd_1, mo, Nd_1))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( ~Np.1 ) @ #vk.66 )
                                    case Prov_SendNonce_2
                                    solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                     s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                           ) @ #vk.62 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.72 )
                                        case c_s1
                                        solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.77 )
                                          case c_s1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<DHpkP, 'g'^~sk>))
                                                 ) @ #vk.72 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<z, '1'>+<z.1, '2'>),
                                                                  s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>)))
                                                   ) @ #vk.73 )
                                              case c_cmac
                                              solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.58 )
                                                case c_exp
                                                by solve( !KU( ~sk.1 ) @ #vk.86 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case split_case_2
                            solve( !KU( snd(~m) ) @ #vk.56 )
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_2
                              solve( (Cd_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                       s1(<'g'^~sk.1, DHpkD>))), 
                                             '1'>+
                                            <fst(~m), '2'>),
                                           Nd_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                    s1(<'g'^~sk.1, DHpkD>))), 
                                          '1'>+
                                         <fst(~m), '2'>)) ∧
                                       (mk = rm(Cd_1, mo, Nd_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( ~Np.1 ) @ #vk.65 )
                                  case Prov_SendNonce_2
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                         ) @ #vk.61 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.71 )
                                      case c_s1
                                      solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.76 )
                                        case c_s1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<DHpkP, 'g'^~sk>))
                                               ) @ #vk.71 )
                                          case c_cmac
                                          solve( !KU( cmac('prck',
                                                           cmac((<fst(ECDHSecret.1), '1'>+
                                                                 <snd(ECDHSecret.1), '2'>),
                                                                s1(<'g'^~sk.1, DHpkD>)))
                                                 ) @ #vk.72 )
                                            case c_cmac
                                            solve( !KU( cmac((
                                                              <
                                                               cmac('prck',
                                                                    cmac((<fst(ECDHSecret.1), '1'>+
                                                                          <snd(ECDHSecret.1), '2'>),
                                                                         s1(<'g'^~sk.1, DHpkD>))), 
                                                               '1'>+
                                                              <fst(~m), '2'>),
                                                             Nd_1)
                                                   ) @ #vk.73 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              by contradiction /* from formulas */
                                            next
                                              case c_cmac
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_snd
                              solve( !KU( ~m ) @ #vk.63 )
                                case NDev_Confirmation_2
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2
                                solve( (Cd_1 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                         s1(<'g'^~sk.1, DHpkD>))), 
                                               '1'>+
                                              <fst(~m), '2'>),
                                             Nd_1))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                      s1(<'g'^~sk.1, DHpkD>))), 
                                            '1'>+
                                           <fst(~m), '2'>)) ∧
                                         (mk = rm(Cd_1, mo, Nd_1))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( ~Np.1 ) @ #vk.66 )
                                    case Prov_SendNonce_2
                                    solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                     s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                           ) @ #vk.62 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.72 )
                                        case c_s1
                                        solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.77 )
                                          case c_s1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<DHpkP, 'g'^~sk>))
                                                 ) @ #vk.72 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(ECDHSecret.1), '1'>+
                                                                   <snd(ECDHSecret.1), '2'>),
                                                                  s1(<'g'^~sk.1, DHpkD>)))
                                                   ) @ #vk.73 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(ECDHSecret.1), '1'>+
                                                                            <snd(ECDHSecret.1), '2'>),
                                                                           s1(<'g'^~sk.1, DHpkD>))), 
                                                                 '1'>+
                                                                <fst(~m), '2'>),
                                                               Nd_1)
                                                     ) @ #vk.74 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_1
                                                by contradiction /* from formulas */
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case c_fst
                        solve( !KU( ~m ) @ #vk.58 )
                          case NDev_Confirmation_1
                          by contradiction /* cyclic */
                        next
                          case NDev_Confirmation_2
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_1
                          solve( !KU( ~Np ) @ #vk.60 )
                            case Prov_SendNonce_1
                            solve( splitEqs(7) )
                              case split_case_1
                              solve( !KU( snd(~m) ) @ #vk.57 )
                                case NDev_Confirmation_2
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2
                                solve( (Cd_1 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<z, '1'>+<z.1, '2'>),
                                                         s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>))), 
                                               '1'>+
                                              <fst(~m), '2'>),
                                             Nd_1))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<z, '1'>+<z.1, '2'>),
                                                      s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>))), 
                                            '1'>+
                                           <fst(~m), '2'>)) ∧
                                         (mk = rm(Cd_1, mo, Nd_1))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( ~Np.1 ) @ #vk.66 )
                                    case Prov_SendNonce_2
                                    solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                     s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                           ) @ #vk.62 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.72 )
                                        case c_s1
                                        solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.77 )
                                          case c_s1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<DHpkP, 'g'^~sk>))
                                                 ) @ #vk.72 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<z, '1'>+<z.1, '2'>),
                                                                  s1(<'g'^~sk.1, <z, z.1>^inv(~sk.1)>)))
                                                   ) @ #vk.73 )
                                              case c_cmac
                                              solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.58 )
                                                case c_exp
                                                by solve( !KU( ~sk.1 ) @ #vk.86 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case c_snd
                                by contradiction /* cyclic */
                              qed
                            next
                              case split_case_2
                              solve( !KU( snd(~m) ) @ #vk.57 )
                                case NDev_Confirmation_2
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2
                                solve( (Cd_1 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                         s1(<'g'^~sk.1, DHpkD>))), 
                                               '1'>+
                                              <fst(~m), '2'>),
                                             Nd_1))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                      s1(<'g'^~sk.1, DHpkD>))), 
                                            '1'>+
                                           <fst(~m), '2'>)) ∧
                                         (mk = rm(Cd_1, mo, Nd_1))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( ~Np.1 ) @ #vk.66 )
                                    case Prov_SendNonce_2
                                    solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                     s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>))
                                           ) @ #vk.62 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<DHpkP, 'g'^~sk>), Np_2, ~Nd>) ) @ #vk.72 )
                                        case c_s1
                                        solve( !KU( s1(<DHpkP, 'g'^~sk>) ) @ #vk.77 )
                                          case c_s1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<DHpkP, 'g'^~sk>))
                                                 ) @ #vk.72 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(ECDHSecret.1), '1'>+
                                                                   <snd(ECDHSecret.1), '2'>),
                                                                  s1(<'g'^~sk.1, DHpkD>)))
                                                   ) @ #vk.73 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(ECDHSecret.1), '1'>+
                                                                            <snd(ECDHSecret.1), '2'>),
                                                                           s1(<'g'^~sk.1, DHpkD>))), 
                                                                 '1'>+
                                                                <fst(~m), '2'>),
                                                               Nd_1)
                                                     ) @ #vk.74 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_1
                                                by contradiction /* from formulas */
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case c_snd
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case split_case_2
            solve( !KU( senc(NetKey,
                             cmac('prsk',
                                  cmac((<z, '1'>+<z.1, '2'>),
                                       s1(<s1(<<z, z.1>^inv(~sk), 'g'^~sk>), Np_2, ~Nd>))))
                   ) @ #vk.10 )
              case c_senc
              solve( !KU( cmac((
                                <
                                 cmac('prck',
                                      cmac((<z, '1'>+<z.1, '2'>), s1(<<z, z.1>^inv(~sk), 'g'^~sk>))), 
                                 '1'>+
                                <fst(~m), '2'>),
                               Np_1)
                     ) @ #vk.14 )
                case NDev_Confirmation_1
                by contradiction /* cyclic */
              next
                case c_cmac
                solve( !KU( cmac((
                                  <
                                   cmac('prck',
                                        cmac((<z, '1'>+<z.1, '2'>), s1(<<z, z.1>^inv(~sk), 'g'^~sk>))), 
                                   '1'>+
                                  <snd(~m), '2'>),
                                 Np_2)
                       ) @ #vk.13 )
                  case NDev_Confirmation_2
                  by contradiction /* cyclic */
                next
                  case c_cmac
                  solve( !KU( <z, z.1>^inv(~sk) ) @ #vk.15 )
                    case c_exp
                    by solve( !KU( ~sk ) @ #vk.58 )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case Receive_UserDevice_case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma Noninj_Agreement_Prov:
  all-traces
  "∀ prov ndev m #i.
    (Commit_Prov( prov, ndev, m ) @ #i) ⇒
    (∃ #j. Running_NDev( ndev, m ) @ #j)"
/*
guarded formula characterizing all counter-examples:
"∃ prov ndev m #i.
  (Commit_Prov( prov, ndev, m ) @ #i)
 ∧
  ∀ #j. (Running_NDev( ndev, m ) @ #j) ⇒ ⊥"
*/
simplify
solve( ProvDistributed( prov, NetKey, ReadOOBPK, ReadStaticOOB,
                        SecureOption, ndev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI,
                        AuthValue_In, AuthValue_1, AuthValue_2, PKType_D, OutputOOB_D,
                        InputOOB_D, StaticOOB_D, PKType_P, AuthMethod_P, skP, DHpkP, DHpkD,
                        ECDHSecret, Np_1, ConfirmSALT, ECDH1, ECDH2, CK, Cp_1, Cd_1, Nd_1, Np_2,
                        Cp_2, Cd_2, Nd_2, ProvisioningSALT, SessionKey, ProvData, DevKey
       ) ▶₁ #i )
  case Prov_Distribute_case_1
  solve( (Cd_1 =
          cmac((<z, '2'>+
                <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
               ),
               Nd_1))  ∥
         (∃ mk mo.
           ((mk+mo) =
            (<z, '2'>+
             <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
            )) ∧
           (mk = rm(Cd_1, mo, Nd_1))
          ∧
           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
    case case_1
    solve( (Cd_2 =
            cmac((<z.1, '2'>+
                  <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
                 ),
                 Nd_2))  ∥
           (∃ mk mo.
             ((mk+mo) =
              (<z.1, '2'>+
               <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
              )) ∧
             (mk = rm(Cd_2, mo, Nd_2))
            ∧
             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
      case case_1
      solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User, 'Input'
             ) ▶₂ #vr.11 )
        case Receive_UserDevice_case_1
        solve( In_UD( <'Display', 'Device', 'User'>, ndev, $User, AuthValue_In
               ) ▶₃ #vr.11 )
          case Receive_UserDevice
          solve( splitEqs(2) )
            case split_case_1
            solve( !KU( cmac((
                              <
                               cmac('prck',
                                    cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                         s1(<'g'^~sk, DHpkD>))), 
                               '1'>+
                              <fst(~random), '2'>),
                             Nd_1)
                   ) @ #vk.13 )
              case NDev_Confirmation_1
              solve( !KU( ~Nd ) @ #vk.13 )
                case NDev_SendNonce_1
                solve( (Cp_1 =
                        cmac((
                              <
                               cmac('prck',
                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                               '1'>+
                              <fst(~random), '2'>),
                             Np_1))  ∥
                       (∃ mk mo.
                         ((mk+mo) =
                          (
                           <
                            cmac('prck',
                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                      s1(<'g'^~sk, 'g'^~sk.1>))), 
                            '1'>+
                           <fst(~random), '2'>)) ∧
                         (mk = rm(Cp_1, mo, Np_1))
                        ∧
                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                  case case_1
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                     '1'>+
                                    <snd(~random), '2'>),
                                   Nd_2)
                         ) @ #vk.13 )
                    case NDev_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case Prov_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                       '1'>+
                                      <fst(~random), '2'>),
                                     Np_1)
                           ) @ #vk.46 )
                      case NDev_Confirmation_1
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_1
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk, 'g'^~sk.1>)))
                             ) @ #vk.49 )
                        case NDev_Confirmation_1
                        solve( !KU( snd(~random) ) @ #vk.51 )
                          case NDev_Confirmation_2
                          solve( !KU( ~Nd.1 ) @ #vk.57 )
                            case NDev_SendNonce_2
                            solve( (Cp_2 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                                           '1'>+
                                          <snd(~random), '2'>),
                                         Np_2))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>))), 
                                        '1'>+
                                       <snd(~random), '2'>)) ∧
                                     (mk = rm(Cp_2, mo, Np_2))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( fst(~random) ) @ #vk.57 )
                                case c_fst
                                solve( !KU( ~random ) @ #vk.60 )
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_2
                          solve( !KU( ~Np.1 ) @ #vk.55 )
                            case Prov_SendNonce_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_snd
                          solve( !KU( ~random ) @ #vk.55 )
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.58 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( fst(~random) ) @ #vk.58 )
                                  case c_fst
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_2
                            solve( !KU( ~Np.1 ) @ #vk.56 )
                              case Prov_SendNonce_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Prov_Confirmation_1
                        solve( !KU( snd(~random) ) @ #vk.51 )
                          case NDev_Confirmation_2
                          solve( !KU( ~Nd.1 ) @ #vk.57 )
                            case NDev_SendNonce_2
                            solve( (Cp_2 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                                           '1'>+
                                          <snd(~random), '2'>),
                                         Np_2))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>))), 
                                        '1'>+
                                       <snd(~random), '2'>)) ∧
                                     (mk = rm(Cp_2, mo, Np_2))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( fst(~random) ) @ #vk.57 )
                                case c_fst
                                solve( !KU( ~random ) @ #vk.60 )
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_2
                          solve( !KU( ~Np.1 ) @ #vk.55 )
                            case Prov_SendNonce_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_snd
                          solve( !KU( ~random ) @ #vk.55 )
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.58 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( fst(~random) ) @ #vk.58 )
                                  case c_fst
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_2
                            solve( !KU( ~Np.1 ) @ #vk.56 )
                              case Prov_SendNonce_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case c_cmac
                        solve( !KU( snd(~random) ) @ #vk.51 )
                          case NDev_Confirmation_2
                          solve( !KU( ~Nd.1 ) @ #vk.57 )
                            case NDev_SendNonce_2
                            solve( (Cp_2 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                                           '1'>+
                                          <snd(~random), '2'>),
                                         Np_2))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>))), 
                                        '1'>+
                                       <snd(~random), '2'>)) ∧
                                     (mk = rm(Cp_2, mo, Np_2))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                               ),
                                               s1(<'g'^~sk, 'g'^~sk.1>))
                                     ) @ #vk.57 )
                                case c_cmac
                                solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.63 )
                                  case c_s1
                                  solve( !KU( cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2)
                                         ) @ #vk.63 )
                                    case NDev_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_cmac
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_2
                          solve( !KU( ~Np.1 ) @ #vk.55 )
                            case Prov_SendNonce_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_snd
                          solve( !KU( ~random ) @ #vk.55 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.58 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                 ),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))
                                       ) @ #vk.58 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.65 )
                                    case c_s1
                                    solve( !KU( fst(~random) ) @ #vk.65 )
                                      case NDev_Confirmation_1
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~random), '2'>),
                                                       Np_2)
                                             ) @ #vk.65 )
                                        case NDev_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_2
                                        solve( !KU( ~Np.1 ) @ #vk.66 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case Prov_Confirmation_1
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~random), '2'>),
                                                       Np_2)
                                             ) @ #vk.65 )
                                        case NDev_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_2
                                        solve( !KU( ~Np.1 ) @ #vk.66 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case c_fst
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            solve( !KU( ~Np.1 ) @ #vk.56 )
                              case Prov_SendNonce_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_cmac
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk, 'g'^~sk.1>)))
                             ) @ #vk.50 )
                        case NDev_Confirmation_1
                        by contradiction /* cyclic */
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np ) @ #vk.56 )
                          case Prov_SendNonce_1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_cmac
                        solve( !KU( snd(~random) ) @ #vk.52 )
                          case NDev_Confirmation_2
                          solve( !KU( ~Nd.1 ) @ #vk.60 )
                            case NDev_SendNonce_2
                            solve( (Cp_2 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                                           '1'>+
                                          <snd(~random), '2'>),
                                         Np_2))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>))), 
                                        '1'>+
                                       <snd(~random), '2'>)) ∧
                                     (mk = rm(Cp_2, mo, Np_2))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( fst(~random) ) @ #vk.58 )
                                case NDev_Confirmation_1
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1
                                solve( !KU( ~Np ) @ #vk.63 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_fst
                                solve( !KU( ~random ) @ #vk.63 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_1
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_2
                          solve( !KU( ~Np.1 ) @ #vk.58 )
                            case Prov_SendNonce_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_snd
                          solve( !KU( ~random ) @ #vk.58 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.61 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( fst(~random) ) @ #vk.59 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( ~Np ) @ #vk.64 )
                                    case Prov_SendNonce_1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_fst
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            solve( !KU( ~Np.1 ) @ #vk.59 )
                              case Prov_SendNonce_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Prov_Confirmation_1
              by contradiction /* from formulas */
            next
              case c_cmac
              solve( !KU( cmac((
                                <
                                 cmac('prck',
                                      cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                           s1(<'g'^~sk, DHpkD>))), 
                                 '1'>+
                                <snd(~random), '2'>),
                               Nd_2)
                     ) @ #vk.12 )
                case NDev_Confirmation_2
                solve( (Cp_1 =
                        cmac((
                              <
                               cmac('prck',
                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                               '1'>+
                              <fst(~random), '2'>),
                             Np_1))  ∥
                       (∃ mk mo.
                         ((mk+mo) =
                          (
                           <
                            cmac('prck',
                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                      s1(<'g'^~sk, 'g'^~sk.1>))), 
                            '1'>+
                           <fst(~random), '2'>)) ∧
                         (mk = rm(Cp_1, mo, Np_1))
                        ∧
                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                  case case_1
                  solve( !KU( ~Nd ) @ #vk.12 )
                    case NDev_SendNonce_2
                    solve( (Cp_2 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <snd(~random), '2'>),
                                 Np_2))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <snd(~random), '2'>)) ∧
                             (mk = rm(Cp_2, mo, Np_2))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk, 'g'^~sk.1>)))
                             ) @ #vk.49 )
                        case NDev_Confirmation_1
                        solve( !KU( fst(~random) ) @ #vk.51 )
                          case c_fst
                          solve( !KU( ~random ) @ #vk.58 )
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np ) @ #vk.57 )
                          case Prov_SendNonce_1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_cmac
                        solve( !KU( fst(~random) ) @ #vk.51 )
                          case NDev_Confirmation_1
                          solve( !KU( cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Np_1)
                                 ) @ #vk.55 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                          <snd('g'^(~sk*~sk.1)), '2'>),
                                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                                               '1'>+
                                              <snd(~random), '2'>),
                                             Np_2)
                                   ) @ #vk.54 )
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_2
                              solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                               ),
                                               s1(<'g'^~sk, 'g'^~sk.1>))
                                     ) @ #vk.58 )
                                case c_cmac
                                solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.63 )
                                  case c_s1
                                  solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.65 )
                                    case c_fst
                                    solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.67 )
                                      case NDev_SendPK_InBand
                                      by solve( !KU( ~sk ) @ #vk.68 )
                                    next
                                      case Prov_SendPK_InBand
                                      by solve( !KU( ~sk.1 ) @ #vk.68 )
                                    next
                                      case c_exp
                                      by solve( !KU( ~sk ) @ #vk.70 )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_cmac
                              solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                               ),
                                               s1(<'g'^~sk, 'g'^~sk.1>))
                                     ) @ #vk.60 )
                                case c_cmac
                                solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.66 )
                                  case c_s1
                                  solve( !KU( snd(~random) ) @ #vk.67 )
                                    case NDev_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.70 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.70 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.71 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case c_cmac
                            by contradiction /* cyclic */
                          qed
                        next
                          case Prov_Confirmation_1
                          solve( !KU( ~Np ) @ #vk.59 )
                            case Prov_SendNonce_1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_fst
                          solve( !KU( ~random ) @ #vk.59 )
                            case NDev_Confirmation_1
                            solve( !KU( cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                          <snd('g'^(~sk*~sk.1)), '2'>),
                                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                                               '1'>+
                                              <fst(~random), '2'>),
                                             Np_1)
                                   ) @ #vk.56 )
                              case NDev_Confirmation_1
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_1
                              solve( !KU( cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <snd(~random), '2'>),
                                               Np_2)
                                     ) @ #vk.55 )
                                case NDev_Confirmation_2
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2
                                solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                 ),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))
                                       ) @ #vk.59 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.65 )
                                    case c_s1
                                    solve( !KU( snd(~random) ) @ #vk.66 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case c_snd
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              next
                                case c_cmac
                                solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                 ),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))
                                       ) @ #vk.61 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.67 )
                                    case c_s1
                                    solve( !KU( snd(~random) ) @ #vk.68 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case c_snd
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_cmac
                              by contradiction /* cyclic */
                            qed
                          next
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( ~Np ) @ #vk.60 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Prov_Confirmation_2
                by contradiction /* from formulas */
              next
                case c_cmac
                solve( !KU( cmac('prck',
                                 cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                      s1(<'g'^~sk, DHpkD>)))
                       ) @ #vk.46 )
                  case NDev_Confirmation_1
                  solve( !KU( ~Nd ) @ #vk.54 )
                    case NDev_SendNonce_1
                    solve( (Cp_1 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <fst(~random), '2'>),
                                 Np_1))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <fst(~random), '2'>)) ∧
                             (mk = rm(Cp_1, mo, Np_1))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( fst(~random) ) @ #vk.51 )
                        case c_fst
                        solve( !KU( ~random ) @ #vk.57 )
                          case NDev_Confirmation_2
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case Prov_Confirmation_1
                  solve( !KU( ~Np ) @ #vk.52 )
                    case Prov_SendNonce_1
                    by contradiction /* cyclic */
                  qed
                next
                  case c_cmac
                  solve( !KU( fst(~random) ) @ #vk.48 )
                    case NDev_Confirmation_1
                    solve( !KU( ~Nd ) @ #vk.57 )
                      case NDev_SendNonce_1
                      solve( (Cp_1 =
                              cmac((
                                    <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), '1'>+
                                    <fst(~random), '2'>),
                                   Np_1))  ∥
                             (∃ mk mo.
                               ((mk+mo) =
                                (
                                 <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), '1'>+
                                 <fst(~random), '2'>)) ∧
                               (mk = rm(Cp_1, mo, Np_1))
                              ∧
                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                        case case_1
                        solve( splitEqs(8) )
                          case split_case_1
                          solve( !KU( snd(~random) ) @ #vk.55 )
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.63 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<z, '1'>+<z.1, '2'>),
                                                       s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<z, '1'>+<z.1, '2'>),
                                                    s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                 s1(<'g'^~sk, DHpkD>))
                                       ) @ #vk.60 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.69 )
                                    case c_s1
                                    solve( !KU( cmac('prck',
                                                     cmac((<z, '1'>+<z.1, '2'>),
                                                          s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                           ) @ #vk.67 )
                                      case c_cmac
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<z, '1'>+<z.1, '2'>),
                                                                   s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <fst(~random), '2'>),
                                                       Np_1)
                                             ) @ #vk.67 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_2
                            solve( !KU( ~Np.1 ) @ #vk.61 )
                              case Prov_SendNonce_2
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_snd
                            solve( !KU( ~random ) @ #vk.61 )
                              case NDev_Confirmation_1
                              by contradiction /* cyclic */
                            next
                              case NDev_Confirmation_2
                              solve( !KU( ~Nd.1 ) @ #vk.64 )
                                case NDev_SendNonce_2
                                solve( (Cp_2 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<z, '1'>+<z.1, '2'>),
                                                         s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                               '1'>+
                                              <snd(~random), '2'>),
                                             Np_2))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<z, '1'>+<z.1, '2'>),
                                                      s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                            '1'>+
                                           <snd(~random), '2'>)) ∧
                                         (mk = rm(Cp_2, mo, Np_2))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<'g'^~sk, DHpkD>))
                                         ) @ #vk.61 )
                                    case c_cmac
                                    solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.70 )
                                      case c_s1
                                      solve( !KU( cmac('prck',
                                                       cmac((<z, '1'>+<z.1, '2'>),
                                                            s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                             ) @ #vk.68 )
                                        case c_cmac
                                        solve( !KU( cmac((
                                                          <
                                                           cmac('prck',
                                                                cmac((<z, '1'>+<z.1, '2'>),
                                                                     s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                           '1'>+
                                                          <fst(~random), '2'>),
                                                         Np_1)
                                               ) @ #vk.68 )
                                          case NDev_Confirmation_1
                                          by contradiction /* cyclic */
                                        next
                                          case c_cmac
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_2_case_1
                              solve( !KU( ~Np.1 ) @ #vk.62 )
                                case Prov_SendNonce_2
                                by contradiction /* cyclic */
                              qed
                            next
                              case Prov_Confirmation_2_case_2
                              solve( !KU( ~Np.1 ) @ #vk.62 )
                                case Prov_SendNonce_2
                                by contradiction /* cyclic */
                              qed
                            next
                              case Prov_Confirmation_2_case_3
                              solve( !KU( ~Np.1 ) @ #vk.62 )
                                case Prov_SendNonce_2
                                by contradiction /* cyclic */
                              qed
                            next
                              case Prov_Confirmation_2_case_4
                              solve( !KU( ~Np.1 ) @ #vk.62 )
                                case Prov_SendNonce_2
                                by contradiction /* cyclic */
                              qed
                            next
                              case Prov_Confirmation_2_case_5
                              solve( !KU( ~Np.1 ) @ #vk.62 )
                                case Prov_SendNonce_2
                                by contradiction /* cyclic */
                              qed
                            next
                              case Prov_Confirmation_2_case_6
                              solve( !KU( ~Np.1 ) @ #vk.62 )
                                case Prov_SendNonce_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case split_case_2
                          solve( !KU( snd(~random) ) @ #vk.55 )
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.63 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                       s1(<DHpkP, 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                    s1(<DHpkP, 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                 s1(<'g'^~sk, DHpkD>))
                                       ) @ #vk.60 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.69 )
                                    case c_s1
                                    solve( !KU( cmac('prck',
                                                     cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                          s1(<DHpkP, 'g'^~sk.1>)))
                                           ) @ #vk.67 )
                                      case c_cmac
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst(ECDHSecret.1), '1'>+
                                                                    <snd(ECDHSecret.1), '2'>),
                                                                   s1(<DHpkP, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <fst(~random), '2'>),
                                                       Np_1)
                                             ) @ #vk.67 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_1
                                        solve( !KU( ~Np ) @ #vk.66 )
                                          case Prov_SendNonce_1
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_2
                            solve( !KU( ~Np.1 ) @ #vk.61 )
                              case Prov_SendNonce_2
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_snd
                            solve( !KU( ~random ) @ #vk.61 )
                              case NDev_Confirmation_1
                              by contradiction /* cyclic */
                            next
                              case NDev_Confirmation_2
                              solve( !KU( ~Nd.1 ) @ #vk.64 )
                                case NDev_SendNonce_2
                                solve( (Cp_2 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                         s1(<DHpkP, 'g'^~sk.1>))), 
                                               '1'>+
                                              <snd(~random), '2'>),
                                             Np_2))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                      s1(<DHpkP, 'g'^~sk.1>))), 
                                            '1'>+
                                           <snd(~random), '2'>)) ∧
                                         (mk = rm(Cp_2, mo, Np_2))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<'g'^~sk, DHpkD>))
                                         ) @ #vk.61 )
                                    case c_cmac
                                    solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.70 )
                                      case c_s1
                                      solve( !KU( cmac('prck',
                                                       cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>
                                                            ),
                                                            s1(<DHpkP, 'g'^~sk.1>)))
                                             ) @ #vk.68 )
                                        case c_cmac
                                        solve( !KU( cmac((
                                                          <
                                                           cmac('prck',
                                                                cmac((<fst(ECDHSecret.1), '1'>+
                                                                      <snd(ECDHSecret.1), '2'>),
                                                                     s1(<DHpkP, 'g'^~sk.1>))), 
                                                           '1'>+
                                                          <fst(~random), '2'>),
                                                         Np_1)
                                               ) @ #vk.68 )
                                          case NDev_Confirmation_1
                                          by contradiction /* cyclic */
                                        next
                                          case Prov_Confirmation_1
                                          solve( !KU( ~Np ) @ #vk.67 )
                                            case Prov_SendNonce_1
                                            by contradiction /* cyclic */
                                          qed
                                        next
                                          case c_cmac
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_2_case_1
                              solve( !KU( ~Np.1 ) @ #vk.62 )
                                case Prov_SendNonce_2
                                by contradiction /* cyclic */
                              qed
                            next
                              case Prov_Confirmation_2_case_2
                              solve( !KU( ~Np.1 ) @ #vk.62 )
                                case Prov_SendNonce_2
                                by contradiction /* cyclic */
                              qed
                            next
                              case Prov_Confirmation_2_case_3
                              solve( !KU( ~Np.1 ) @ #vk.62 )
                                case Prov_SendNonce_2
                                by contradiction /* cyclic */
                              qed
                            next
                              case Prov_Confirmation_2_case_4
                              solve( !KU( ~Np.1 ) @ #vk.62 )
                                case Prov_SendNonce_2
                                by contradiction /* cyclic */
                              qed
                            next
                              case Prov_Confirmation_2_case_5
                              solve( !KU( ~Np.1 ) @ #vk.62 )
                                case Prov_SendNonce_2
                                by contradiction /* cyclic */
                              qed
                            next
                              case Prov_Confirmation_2_case_6
                              solve( !KU( ~Np.1 ) @ #vk.62 )
                                case Prov_SendNonce_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case Prov_Confirmation_1
                    solve( !KU( ~Np ) @ #vk.54 )
                      case Prov_SendNonce_1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_fst
                    solve( !KU( ~random ) @ #vk.54 )
                      case NDev_Confirmation_1
                      solve( !KU( ~Nd ) @ #vk.58 )
                        case NDev_SendNonce_1
                        solve( (Cp_1 =
                                cmac((
                                      <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), '1'
                                      >+
                                      <fst(~random), '2'>),
                                     Np_1))  ∥
                               (∃ mk mo.
                                 ((mk+mo) =
                                  (
                                   <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), '1'>+
                                   <fst(~random), '2'>)) ∧
                                 (mk = rm(Cp_1, mo, Np_1))
                                ∧
                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                          case case_1
                          solve( splitEqs(8) )
                            case split_case_1
                            solve( !KU( snd(~random) ) @ #vk.56 )
                              case NDev_Confirmation_2
                              solve( !KU( ~Nd.1 ) @ #vk.64 )
                                case NDev_SendNonce_2
                                solve( (Cp_2 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<z, '1'>+<z.1, '2'>),
                                                         s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                               '1'>+
                                              <snd(~random), '2'>),
                                             Np_2))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<z, '1'>+<z.1, '2'>),
                                                      s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                            '1'>+
                                           <snd(~random), '2'>)) ∧
                                         (mk = rm(Cp_2, mo, Np_2))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<'g'^~sk, DHpkD>))
                                         ) @ #vk.61 )
                                    case c_cmac
                                    solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.70 )
                                      case c_s1
                                      solve( !KU( cmac('prck',
                                                       cmac((<z, '1'>+<z.1, '2'>),
                                                            s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                             ) @ #vk.68 )
                                        case c_cmac
                                        solve( !KU( cmac((
                                                          <
                                                           cmac('prck',
                                                                cmac((<z, '1'>+<z.1, '2'>),
                                                                     s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                           '1'>+
                                                          <fst(~random), '2'>),
                                                         Np_1)
                                               ) @ #vk.68 )
                                          case NDev_Confirmation_1
                                          by contradiction /* cyclic */
                                        next
                                          case c_cmac
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case c_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case split_case_2
                            solve( !KU( snd(~random) ) @ #vk.56 )
                              case NDev_Confirmation_2
                              solve( !KU( ~Nd.1 ) @ #vk.64 )
                                case NDev_SendNonce_2
                                solve( (Cp_2 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                         s1(<DHpkP, 'g'^~sk.1>))), 
                                               '1'>+
                                              <snd(~random), '2'>),
                                             Np_2))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                      s1(<DHpkP, 'g'^~sk.1>))), 
                                            '1'>+
                                           <snd(~random), '2'>)) ∧
                                         (mk = rm(Cp_2, mo, Np_2))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<'g'^~sk, DHpkD>))
                                         ) @ #vk.61 )
                                    case c_cmac
                                    solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.70 )
                                      case c_s1
                                      solve( !KU( cmac('prck',
                                                       cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>
                                                            ),
                                                            s1(<DHpkP, 'g'^~sk.1>)))
                                             ) @ #vk.68 )
                                        case c_cmac
                                        solve( !KU( cmac((
                                                          <
                                                           cmac('prck',
                                                                cmac((<fst(ECDHSecret.1), '1'>+
                                                                      <snd(ECDHSecret.1), '2'>),
                                                                     s1(<DHpkP, 'g'^~sk.1>))), 
                                                           '1'>+
                                                          <fst(~random), '2'>),
                                                         Np_1)
                                               ) @ #vk.68 )
                                          case NDev_Confirmation_1
                                          by contradiction /* cyclic */
                                        next
                                          case Prov_Confirmation_1
                                          solve( !KU( ~Np ) @ #vk.67 )
                                            case Prov_SendNonce_1
                                            by contradiction /* cyclic */
                                          qed
                                        next
                                          case c_cmac
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case c_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    next
                      case NDev_Confirmation_2
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_1_case_1
                      solve( !KU( ~Np ) @ #vk.55 )
                        case Prov_SendNonce_1
                        by contradiction /* cyclic */
                      qed
                    next
                      case Prov_Confirmation_1_case_2
                      solve( !KU( ~Np ) @ #vk.55 )
                        case Prov_SendNonce_1
                        by contradiction /* cyclic */
                      qed
                    next
                      case Prov_Confirmation_1_case_3
                      solve( !KU( ~Np ) @ #vk.55 )
                        case Prov_SendNonce_1
                        by contradiction /* cyclic */
                      qed
                    next
                      case Prov_Confirmation_1_case_4
                      solve( !KU( ~Np ) @ #vk.55 )
                        case Prov_SendNonce_1
                        by contradiction /* cyclic */
                      qed
                    next
                      case Prov_Confirmation_1_case_5
                      solve( !KU( ~Np ) @ #vk.55 )
                        case Prov_SendNonce_1
                        by contradiction /* cyclic */
                      qed
                    next
                      case Prov_Confirmation_1_case_6
                      solve( !KU( ~Np ) @ #vk.55 )
                        case Prov_SendNonce_1
                        by contradiction /* cyclic */
                      qed
                    next
                      case Prov_Confirmation_2_case_1
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_2_case_2
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_2_case_3
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_2_case_4
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_2_case_5
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_2_case_6
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          next
            case split_case_2
            solve( !KU( cmac((
                              <
                               cmac('prck',
                                    cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                               '1'>+
                              <fst(~random), '2'>),
                             Nd_1)
                   ) @ #vk.13 )
              case Prov_Confirmation_1
              by contradiction /* from formulas */
            next
              case c_cmac
              solve( !KU( cmac((
                                <
                                 cmac('prck',
                                      cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                                 '1'>+
                                <snd(~random), '2'>),
                               Nd_2)
                     ) @ #vk.12 )
                case Prov_Confirmation_2
                by contradiction /* from formulas */
              next
                case c_cmac
                solve( !KU( <z, z.1>^inv(~sk) ) @ #vk.14 )
                  case c_exp
                  by solve( !KU( ~sk ) @ #vk.56 )
                qed
              qed
            qed
          qed
        qed
      next
        case Receive_UserDevice_case_2
        by solve( In_UD( <'Display', 'Device', 'User'>, ndev, $User, AuthValue_In
                  ) ▶₃ #vr.11 )
      qed
    qed
  qed
next
  case Prov_Distribute_case_2
  solve( (Cd_1 =
          cmac((
                <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                <fst(~m), '2'>),
               Nd_1))  ∥
         (∃ mk mo.
           ((mk+mo) =
            (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
             <fst(~m), '2'>)) ∧
           (mk = rm(Cd_1, mo, Nd_1))
          ∧
           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
    case case_1
    solve( (Cd_2 =
            cmac((
                  <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                  <snd(~m), '2'>),
                 Nd_2))  ∥
           (∃ mk mo.
             ((mk+mo) =
              (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
               <snd(~m), '2'>)) ∧
             (mk = rm(Cd_2, mo, Nd_2))
            ∧
             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
      case case_1
      solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User, 'Input'
             ) ▶₃ #vr.11 )
        case Receive_UserDevice_case_1
        solve( In_UD( <'AskForInput', 'Device', 'User'>, ndev, $User, 'Input'
               ) ▶₄ #vr.11 )
          case Receive_UserDevice
          solve( splitEqs(2) )
            case split_case_1
            solve( !KU( cmac((
                              <
                               cmac('prck',
                                    cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                         s1(<'g'^~sk, DHpkD>))), 
                               '1'>+
                              <fst(~m), '2'>),
                             Nd_1)
                   ) @ #vk.13 )
              case NDev_Confirmation_1
              solve( !KU( ~Nd ) @ #vk.13 )
                case NDev_SendNonce_1
                solve( (Cp_1 =
                        cmac((
                              <
                               cmac('prck',
                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                               '1'>+
                              <fst(~m), '2'>),
                             Np_1))  ∥
                       (∃ mk mo.
                         ((mk+mo) =
                          (
                           <
                            cmac('prck',
                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                      s1(<'g'^~sk, 'g'^~sk.1>))), 
                            '1'>+
                           <fst(~m), '2'>)) ∧
                         (mk = rm(Cp_1, mo, Np_1))
                        ∧
                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                  case case_1
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                     '1'>+
                                    <snd(~m), '2'>),
                                   Nd_2)
                         ) @ #vk.13 )
                    case NDev_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case Prov_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                       '1'>+
                                      <fst(~m), '2'>),
                                     Np_1)
                           ) @ #vk.46 )
                      case NDev_Confirmation_1
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_1
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk, 'g'^~sk.1>)))
                             ) @ #vk.49 )
                        case NDev_Confirmation_1
                        solve( !KU( snd(~m) ) @ #vk.51 )
                          case NDev_Confirmation_2
                          solve( !KU( ~Nd.1 ) @ #vk.57 )
                            case NDev_SendNonce_2
                            solve( (Cp_2 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                                           '1'>+
                                          <snd(~m), '2'>),
                                         Np_2))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>))), 
                                        '1'>+
                                       <snd(~m), '2'>)) ∧
                                     (mk = rm(Cp_2, mo, Np_2))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( fst(~m) ) @ #vk.57 )
                                case c_fst
                                solve( !KU( ~m ) @ #vk.60 )
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_2
                          solve( !KU( ~Np.1 ) @ #vk.55 )
                            case Prov_SendNonce_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_snd
                          solve( !KU( ~m ) @ #vk.55 )
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.58 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~m), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~m), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( fst(~m) ) @ #vk.58 )
                                  case c_fst
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_2
                            solve( !KU( ~Np.1 ) @ #vk.56 )
                              case Prov_SendNonce_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Prov_Confirmation_1
                        solve( !KU( snd(~m) ) @ #vk.51 )
                          case NDev_Confirmation_2
                          solve( !KU( ~Nd.1 ) @ #vk.57 )
                            case NDev_SendNonce_2
                            solve( (Cp_2 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                                           '1'>+
                                          <snd(~m), '2'>),
                                         Np_2))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>))), 
                                        '1'>+
                                       <snd(~m), '2'>)) ∧
                                     (mk = rm(Cp_2, mo, Np_2))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( fst(~m) ) @ #vk.57 )
                                case c_fst
                                solve( !KU( ~m ) @ #vk.60 )
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_2
                          solve( !KU( ~Np.1 ) @ #vk.55 )
                            case Prov_SendNonce_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_snd
                          solve( !KU( ~m ) @ #vk.55 )
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.58 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~m), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~m), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( fst(~m) ) @ #vk.58 )
                                  case c_fst
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_2
                            solve( !KU( ~Np.1 ) @ #vk.56 )
                              case Prov_SendNonce_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case c_cmac
                        solve( !KU( snd(~m) ) @ #vk.51 )
                          case NDev_Confirmation_2
                          solve( !KU( ~Nd.1 ) @ #vk.57 )
                            case NDev_SendNonce_2
                            solve( (Cp_2 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                                           '1'>+
                                          <snd(~m), '2'>),
                                         Np_2))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>))), 
                                        '1'>+
                                       <snd(~m), '2'>)) ∧
                                     (mk = rm(Cp_2, mo, Np_2))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                               ),
                                               s1(<'g'^~sk, 'g'^~sk.1>))
                                     ) @ #vk.57 )
                                case c_cmac
                                solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.63 )
                                  case c_s1
                                  solve( !KU( cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~m), '2'>),
                                                   Np_2)
                                         ) @ #vk.63 )
                                    case NDev_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_cmac
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_2
                          solve( !KU( ~Np.1 ) @ #vk.55 )
                            case Prov_SendNonce_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_snd
                          solve( !KU( ~m ) @ #vk.55 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.58 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~m), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~m), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                 ),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))
                                       ) @ #vk.58 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.65 )
                                    case c_s1
                                    solve( !KU( fst(~m) ) @ #vk.65 )
                                      case NDev_Confirmation_1
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~m), '2'>),
                                                       Np_2)
                                             ) @ #vk.65 )
                                        case NDev_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_2
                                        solve( !KU( ~Np.1 ) @ #vk.66 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case Prov_Confirmation_1
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~m), '2'>),
                                                       Np_2)
                                             ) @ #vk.65 )
                                        case NDev_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_2
                                        solve( !KU( ~Np.1 ) @ #vk.66 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case c_fst
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            solve( !KU( ~Np.1 ) @ #vk.56 )
                              case Prov_SendNonce_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_cmac
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk, 'g'^~sk.1>)))
                             ) @ #vk.50 )
                        case NDev_Confirmation_1
                        by contradiction /* cyclic */
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np ) @ #vk.56 )
                          case Prov_SendNonce_1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_cmac
                        solve( !KU( snd(~m) ) @ #vk.52 )
                          case NDev_Confirmation_2
                          solve( !KU( ~Nd.1 ) @ #vk.60 )
                            case NDev_SendNonce_2
                            solve( (Cp_2 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                                           '1'>+
                                          <snd(~m), '2'>),
                                         Np_2))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>))), 
                                        '1'>+
                                       <snd(~m), '2'>)) ∧
                                     (mk = rm(Cp_2, mo, Np_2))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( fst(~m) ) @ #vk.58 )
                                case NDev_Confirmation_1
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1
                                solve( !KU( ~Np ) @ #vk.63 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_fst
                                solve( !KU( ~m ) @ #vk.63 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_1
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_2
                          solve( !KU( ~Np.1 ) @ #vk.58 )
                            case Prov_SendNonce_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_snd
                          solve( !KU( ~m ) @ #vk.58 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.61 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~m), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~m), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( fst(~m) ) @ #vk.59 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( ~Np ) @ #vk.64 )
                                    case Prov_SendNonce_1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_fst
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            solve( !KU( ~Np.1 ) @ #vk.59 )
                              case Prov_SendNonce_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case Prov_Confirmation_1
              by contradiction /* from formulas */
            next
              case c_cmac
              solve( !KU( cmac((
                                <
                                 cmac('prck',
                                      cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                           s1(<'g'^~sk, DHpkD>))), 
                                 '1'>+
                                <snd(~m), '2'>),
                               Nd_2)
                     ) @ #vk.12 )
                case NDev_Confirmation_2
                solve( (Cp_1 =
                        cmac((
                              <
                               cmac('prck',
                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                               '1'>+
                              <fst(~m), '2'>),
                             Np_1))  ∥
                       (∃ mk mo.
                         ((mk+mo) =
                          (
                           <
                            cmac('prck',
                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                      s1(<'g'^~sk, 'g'^~sk.1>))), 
                            '1'>+
                           <fst(~m), '2'>)) ∧
                         (mk = rm(Cp_1, mo, Np_1))
                        ∧
                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                  case case_1
                  solve( !KU( ~Nd ) @ #vk.12 )
                    case NDev_SendNonce_2
                    solve( (Cp_2 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <snd(~m), '2'>),
                                 Np_2))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <snd(~m), '2'>)) ∧
                             (mk = rm(Cp_2, mo, Np_2))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk, 'g'^~sk.1>)))
                             ) @ #vk.49 )
                        case NDev_Confirmation_1
                        solve( !KU( fst(~m) ) @ #vk.51 )
                          case c_fst
                          solve( !KU( ~m ) @ #vk.58 )
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np ) @ #vk.57 )
                          case Prov_SendNonce_1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_cmac
                        solve( !KU( fst(~m) ) @ #vk.51 )
                          case NDev_Confirmation_1
                          solve( !KU( cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~m), '2'>),
                                           Np_1)
                                 ) @ #vk.55 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                          <snd('g'^(~sk*~sk.1)), '2'>),
                                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                                               '1'>+
                                              <snd(~m), '2'>),
                                             Np_2)
                                   ) @ #vk.54 )
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_2
                              solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                               ),
                                               s1(<'g'^~sk, 'g'^~sk.1>))
                                     ) @ #vk.58 )
                                case c_cmac
                                solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.63 )
                                  case c_s1
                                  solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.65 )
                                    case c_fst
                                    solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.67 )
                                      case NDev_SendPK_InBand
                                      by solve( !KU( ~sk ) @ #vk.68 )
                                    next
                                      case Prov_SendPK_InBand
                                      by solve( !KU( ~sk.1 ) @ #vk.68 )
                                    next
                                      case c_exp
                                      by solve( !KU( ~sk ) @ #vk.70 )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_cmac
                              solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                               ),
                                               s1(<'g'^~sk, 'g'^~sk.1>))
                                     ) @ #vk.60 )
                                case c_cmac
                                solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.66 )
                                  case c_s1
                                  solve( !KU( snd(~m) ) @ #vk.67 )
                                    case NDev_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.70 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~m ) @ #vk.70 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.71 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case c_cmac
                            by contradiction /* cyclic */
                          qed
                        next
                          case Prov_Confirmation_1
                          solve( !KU( ~Np ) @ #vk.59 )
                            case Prov_SendNonce_1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_fst
                          solve( !KU( ~m ) @ #vk.59 )
                            case NDev_Confirmation_1
                            solve( !KU( cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                          <snd('g'^(~sk*~sk.1)), '2'>),
                                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                                               '1'>+
                                              <fst(~m), '2'>),
                                             Np_1)
                                   ) @ #vk.56 )
                              case NDev_Confirmation_1
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_1
                              solve( !KU( cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <snd(~m), '2'>),
                                               Np_2)
                                     ) @ #vk.55 )
                                case NDev_Confirmation_2
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2
                                solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                 ),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))
                                       ) @ #vk.59 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.65 )
                                    case c_s1
                                    solve( !KU( snd(~m) ) @ #vk.66 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case c_snd
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              next
                                case c_cmac
                                solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                 ),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))
                                       ) @ #vk.61 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.67 )
                                    case c_s1
                                    solve( !KU( snd(~m) ) @ #vk.68 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case c_snd
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_cmac
                              by contradiction /* cyclic */
                            qed
                          next
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( ~Np ) @ #vk.60 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Prov_Confirmation_2
                by contradiction /* from formulas */
              next
                case c_cmac
                solve( !KU( cmac('prck',
                                 cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                      s1(<'g'^~sk, DHpkD>)))
                       ) @ #vk.46 )
                  case NDev_Confirmation_1
                  solve( !KU( ~Nd ) @ #vk.54 )
                    case NDev_SendNonce_1
                    solve( (Cp_1 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <fst(~m), '2'>),
                                 Np_1))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <fst(~m), '2'>)) ∧
                             (mk = rm(Cp_1, mo, Np_1))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( fst(~m) ) @ #vk.51 )
                        case c_fst
                        solve( !KU( ~m ) @ #vk.57 )
                          case NDev_Confirmation_2
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case Prov_Confirmation_1
                  solve( !KU( ~Np ) @ #vk.52 )
                    case Prov_SendNonce_1
                    by contradiction /* cyclic */
                  qed
                next
                  case c_cmac
                  solve( !KU( fst(~m) ) @ #vk.48 )
                    case NDev_Confirmation_1
                    solve( !KU( ~Nd ) @ #vk.57 )
                      case NDev_SendNonce_1
                      solve( (Cp_1 =
                              cmac((
                                    <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), '1'>+
                                    <fst(~m), '2'>),
                                   Np_1))  ∥
                             (∃ mk mo.
                               ((mk+mo) =
                                (
                                 <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), '1'>+
                                 <fst(~m), '2'>)) ∧
                               (mk = rm(Cp_1, mo, Np_1))
                              ∧
                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                        case case_1
                        solve( splitEqs(7) )
                          case split_case_1
                          solve( !KU( snd(~m) ) @ #vk.55 )
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.63 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<z, '1'>+<z.1, '2'>),
                                                       s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~m), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<z, '1'>+<z.1, '2'>),
                                                    s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~m), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                 s1(<'g'^~sk, DHpkD>))
                                       ) @ #vk.60 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.69 )
                                    case c_s1
                                    solve( !KU( cmac('prck',
                                                     cmac((<z, '1'>+<z.1, '2'>),
                                                          s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                           ) @ #vk.67 )
                                      case c_cmac
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<z, '1'>+<z.1, '2'>),
                                                                   s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <fst(~m), '2'>),
                                                       Np_1)
                                             ) @ #vk.67 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_2
                            solve( !KU( ~Np.1 ) @ #vk.61 )
                              case Prov_SendNonce_2
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_snd
                            solve( !KU( ~m ) @ #vk.61 )
                              case NDev_Confirmation_1
                              by contradiction /* cyclic */
                            next
                              case NDev_Confirmation_2
                              solve( !KU( ~Nd.1 ) @ #vk.64 )
                                case NDev_SendNonce_2
                                solve( (Cp_2 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<z, '1'>+<z.1, '2'>),
                                                         s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                               '1'>+
                                              <snd(~m), '2'>),
                                             Np_2))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<z, '1'>+<z.1, '2'>),
                                                      s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                            '1'>+
                                           <snd(~m), '2'>)) ∧
                                         (mk = rm(Cp_2, mo, Np_2))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<'g'^~sk, DHpkD>))
                                         ) @ #vk.61 )
                                    case c_cmac
                                    solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.70 )
                                      case c_s1
                                      solve( !KU( cmac('prck',
                                                       cmac((<z, '1'>+<z.1, '2'>),
                                                            s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                             ) @ #vk.68 )
                                        case c_cmac
                                        solve( !KU( cmac((
                                                          <
                                                           cmac('prck',
                                                                cmac((<z, '1'>+<z.1, '2'>),
                                                                     s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                           '1'>+
                                                          <fst(~m), '2'>),
                                                         Np_1)
                                               ) @ #vk.68 )
                                          case NDev_Confirmation_1
                                          by contradiction /* cyclic */
                                        next
                                          case c_cmac
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_2
                              solve( !KU( ~Np.1 ) @ #vk.62 )
                                case Prov_SendNonce_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        next
                          case split_case_2
                          solve( !KU( snd(~m) ) @ #vk.55 )
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.63 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                       s1(<DHpkP, 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~m), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                    s1(<DHpkP, 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~m), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                 s1(<'g'^~sk, DHpkD>))
                                       ) @ #vk.60 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.69 )
                                    case c_s1
                                    solve( !KU( cmac('prck',
                                                     cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                          s1(<DHpkP, 'g'^~sk.1>)))
                                           ) @ #vk.67 )
                                      case c_cmac
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst(ECDHSecret.1), '1'>+
                                                                    <snd(ECDHSecret.1), '2'>),
                                                                   s1(<DHpkP, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <fst(~m), '2'>),
                                                       Np_1)
                                             ) @ #vk.67 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_1
                                        solve( !KU( ~Np ) @ #vk.66 )
                                          case Prov_SendNonce_1
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_2
                            solve( !KU( ~Np.1 ) @ #vk.61 )
                              case Prov_SendNonce_2
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_snd
                            solve( !KU( ~m ) @ #vk.61 )
                              case NDev_Confirmation_1
                              by contradiction /* cyclic */
                            next
                              case NDev_Confirmation_2
                              solve( !KU( ~Nd.1 ) @ #vk.64 )
                                case NDev_SendNonce_2
                                solve( (Cp_2 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                         s1(<DHpkP, 'g'^~sk.1>))), 
                                               '1'>+
                                              <snd(~m), '2'>),
                                             Np_2))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                      s1(<DHpkP, 'g'^~sk.1>))), 
                                            '1'>+
                                           <snd(~m), '2'>)) ∧
                                         (mk = rm(Cp_2, mo, Np_2))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<'g'^~sk, DHpkD>))
                                         ) @ #vk.61 )
                                    case c_cmac
                                    solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.70 )
                                      case c_s1
                                      solve( !KU( cmac('prck',
                                                       cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>
                                                            ),
                                                            s1(<DHpkP, 'g'^~sk.1>)))
                                             ) @ #vk.68 )
                                        case c_cmac
                                        solve( !KU( cmac((
                                                          <
                                                           cmac('prck',
                                                                cmac((<fst(ECDHSecret.1), '1'>+
                                                                      <snd(ECDHSecret.1), '2'>),
                                                                     s1(<DHpkP, 'g'^~sk.1>))), 
                                                           '1'>+
                                                          <fst(~m), '2'>),
                                                         Np_1)
                                               ) @ #vk.68 )
                                          case NDev_Confirmation_1
                                          by contradiction /* cyclic */
                                        next
                                          case Prov_Confirmation_1
                                          solve( !KU( ~Np ) @ #vk.67 )
                                            case Prov_SendNonce_1
                                            by contradiction /* cyclic */
                                          qed
                                        next
                                          case c_cmac
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_2
                              solve( !KU( ~Np.1 ) @ #vk.62 )
                                case Prov_SendNonce_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case Prov_Confirmation_1
                    solve( !KU( ~Np ) @ #vk.54 )
                      case Prov_SendNonce_1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_fst
                    solve( !KU( ~m ) @ #vk.54 )
                      case NDev_Confirmation_1
                      solve( !KU( ~Nd ) @ #vk.58 )
                        case NDev_SendNonce_1
                        solve( (Cp_1 =
                                cmac((
                                      <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), '1'
                                      >+
                                      <fst(~m), '2'>),
                                     Np_1))  ∥
                               (∃ mk mo.
                                 ((mk+mo) =
                                  (
                                   <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), '1'>+
                                   <fst(~m), '2'>)) ∧
                                 (mk = rm(Cp_1, mo, Np_1))
                                ∧
                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                          case case_1
                          solve( splitEqs(7) )
                            case split_case_1
                            solve( !KU( snd(~m) ) @ #vk.56 )
                              case NDev_Confirmation_2
                              solve( !KU( ~Nd.1 ) @ #vk.64 )
                                case NDev_SendNonce_2
                                solve( (Cp_2 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<z, '1'>+<z.1, '2'>),
                                                         s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                               '1'>+
                                              <snd(~m), '2'>),
                                             Np_2))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<z, '1'>+<z.1, '2'>),
                                                      s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                            '1'>+
                                           <snd(~m), '2'>)) ∧
                                         (mk = rm(Cp_2, mo, Np_2))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<'g'^~sk, DHpkD>))
                                         ) @ #vk.61 )
                                    case c_cmac
                                    solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.70 )
                                      case c_s1
                                      solve( !KU( cmac('prck',
                                                       cmac((<z, '1'>+<z.1, '2'>),
                                                            s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                             ) @ #vk.68 )
                                        case c_cmac
                                        solve( !KU( cmac((
                                                          <
                                                           cmac('prck',
                                                                cmac((<z, '1'>+<z.1, '2'>),
                                                                     s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                           '1'>+
                                                          <fst(~m), '2'>),
                                                         Np_1)
                                               ) @ #vk.68 )
                                          case NDev_Confirmation_1
                                          by contradiction /* cyclic */
                                        next
                                          case c_cmac
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case c_snd
                              by contradiction /* cyclic */
                            qed
                          next
                            case split_case_2
                            solve( !KU( snd(~m) ) @ #vk.56 )
                              case NDev_Confirmation_2
                              solve( !KU( ~Nd.1 ) @ #vk.64 )
                                case NDev_SendNonce_2
                                solve( (Cp_2 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                         s1(<DHpkP, 'g'^~sk.1>))), 
                                               '1'>+
                                              <snd(~m), '2'>),
                                             Np_2))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                      s1(<DHpkP, 'g'^~sk.1>))), 
                                            '1'>+
                                           <snd(~m), '2'>)) ∧
                                         (mk = rm(Cp_2, mo, Np_2))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                   s1(<'g'^~sk, DHpkD>))
                                         ) @ #vk.61 )
                                    case c_cmac
                                    solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.70 )
                                      case c_s1
                                      solve( !KU( cmac('prck',
                                                       cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>
                                                            ),
                                                            s1(<DHpkP, 'g'^~sk.1>)))
                                             ) @ #vk.68 )
                                        case c_cmac
                                        solve( !KU( cmac((
                                                          <
                                                           cmac('prck',
                                                                cmac((<fst(ECDHSecret.1), '1'>+
                                                                      <snd(ECDHSecret.1), '2'>),
                                                                     s1(<DHpkP, 'g'^~sk.1>))), 
                                                           '1'>+
                                                          <fst(~m), '2'>),
                                                         Np_1)
                                               ) @ #vk.68 )
                                          case NDev_Confirmation_1
                                          by contradiction /* cyclic */
                                        next
                                          case Prov_Confirmation_1
                                          solve( !KU( ~Np ) @ #vk.67 )
                                            case Prov_SendNonce_1
                                            by contradiction /* cyclic */
                                          qed
                                        next
                                          case c_cmac
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case c_snd
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    next
                      case NDev_Confirmation_2
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_1
                      solve( !KU( ~Np ) @ #vk.55 )
                        case Prov_SendNonce_1
                        by contradiction /* cyclic */
                      qed
                    next
                      case Prov_Confirmation_2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          next
            case split_case_2
            solve( !KU( cmac((
                              <
                               cmac('prck',
                                    cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                               '1'>+
                              <fst(~m), '2'>),
                             Nd_1)
                   ) @ #vk.13 )
              case Prov_Confirmation_1
              by contradiction /* from formulas */
            next
              case c_cmac
              solve( !KU( cmac((
                                <
                                 cmac('prck',
                                      cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                                 '1'>+
                                <snd(~m), '2'>),
                               Nd_2)
                     ) @ #vk.12 )
                case Prov_Confirmation_2
                by contradiction /* from formulas */
              next
                case c_cmac
                solve( !KU( <z, z.1>^inv(~sk) ) @ #vk.14 )
                  case c_exp
                  by solve( !KU( ~sk ) @ #vk.56 )
                qed
              qed
            qed
          qed
        qed
      next
        case Receive_UserDevice_case_2
        solve( In_UD( <'AskForInput', 'Device', 'User'>, ndev, $User, 'Input'
               ) ▶₄ #vr.11 )
          case Receive_UserDevice
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case Prov_Distribute_case_3
  solve( (Cd_1 =
          cmac((
                <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                <fst(~random), '2'>),
               Nd_1))  ∥
         (∃ mk mo.
           ((mk+mo) =
            (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
             <fst(~random), '2'>)) ∧
           (mk = rm(Cd_1, mo, Nd_1))
          ∧
           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
    case case_1
    solve( (Cd_2 =
            cmac((
                  <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                  <snd(~random), '2'>),
                 Nd_2))  ∥
           (∃ mk mo.
             ((mk+mo) =
              (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
               <snd(~random), '2'>)) ∧
             (mk = rm(Cd_2, mo, Nd_2))
            ∧
             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
      case case_1
      solve( splitEqs(2) )
        case split_case_1
        solve( !KU( cmac((
                          <
                           cmac('prck',
                                cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                     s1(<'g'^~sk, DHpkD>))), 
                           '1'>+
                          <fst(~random), '2'>),
                         Nd_1)
               ) @ #vk.14 )
          case NDev_Confirmation_1_case_1
          solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                 ) ▶₂ #vr.24 )
            case Receive_UserDevice
            solve( In_UD( <'Display', 'Device', 'User'>, ndev, $User.1, AuthValue_In
                   ) ▶₃ #vr.24 )
              case Receive_UserDevice
              by contradiction /* from formulas */
            qed
          qed
        next
          case NDev_Confirmation_1_case_2
          solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, AuthValue_In
                 ) ▶₂ #vr.24 )
            case Receive_UserDevice
            solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                   ) ▶₃ #vr.24 )
              case Receive_UserDevice
              solve( !KU( ~Nd ) @ #vk.14 )
                case NDev_SendNonce_1
                solve( (Cp_1 =
                        cmac((
                              <
                               cmac('prck',
                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                               '1'>+
                              <fst(~random), '2'>),
                             Np_1))  ∥
                       (∃ mk mo.
                         ((mk+mo) =
                          (
                           <
                            cmac('prck',
                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                      s1(<'g'^~sk, 'g'^~sk.1>))), 
                            '1'>+
                           <fst(~random), '2'>)) ∧
                         (mk = rm(Cp_1, mo, Np_1))
                        ∧
                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                  case case_1
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                     '1'>+
                                    <snd(~random), '2'>),
                                   Nd_2)
                         ) @ #vk.14 )
                    case NDev_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case Prov_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                       '1'>+
                                      <fst(~random), '2'>),
                                     Np_1)
                           ) @ #vk.40 )
                      case NDev_Confirmation_1
                      by contradiction /* cyclic */
                    next
                      case Prov_Confirmation_1
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk, 'g'^~sk.1>)))
                             ) @ #vk.51 )
                        case NDev_Confirmation_1
                        solve( !KU( snd(~random) ) @ #vk.53 )
                          case NDev_Confirmation_2
                          solve( !KU( ~Nd.1 ) @ #vk.59 )
                            case NDev_SendNonce_2
                            solve( (Cp_2 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                                           '1'>+
                                          <snd(~random), '2'>),
                                         Np_2))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>))), 
                                        '1'>+
                                       <snd(~random), '2'>)) ∧
                                     (mk = rm(Cp_2, mo, Np_2))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( fst(~random) ) @ #vk.59 )
                                case c_fst
                                solve( !KU( ~random ) @ #vk.62 )
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_2
                          solve( !KU( ~Np.1 ) @ #vk.57 )
                            case Prov_SendNonce_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_snd
                          solve( !KU( ~random ) @ #vk.57 )
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.60 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( fst(~random) ) @ #vk.60 )
                                  case c_fst
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_2
                            solve( !KU( ~Np.1 ) @ #vk.58 )
                              case Prov_SendNonce_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case Prov_Confirmation_1
                        solve( !KU( snd(~random) ) @ #vk.53 )
                          case NDev_Confirmation_2
                          solve( !KU( ~Nd.1 ) @ #vk.59 )
                            case NDev_SendNonce_2
                            solve( (Cp_2 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                                           '1'>+
                                          <snd(~random), '2'>),
                                         Np_2))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>))), 
                                        '1'>+
                                       <snd(~random), '2'>)) ∧
                                     (mk = rm(Cp_2, mo, Np_2))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( fst(~random) ) @ #vk.59 )
                                case c_fst
                                solve( !KU( ~random ) @ #vk.62 )
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_2
                          solve( !KU( ~Np.1 ) @ #vk.57 )
                            case Prov_SendNonce_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_snd
                          solve( !KU( ~random ) @ #vk.57 )
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.60 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( fst(~random) ) @ #vk.60 )
                                  case c_fst
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_2
                            solve( !KU( ~Np.1 ) @ #vk.58 )
                              case Prov_SendNonce_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      next
                        case c_cmac
                        solve( !KU( snd(~random) ) @ #vk.53 )
                          case NDev_Confirmation_2
                          solve( !KU( ~Nd.1 ) @ #vk.59 )
                            case NDev_SendNonce_2
                            solve( (Cp_2 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                                           '1'>+
                                          <snd(~random), '2'>),
                                         Np_2))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>))), 
                                        '1'>+
                                       <snd(~random), '2'>)) ∧
                                     (mk = rm(Cp_2, mo, Np_2))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                               ),
                                               s1(<'g'^~sk, 'g'^~sk.1>))
                                     ) @ #vk.59 )
                                case c_cmac
                                solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.65 )
                                  case c_s1
                                  solve( !KU( cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2)
                                         ) @ #vk.65 )
                                    case NDev_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.66 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_cmac
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_2
                          solve( !KU( ~Np.1 ) @ #vk.57 )
                            case Prov_SendNonce_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_snd
                          solve( !KU( ~random ) @ #vk.57 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.60 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                 ),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))
                                       ) @ #vk.60 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.67 )
                                    case c_s1
                                    solve( !KU( fst(~random) ) @ #vk.67 )
                                      case NDev_Confirmation_1
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~random), '2'>),
                                                       Np_2)
                                             ) @ #vk.67 )
                                        case NDev_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_2
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case Prov_Confirmation_1
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~random), '2'>),
                                                       Np_2)
                                             ) @ #vk.67 )
                                        case NDev_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_2
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case c_fst
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            solve( !KU( ~Np.1 ) @ #vk.58 )
                              case Prov_SendNonce_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    next
                      case c_cmac
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk, 'g'^~sk.1>)))
                             ) @ #vk.52 )
                        case NDev_Confirmation_1
                        by contradiction /* cyclic */
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np ) @ #vk.58 )
                          case Prov_SendNonce_1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_cmac
                        solve( !KU( snd(~random) ) @ #vk.54 )
                          case NDev_Confirmation_2
                          solve( !KU( ~Nd.1 ) @ #vk.62 )
                            case NDev_SendNonce_2
                            solve( (Cp_2 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                                           '1'>+
                                          <snd(~random), '2'>),
                                         Np_2))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>))), 
                                        '1'>+
                                       <snd(~random), '2'>)) ∧
                                     (mk = rm(Cp_2, mo, Np_2))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( fst(~random) ) @ #vk.60 )
                                case NDev_Confirmation_1
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1
                                solve( !KU( ~Np ) @ #vk.65 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_fst
                                solve( !KU( ~random ) @ #vk.65 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_1
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_2
                          solve( !KU( ~Np.1 ) @ #vk.60 )
                            case Prov_SendNonce_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_snd
                          solve( !KU( ~random ) @ #vk.60 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.63 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( fst(~random) ) @ #vk.61 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( ~Np ) @ #vk.66 )
                                    case Prov_SendNonce_1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_fst
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            solve( !KU( ~Np.1 ) @ #vk.61 )
                              case Prov_SendNonce_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case NDev_Confirmation_2_case_1
          solve( (Cp_1 =
                  cmac((<z, '2'>+
                        <
                         cmac('prck',
                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                         '1'>
                       ),
                       Np_1))  ∥
                 (∃ mk mo.
                   ((mk+mo) =
                    (<z, '2'>+
                     <
                      cmac('prck',
                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                s1(<'g'^~sk, 'g'^~sk.1>))), 
                      '1'>
                    )) ∧
                   (mk = rm(Cp_1, mo, Np_1))
                  ∧
                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
            case case_1
            solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                   ) ▶₂ #vr.26 )
              case Receive_UserDevice
              by solve( In_UD( <'Display', 'Device', 'User'>, ndev, $User.1,
                               <z, fst(~random)>
                        ) ▶₃ #vr.26 )
            qed
          qed
        next
          case NDev_Confirmation_2_case_2
          solve( (Cp_1 =
                  cmac((<z, '2'>+
                        <
                         cmac('prck',
                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                         '1'>
                       ),
                       Np_1))  ∥
                 (∃ mk mo.
                   ((mk+mo) =
                    (<z, '2'>+
                     <
                      cmac('prck',
                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                s1(<'g'^~sk, 'g'^~sk.1>))), 
                      '1'>
                    )) ∧
                   (mk = rm(Cp_1, mo, Np_1))
                  ∧
                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
            case case_1
            by solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1,
                             <z, fst(~random)>
                      ) ▶₂ #vr.26 )
          qed
        next
          case Prov_Confirmation_1
          by contradiction /* from formulas */
        next
          case c_cmac
          solve( !KU( cmac((
                            <
                             cmac('prck',
                                  cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                       s1(<'g'^~sk, DHpkD>))), 
                             '1'>+
                            <snd(~random), '2'>),
                           Nd_2)
                 ) @ #vk.13 )
            case NDev_Confirmation_1_case_1
            solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                   ) ▶₂ #vr.24 )
              case Receive_UserDevice
              by solve( In_UD( <'Display', 'Device', 'User'>, ndev, $User.1,
                               <snd(~random), x>
                        ) ▶₃ #vr.24 )
            qed
          next
            case NDev_Confirmation_1_case_2
            by solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1,
                             <snd(~random), x>
                      ) ▶₂ #vr.24 )
          next
            case NDev_Confirmation_2_case_1
            solve( (Cp_1 =
                    cmac((<z, '2'>+
                          <
                           cmac('prck',
                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                           '1'>
                         ),
                         Np_1))  ∥
                   (∃ mk mo.
                     ((mk+mo) =
                      (<z, '2'>+
                       <
                        cmac('prck',
                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                  s1(<'g'^~sk, 'g'^~sk.1>))), 
                        '1'>
                      )) ∧
                     (mk = rm(Cp_1, mo, Np_1))
                    ∧
                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
              case case_1
              solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                     ) ▶₂ #vr.26 )
                case Receive_UserDevice
                solve( In_UD( <'Display', 'Device', 'User'>, ndev, $User.1, AuthValue_In
                       ) ▶₃ #vr.26 )
                  case Receive_UserDevice
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case NDev_Confirmation_2_case_2
            solve( (Cp_1 =
                    cmac((<z, '2'>+
                          <
                           cmac('prck',
                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                           '1'>
                         ),
                         Np_1))  ∥
                   (∃ mk mo.
                     ((mk+mo) =
                      (<z, '2'>+
                       <
                        cmac('prck',
                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                  s1(<'g'^~sk, 'g'^~sk.1>))), 
                        '1'>
                      )) ∧
                     (mk = rm(Cp_1, mo, Np_1))
                    ∧
                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
              case case_1
              solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, AuthValue_In
                     ) ▶₂ #vr.26 )
                case Receive_UserDevice
                solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                       ) ▶₃ #vr.26 )
                  case Receive_UserDevice
                  solve( !KU( ~Nd ) @ #vk.13 )
                    case NDev_SendNonce_2
                    solve( (Cp_2 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <snd(~random), '2'>),
                                 Np_2))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <snd(~random), '2'>)) ∧
                             (mk = rm(Cp_2, mo, Np_2))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk, 'g'^~sk.1>)))
                             ) @ #vk.34 )
                        case NDev_Confirmation_1
                        solve( !KU( fst(~random) ) @ #vk.36 )
                          case c_fst
                          solve( !KU( ~random ) @ #vk.60 )
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np ) @ #vk.59 )
                          case Prov_SendNonce_1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_cmac
                        solve( !KU( fst(~random) ) @ #vk.36 )
                          case NDev_Confirmation_1
                          solve( !KU( cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Np_1)
                                 ) @ #vk.49 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                          <snd('g'^(~sk*~sk.1)), '2'>),
                                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                                               '1'>+
                                              <snd(~random), '2'>),
                                             Np_2)
                                   ) @ #vk.48 )
                              case NDev_Confirmation_2
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_2
                              solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                               ),
                                               s1(<'g'^~sk, 'g'^~sk.1>))
                                     ) @ #vk.60 )
                                case c_cmac
                                solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.65 )
                                  case c_s1
                                  solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                    case c_fst
                                    solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.69 )
                                      case NDev_SendPK_InBand
                                      by solve( !KU( ~sk ) @ #vk.70 )
                                    next
                                      case Prov_SendPK_InBand
                                      by solve( !KU( ~sk.1 ) @ #vk.70 )
                                    next
                                      case c_exp
                                      by solve( !KU( ~sk ) @ #vk.72 )
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_cmac
                              solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                               ),
                                               s1(<'g'^~sk, 'g'^~sk.1>))
                                     ) @ #vk.62 )
                                case c_cmac
                                solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.68 )
                                  case c_s1
                                  solve( !KU( snd(~random) ) @ #vk.69 )
                                    case NDev_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.72 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.72 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.73 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case c_cmac
                            by contradiction /* cyclic */
                          qed
                        next
                          case Prov_Confirmation_1
                          solve( !KU( ~Np ) @ #vk.61 )
                            case Prov_SendNonce_1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_fst
                          solve( !KU( ~random ) @ #vk.61 )
                            case NDev_Confirmation_1
                            solve( !KU( cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                          <snd('g'^(~sk*~sk.1)), '2'>),
                                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                                               '1'>+
                                              <fst(~random), '2'>),
                                             Np_1)
                                   ) @ #vk.50 )
                              case NDev_Confirmation_1
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_1
                              solve( !KU( cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <snd(~random), '2'>),
                                               Np_2)
                                     ) @ #vk.49 )
                                case NDev_Confirmation_2
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2
                                solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                 ),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))
                                       ) @ #vk.61 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.67 )
                                    case c_s1
                                    solve( !KU( snd(~random) ) @ #vk.68 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case c_snd
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              next
                                case c_cmac
                                solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                 ),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))
                                       ) @ #vk.63 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.69 )
                                    case c_s1
                                    solve( !KU( snd(~random) ) @ #vk.70 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case c_snd
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case c_cmac
                              by contradiction /* cyclic */
                            qed
                          next
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( ~Np ) @ #vk.62 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case Prov_Confirmation_2
            by contradiction /* from formulas */
          next
            case c_cmac
            solve( !KU( cmac('prck',
                             cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                  s1(<'g'^~sk, DHpkD>)))
                   ) @ #vk.35 )
              case NDev_Confirmation_1_case_1
              solve( !KU( ~Nd ) @ #vk.49 )
                case NDev_SendNonce_1
                solve( (Cp_1 =
                        cmac((
                              <
                               cmac('prck',
                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                               '1'>+
                              <fst(~random.1), '2'>),
                             Np_1))  ∥
                       (∃ mk mo.
                         ((mk+mo) =
                          (
                           <
                            cmac('prck',
                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                      s1(<'g'^~sk, 'g'^~sk.1>))), 
                            '1'>+
                           <fst(~random.1), '2'>)) ∧
                         (mk = rm(Cp_1, mo, Np_1))
                        ∧
                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                  case case_1
                  solve( !KU( fst(~random) ) @ #vk.38 )
                    case Prov_Confirmation_1
                    solve( !KU( ~Np ) @ #vk.61 )
                      case Prov_SendNonce_1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_fst
                    solve( !KU( ~random ) @ #vk.61 )
                      case Prov_Confirmation_1
                      solve( !KU( ~Np ) @ #vk.62 )
                        case Prov_SendNonce_1
                        by contradiction /* cyclic */
                      qed
                    next
                      case Prov_Confirmation_2
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case NDev_Confirmation_1_case_2
              solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                     ) ▶₂ #vr.27 )
                case Receive_UserDevice
                solve( In_UD( <'Display', 'Device', 'User'>, ndev, $User.1, AuthValue_In
                       ) ▶₃ #vr.27 )
                  case Receive_UserDevice
                  by contradiction /* from formulas */
                qed
              qed
            next
              case NDev_Confirmation_1_case_3
              solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, AuthValue_In
                     ) ▶₂ #vr.27 )
                case Receive_UserDevice
                solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                       ) ▶₃ #vr.27 )
                  case Receive_UserDevice
                  solve( !KU( ~Nd ) @ #vk.48 )
                    case NDev_SendNonce_1
                    solve( (Cp_1 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <fst(~random), '2'>),
                                 Np_1))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <fst(~random), '2'>)) ∧
                             (mk = rm(Cp_1, mo, Np_1))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( fst(~random) ) @ #vk.38 )
                        case c_fst
                        solve( !KU( ~random ) @ #vk.59 )
                          case NDev_Confirmation_2
                          by contradiction /* cyclic */
                        next
                          case Prov_Confirmation_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case NDev_Confirmation_1_case_4
              solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                     ) ▶₃ #vr.27 )
                case Receive_UserDevice
                by solve( In_UD( <'AskForInput', 'Device', 'User'>, ndev, $User.1,
                                 'Input'
                          ) ▶₄ #vr.27 )
              qed
            next
              case NDev_Confirmation_1_case_5
              solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                     ) ▶₃ #vr.27 )
                case Receive_UserDevice
                by contradiction /* from formulas */
              qed
            next
              case Prov_Confirmation_1
              solve( !KU( ~Np ) @ #vk.41 )
                case Prov_SendNonce_1
                by contradiction /* cyclic */
              qed
            next
              case c_cmac
              solve( !KU( fst(~random) ) @ #vk.37 )
                case NDev_Confirmation_1_case_1
                solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                       ) ▶₂ #vr.27 )
                  case Receive_UserDevice
                  solve( In_UD( <'Display', 'Device', 'User'>, ndev, $User.1, ~random
                         ) ▶₃ #vr.27 )
                    case Receive_UserDevice
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case NDev_Confirmation_1_case_2
                solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                       ) ▶₂ #vr.27 )
                  case Receive_UserDevice
                  solve( In_UD( <'Display', 'Device', 'User'>, ndev, $User.1, ~random
                         ) ▶₃ #vr.27 )
                    case Receive_UserDevice
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case NDev_Confirmation_1_case_3
                solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                       ) ▶₂ #vr.27 )
                  case Receive_UserDevice
                  solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                         ) ▶₃ #vr.27 )
                    case Receive_UserDevice
                    solve( !KU( ~Nd ) @ #vk.51 )
                      case NDev_SendNonce_1
                      solve( (Cp_1 =
                              cmac((
                                    <
                                     cmac('prck',
                                          cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                               s1(<DHpkP, 'g'^~sk.1>))), 
                                     '1'>+
                                    <fst(~random), '2'>),
                                   Np_1))  ∥
                             (∃ mk mo.
                               ((mk+mo) =
                                (
                                 <
                                  cmac('prck',
                                       cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                            s1(<DHpkP, 'g'^~sk.1>))), 
                                  '1'>+
                                 <fst(~random), '2'>)) ∧
                               (mk = rm(Cp_1, mo, Np_1))
                              ∧
                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                        case case_1
                        solve( !KU( snd(~random) ) @ #vk.42 )
                          case NDev_Confirmation_2
                          solve( !KU( ~Nd.1 ) @ #vk.65 )
                            case NDev_SendNonce_2
                            solve( (Cp_2 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                     s1(<DHpkP, 'g'^~sk.1>))), 
                                           '1'>+
                                          <snd(~random), '2'>),
                                         Np_2))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                  s1(<DHpkP, 'g'^~sk.1>))), 
                                        '1'>+
                                       <snd(~random), '2'>)) ∧
                                     (mk = rm(Cp_2, mo, Np_2))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                               s1(<'g'^~sk, DHpkD>))
                                     ) @ #vk.45 )
                                case c_cmac
                                solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.71 )
                                  case c_s1
                                  solve( !KU( cmac('prck',
                                                   cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                        s1(<DHpkP, 'g'^~sk.1>)))
                                         ) @ #vk.61 )
                                    case c_cmac
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(ECDHSecret.1), '1'>+
                                                                  <snd(ECDHSecret.1), '2'>),
                                                                 s1(<DHpkP, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <fst(~random), '2'>),
                                                     Np_1)
                                           ) @ #vk.61 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_1
                                      solve( !KU( ~Np ) @ #vk.68 )
                                        case Prov_SendNonce_1
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case c_cmac
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_2
                          solve( !KU( ~Np.1 ) @ #vk.63 )
                            case Prov_SendNonce_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_snd
                          solve( !KU( ~random ) @ #vk.63 )
                            case NDev_Confirmation_1_case_1
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_1_case_2
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_1_case_3
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_1_case_4
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_1_case_5
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_1_case_6
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_1
                            solve( !KU( ~Nd.1 ) @ #vk.66 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>),
                                                       s1(<DHpkP, 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>),
                                                    s1(<DHpkP, 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                 s1(<'g'^~sk, DHpkD>))
                                       ) @ #vk.46 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.72 )
                                    case c_s1
                                    solve( !KU( cmac('prck',
                                                     cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>),
                                                          s1(<DHpkP, 'g'^~sk.1>)))
                                           ) @ #vk.62 )
                                      case c_cmac
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst(DHpkP^~sk.1), '1'>+
                                                                    <snd(DHpkP^~sk.1), '2'>),
                                                                   s1(<DHpkP, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <fst(~random), '2'>),
                                                       Np_1)
                                             ) @ #vk.62 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_2_case_2
                            solve( !KU( ~Nd.1 ) @ #vk.66 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                       s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                    s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                 s1(<'g'^~sk, DHpkD>))
                                       ) @ #vk.46 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.72 )
                                    case c_s1
                                    solve( !KU( cmac('prck',
                                                     cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                          s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>)))
                                           ) @ #vk.62 )
                                      case c_cmac
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst(ECDHSecret.1), '1'>+
                                                                    <snd(ECDHSecret.1), '2'>),
                                                                   s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1
                                                                      >))), 
                                                         '1'>+
                                                        <fst(~random), '2'>),
                                                       Np_1)
                                             ) @ #vk.62 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_2_case_3
                            solve( !KU( ~Nd.1 ) @ #vk.66 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(x^(~sk.1*x.1)), '1'>+<snd(x^(~sk.1*x.1)), '2'>),
                                                       s1(<x^x.1, 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(x^(~sk.1*x.1)), '1'>+<snd(x^(~sk.1*x.1)), '2'>),
                                                    s1(<x^x.1, 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                 s1(<'g'^~sk, DHpkD>))
                                       ) @ #vk.46 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.72 )
                                    case c_s1
                                    solve( !KU( cmac('prck',
                                                     cmac((<fst(x^(~sk.1*x.1)), '1'>+<snd(x^(~sk.1*x.1)), '2'>
                                                          ),
                                                          s1(<x^x.1, 'g'^~sk.1>)))
                                           ) @ #vk.62 )
                                      case c_cmac
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                    <snd(x^(~sk.1*x.1)), '2'>),
                                                                   s1(<x^x.1, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <fst(~random), '2'>),
                                                       Np_1)
                                             ) @ #vk.62 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_1
                                        solve( !KU( ~Np ) @ #vk.69 )
                                          case Prov_SendNonce_1
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_2_case_4
                            solve( !KU( ~Nd.1 ) @ #vk.66 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                       s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                    s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                 s1(<'g'^~sk, DHpkD>))
                                       ) @ #vk.46 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.72 )
                                    case c_s1
                                    solve( !KU( cmac('prck',
                                                     cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                          s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>)))
                                           ) @ #vk.62 )
                                      case c_cmac
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst(x^inv(x.1)), '1'>+
                                                                    <snd(x^inv(x.1)), '2'>),
                                                                   s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <fst(~random), '2'>),
                                                       Np_1)
                                             ) @ #vk.62 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_2_case_5
                            solve( !KU( ~Nd.1 ) @ #vk.66 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(x^x.1), '1'>+<snd(x^x.1), '2'>),
                                                       s1(<x^(x.1*inv(~sk.1)), 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(x^x.1), '1'>+<snd(x^x.1), '2'>),
                                                    s1(<x^(x.1*inv(~sk.1)), 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( x^(x.1*inv(~sk.1)) ) @ #vk.58 )
                                  case NDev_SendPK_InBand_case_1
                                  by contradiction /* cyclic */
                                next
                                  case NDev_SendPK_InBand_case_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_SendPK_InBand_case_1
                                  by solve( !KU( ~sk.1 ) @ #vk.70 )
                                next
                                  case Prov_SendPK_InBand_case_2
                                  by solve( !KU( ~sk.1 ) @ #vk.72 )
                                next
                                  case c_exp
                                  by solve( !KU( ~sk.1 ) @ #vk.73 )
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_2_case_6
                            solve( !KU( ~Nd.1 ) @ #vk.66 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(x^(x.1*inv(x.2))), '1'>+
                                                        <snd(x^(x.1*inv(x.2))), '2'>),
                                                       s1(<x^(x.1*inv((~sk.1*x.2))), 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(x^(x.1*inv(x.2))), '1'>+<snd(x^(x.1*inv(x.2))), '2'>
                                                    ),
                                                    s1(<x^(x.1*inv((~sk.1*x.2))), 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x.3 y. ((y+x.3) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( x^(x.1*inv((~sk.1*x.2))) ) @ #vk.58 )
                                  case NDev_SendPK_InBand_case_1
                                  by contradiction /* cyclic */
                                next
                                  case NDev_SendPK_InBand_case_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_SendPK_InBand_case_1
                                  by solve( !KU( ~sk.1 ) @ #vk.71 )
                                next
                                  case Prov_SendPK_InBand_case_2
                                  by solve( !KU( ~sk.1 ) @ #vk.73 )
                                next
                                  case c_exp
                                  by solve( !KU( ~sk.1 ) @ #vk.74 )
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_2
                            solve( !KU( ~Np.1 ) @ #vk.64 )
                              case Prov_SendNonce_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case NDev_Confirmation_1_case_4
                solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                       ) ▶₂ #vr.27 )
                  case Receive_UserDevice
                  solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                         ) ▶₃ #vr.27 )
                    case Receive_UserDevice
                    solve( !KU( ~Nd ) @ #vk.51 )
                      case NDev_SendNonce_1
                      solve( (Cp_1 =
                              cmac((
                                    <
                                     cmac('prck',
                                          cmac((<z, '1'>+<z.1, '2'>), s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                     '1'>+
                                    <fst(~random), '2'>),
                                   Np_1))  ∥
                             (∃ mk mo.
                               ((mk+mo) =
                                (
                                 <
                                  cmac('prck',
                                       cmac((<z, '1'>+<z.1, '2'>), s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                  '1'>+
                                 <fst(~random), '2'>)) ∧
                               (mk = rm(Cp_1, mo, Np_1))
                              ∧
                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                        case case_1
                        solve( !KU( snd(~random) ) @ #vk.42 )
                          case NDev_Confirmation_2
                          solve( !KU( ~Nd.1 ) @ #vk.65 )
                            case NDev_SendNonce_2
                            solve( (Cp_2 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<z, '1'>+<z.1, '2'>),
                                                     s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                           '1'>+
                                          <snd(~random), '2'>),
                                         Np_2))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<z, '1'>+<z.1, '2'>),
                                                  s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                        '1'>+
                                       <snd(~random), '2'>)) ∧
                                     (mk = rm(Cp_2, mo, Np_2))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                               s1(<'g'^~sk, DHpkD>))
                                     ) @ #vk.45 )
                                case c_cmac
                                solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.71 )
                                  case c_s1
                                  solve( !KU( cmac('prck',
                                                   cmac((<z, '1'>+<z.1, '2'>),
                                                        s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                         ) @ #vk.61 )
                                    case c_cmac
                                    solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.62 )
                                      case c_exp
                                      by solve( !KU( ~sk.1 ) @ #vk.81 )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_2
                          solve( !KU( ~Np.1 ) @ #vk.63 )
                            case Prov_SendNonce_2
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_snd
                          solve( !KU( ~random ) @ #vk.63 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.66 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<z, '1'>+<z.1, '2'>),
                                                       s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<z, '1'>+<z.1, '2'>),
                                                    s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                 s1(<'g'^~sk, DHpkD>))
                                       ) @ #vk.46 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.72 )
                                    case c_s1
                                    solve( !KU( cmac('prck',
                                                     cmac((<z, '1'>+<z.1, '2'>),
                                                          s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                           ) @ #vk.62 )
                                      case c_cmac
                                      solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.63 )
                                        case c_exp
                                        by solve( !KU( ~sk.1 ) @ #vk.82 )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_2
                            solve( !KU( ~Np.1 ) @ #vk.64 )
                              case Prov_SendNonce_2
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Prov_Confirmation_1
                solve( !KU( ~Np ) @ #vk.43 )
                  case Prov_SendNonce_1
                  by contradiction /* cyclic */
                qed
              next
                case c_fst
                solve( !KU( ~random ) @ #vk.43 )
                  case NDev_Confirmation_1_case_01
                  solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                         ) ▶₂ #vr.27 )
                    case Receive_UserDevice
                    solve( In_UD( <'Display', 'Device', 'User'>, ndev, $User.1, ~random
                           ) ▶₃ #vr.27 )
                      case Receive_UserDevice
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case NDev_Confirmation_1_case_02
                  solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                         ) ▶₂ #vr.27 )
                    case Receive_UserDevice
                    solve( In_UD( <'Display', 'Device', 'User'>, ndev, $User.1, ~random
                           ) ▶₃ #vr.27 )
                      case Receive_UserDevice
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case NDev_Confirmation_1_case_03
                  solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                         ) ▶₂ #vr.27 )
                    case Receive_UserDevice
                    solve( In_UD( <'Display', 'Device', 'User'>, ndev, $User.1, ~random
                           ) ▶₃ #vr.27 )
                      case Receive_UserDevice
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case NDev_Confirmation_1_case_04
                  solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                         ) ▶₂ #vr.27 )
                    case Receive_UserDevice
                    solve( In_UD( <'Display', 'Device', 'User'>, ndev, $User.1, ~random
                           ) ▶₃ #vr.27 )
                      case Receive_UserDevice
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case NDev_Confirmation_1_case_05
                  solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                         ) ▶₂ #vr.27 )
                    case Receive_UserDevice
                    solve( In_UD( <'Display', 'Device', 'User'>, ndev, $User.1, ~random
                           ) ▶₃ #vr.27 )
                      case Receive_UserDevice
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case NDev_Confirmation_1_case_06
                  solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                         ) ▶₂ #vr.27 )
                    case Receive_UserDevice
                    solve( In_UD( <'Display', 'Device', 'User'>, ndev, $User.1, ~random
                           ) ▶₃ #vr.27 )
                      case Receive_UserDevice
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case NDev_Confirmation_1_case_07
                  solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                         ) ▶₂ #vr.27 )
                    case Receive_UserDevice
                    solve( In_UD( <'Display', 'Device', 'User'>, ndev, $User.1, ~random
                           ) ▶₃ #vr.27 )
                      case Receive_UserDevice
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case NDev_Confirmation_1_case_08
                  solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                         ) ▶₂ #vr.27 )
                    case Receive_UserDevice
                    solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                           ) ▶₃ #vr.27 )
                      case Receive_UserDevice
                      solve( !KU( ~Nd ) @ #vk.52 )
                        case NDev_SendNonce_1
                        solve( (Cp_1 =
                                cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>),
                                                 s1(<DHpkP, 'g'^~sk.1>))), 
                                       '1'>+
                                      <fst(~random), '2'>),
                                     Np_1))  ∥
                               (∃ mk mo.
                                 ((mk+mo) =
                                  (
                                   <
                                    cmac('prck',
                                         cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>),
                                              s1(<DHpkP, 'g'^~sk.1>))), 
                                    '1'>+
                                   <fst(~random), '2'>)) ∧
                                 (mk = rm(Cp_1, mo, Np_1))
                                ∧
                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                          case case_1
                          solve( !KU( snd(~random) ) @ #vk.43 )
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.66 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>),
                                                       s1(<DHpkP, 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>),
                                                    s1(<DHpkP, 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                 s1(<'g'^~sk, DHpkD>))
                                       ) @ #vk.46 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.72 )
                                    case c_s1
                                    solve( !KU( cmac('prck',
                                                     cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>),
                                                          s1(<DHpkP, 'g'^~sk.1>)))
                                           ) @ #vk.62 )
                                      case c_cmac
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst(DHpkP^~sk.1), '1'>+
                                                                    <snd(DHpkP^~sk.1), '2'>),
                                                                   s1(<DHpkP, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <fst(~random), '2'>),
                                                       Np_1)
                                             ) @ #vk.62 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case c_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case NDev_Confirmation_1_case_09
                  solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                         ) ▶₂ #vr.27 )
                    case Receive_UserDevice
                    solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                           ) ▶₃ #vr.27 )
                      case Receive_UserDevice
                      solve( !KU( ~Nd ) @ #vk.52 )
                        case NDev_SendNonce_1
                        solve( (Cp_1 =
                                cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                 s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                       '1'>+
                                      <fst(~random), '2'>),
                                     Np_1))  ∥
                               (∃ mk mo.
                                 ((mk+mo) =
                                  (
                                   <
                                    cmac('prck',
                                         cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                              s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                    '1'>+
                                   <fst(~random), '2'>)) ∧
                                 (mk = rm(Cp_1, mo, Np_1))
                                ∧
                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                          case case_1
                          solve( !KU( snd(~random) ) @ #vk.43 )
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.66 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                       s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                    s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                 s1(<'g'^~sk, DHpkD>))
                                       ) @ #vk.46 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.72 )
                                    case c_s1
                                    solve( !KU( cmac('prck',
                                                     cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                          s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>)))
                                           ) @ #vk.62 )
                                      case c_cmac
                                      solve( !KU( ECDHSecret.1^inv(~sk.1) ) @ #vk.63 )
                                        case c_exp
                                        by solve( !KU( ~sk.1 ) @ #vk.80 )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case c_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case NDev_Confirmation_1_case_10
                  solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                         ) ▶₂ #vr.27 )
                    case Receive_UserDevice
                    solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                           ) ▶₃ #vr.27 )
                      case Receive_UserDevice
                      solve( !KU( ~Nd ) @ #vk.52 )
                        case NDev_SendNonce_1
                        solve( (Cp_1 =
                                cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst(x^(~sk.1*x.1)), '1'>+<snd(x^(~sk.1*x.1)), '2'>),
                                                 s1(<x^x.1, 'g'^~sk.1>))), 
                                       '1'>+
                                      <fst(~random), '2'>),
                                     Np_1))  ∥
                               (∃ mk mo.
                                 ((mk+mo) =
                                  (
                                   <
                                    cmac('prck',
                                         cmac((<fst(x^(~sk.1*x.1)), '1'>+<snd(x^(~sk.1*x.1)), '2'>),
                                              s1(<x^x.1, 'g'^~sk.1>))), 
                                    '1'>+
                                   <fst(~random), '2'>)) ∧
                                 (mk = rm(Cp_1, mo, Np_1))
                                ∧
                                 ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                          case case_1
                          solve( !KU( snd(~random) ) @ #vk.43 )
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.66 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(x^(~sk.1*x.1)), '1'>+<snd(x^(~sk.1*x.1)), '2'>),
                                                       s1(<x^x.1, 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(x^(~sk.1*x.1)), '1'>+<snd(x^(~sk.1*x.1)), '2'>),
                                                    s1(<x^x.1, 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                 s1(<'g'^~sk, DHpkD>))
                                       ) @ #vk.46 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.72 )
                                    case c_s1
                                    solve( !KU( cmac('prck',
                                                     cmac((<fst(x^(~sk.1*x.1)), '1'>+<snd(x^(~sk.1*x.1)), '2'>
                                                          ),
                                                          s1(<x^x.1, 'g'^~sk.1>)))
                                           ) @ #vk.62 )
                                      case c_cmac
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                    <snd(x^(~sk.1*x.1)), '2'>),
                                                                   s1(<x^x.1, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <fst(~random), '2'>),
                                                       Np_1)
                                             ) @ #vk.62 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_1
                                        solve( !KU( ~Np ) @ #vk.69 )
                                          case Prov_SendNonce_1
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case c_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case NDev_Confirmation_1_case_11
                  solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                         ) ▶₂ #vr.27 )
                    case Receive_UserDevice
                    solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                           ) ▶₃ #vr.27 )
                      case Receive_UserDevice
                      solve( !KU( ~Nd ) @ #vk.52 )
                        case NDev_SendNonce_1
                        solve( (Cp_1 =
                                cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                 s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                       '1'>+
                                      <fst(~random), '2'>),
                                     Np_1))  ∥
                               (∃ mk mo.
                                 ((mk+mo) =
                                  (
                                   <
                                    cmac('prck',
                                         cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                              s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                    '1'>+
                                   <fst(~random), '2'>)) ∧
                                 (mk = rm(Cp_1, mo, Np_1))
                                ∧
                                 ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                          case case_1
                          solve( !KU( snd(~random) ) @ #vk.43 )
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.66 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                       s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                    s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                 s1(<'g'^~sk, DHpkD>))
                                       ) @ #vk.46 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.72 )
                                    case c_s1
                                    solve( !KU( cmac('prck',
                                                     cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                          s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>)))
                                           ) @ #vk.62 )
                                      case c_cmac
                                      solve( !KU( x^inv((~sk.1*x.1)) ) @ #vk.63 )
                                        case c_exp
                                        by solve( !KU( ~sk.1 ) @ #vk.81 )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case c_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case NDev_Confirmation_1_case_12
                  solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                         ) ▶₂ #vr.27 )
                    case Receive_UserDevice
                    solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                           ) ▶₃ #vr.27 )
                      case Receive_UserDevice
                      solve( !KU( ~Nd ) @ #vk.52 )
                        case NDev_SendNonce_1
                        solve( (Cp_1 =
                                cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst(x^x.1), '1'>+<snd(x^x.1), '2'>),
                                                 s1(<x^(x.1*inv(~sk.1)), 'g'^~sk.1>))), 
                                       '1'>+
                                      <fst(~random), '2'>),
                                     Np_1))  ∥
                               (∃ mk mo.
                                 ((mk+mo) =
                                  (
                                   <
                                    cmac('prck',
                                         cmac((<fst(x^x.1), '1'>+<snd(x^x.1), '2'>),
                                              s1(<x^(x.1*inv(~sk.1)), 'g'^~sk.1>))), 
                                    '1'>+
                                   <fst(~random), '2'>)) ∧
                                 (mk = rm(Cp_1, mo, Np_1))
                                ∧
                                 ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                          case case_1
                          solve( !KU( x^(x.1*inv(~sk.1)) ) @ #vk.55 )
                            case NDev_SendPK_InBand_case_1
                            by contradiction /* cyclic */
                          next
                            case NDev_SendPK_InBand_case_2
                            by contradiction /* cyclic */
                          next
                            case Prov_SendPK_InBand_case_1
                            by solve( !KU( ~sk.1 ) @ #vk.65 )
                          next
                            case Prov_SendPK_InBand_case_2
                            by solve( !KU( ~sk.1 ) @ #vk.67 )
                          next
                            case c_exp
                            by solve( !KU( ~sk.1 ) @ #vk.68 )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case NDev_Confirmation_1_case_13
                  solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                         ) ▶₂ #vr.27 )
                    case Receive_UserDevice
                    solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                           ) ▶₃ #vr.27 )
                      case Receive_UserDevice
                      solve( !KU( ~Nd ) @ #vk.52 )
                        case NDev_SendNonce_1
                        solve( (Cp_1 =
                                cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst(x^(x.1*inv(x.2))), '1'>+<snd(x^(x.1*inv(x.2))), '2'>),
                                                 s1(<x^(x.1*inv((~sk.1*x.2))), 'g'^~sk.1>))), 
                                       '1'>+
                                      <fst(~random), '2'>),
                                     Np_1))  ∥
                               (∃ mk mo.
                                 ((mk+mo) =
                                  (
                                   <
                                    cmac('prck',
                                         cmac((<fst(x^(x.1*inv(x.2))), '1'>+<snd(x^(x.1*inv(x.2))), '2'>),
                                              s1(<x^(x.1*inv((~sk.1*x.2))), 'g'^~sk.1>))), 
                                    '1'>+
                                   <fst(~random), '2'>)) ∧
                                 (mk = rm(Cp_1, mo, Np_1))
                                ∧
                                 ∀ x.3 y. ((y+x.3) = mk) ⇒ ⊥) )
                          case case_1
                          solve( !KU( x^(x.1*inv((~sk.1*x.2))) ) @ #vk.55 )
                            case NDev_SendPK_InBand_case_1
                            by contradiction /* cyclic */
                          next
                            case NDev_SendPK_InBand_case_2
                            by contradiction /* cyclic */
                          next
                            case Prov_SendPK_InBand_case_1
                            by solve( !KU( ~sk.1 ) @ #vk.66 )
                          next
                            case Prov_SendPK_InBand_case_2
                            by solve( !KU( ~sk.1 ) @ #vk.68 )
                          next
                            case c_exp
                            by solve( !KU( ~sk.1 ) @ #vk.69 )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case NDev_Confirmation_1_case_14
                  solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                         ) ▶₂ #vr.27 )
                    case Receive_UserDevice
                    solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                           ) ▶₃ #vr.27 )
                      case Receive_UserDevice
                      solve( !KU( ~Nd ) @ #vk.52 )
                        case NDev_SendNonce_1
                        solve( (Cp_1 =
                                cmac((
                                      <
                                       cmac('prck',
                                            cmac((<z, '1'>+<z.1, '2'>),
                                                 s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                       '1'>+
                                      <fst(~random), '2'>),
                                     Np_1))  ∥
                               (∃ mk mo.
                                 ((mk+mo) =
                                  (
                                   <
                                    cmac('prck',
                                         cmac((<z, '1'>+<z.1, '2'>), s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                    '1'>+
                                   <fst(~random), '2'>)) ∧
                                 (mk = rm(Cp_1, mo, Np_1))
                                ∧
                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                          case case_1
                          solve( !KU( snd(~random) ) @ #vk.43 )
                            case NDev_Confirmation_2
                            solve( !KU( ~Nd.1 ) @ #vk.66 )
                              case NDev_SendNonce_2
                              solve( (Cp_2 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<z, '1'>+<z.1, '2'>),
                                                       s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                             '1'>+
                                            <snd(~random), '2'>),
                                           Np_2))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<z, '1'>+<z.1, '2'>),
                                                    s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                          '1'>+
                                         <snd(~random), '2'>)) ∧
                                       (mk = rm(Cp_2, mo, Np_2))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                 s1(<'g'^~sk, DHpkD>))
                                       ) @ #vk.46 )
                                  case c_cmac
                                  solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.72 )
                                    case c_s1
                                    solve( !KU( cmac('prck',
                                                     cmac((<z, '1'>+<z.1, '2'>),
                                                          s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                           ) @ #vk.62 )
                                      case c_cmac
                                      solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.63 )
                                        case c_exp
                                        by solve( !KU( ~sk.1 ) @ #vk.82 )
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case c_snd
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case NDev_Confirmation_2_case_01
                  by contradiction /* cyclic */
                next
                  case NDev_Confirmation_2_case_02
                  by contradiction /* cyclic */
                next
                  case NDev_Confirmation_2_case_03
                  by contradiction /* cyclic */
                next
                  case NDev_Confirmation_2_case_04
                  by contradiction /* cyclic */
                next
                  case NDev_Confirmation_2_case_05
                  by contradiction /* cyclic */
                next
                  case NDev_Confirmation_2_case_06
                  by contradiction /* cyclic */
                next
                  case NDev_Confirmation_2_case_07
                  by contradiction /* cyclic */
                next
                  case NDev_Confirmation_2_case_08
                  by contradiction /* cyclic */
                next
                  case NDev_Confirmation_2_case_09
                  by contradiction /* cyclic */
                next
                  case NDev_Confirmation_2_case_10
                  by contradiction /* cyclic */
                next
                  case NDev_Confirmation_2_case_11
                  by contradiction /* cyclic */
                next
                  case NDev_Confirmation_2_case_12
                  by contradiction /* cyclic */
                next
                  case NDev_Confirmation_2_case_13
                  by contradiction /* cyclic */
                next
                  case NDev_Confirmation_2_case_14
                  by contradiction /* cyclic */
                next
                  case Prov_Confirmation_1
                  solve( !KU( ~Np ) @ #vk.44 )
                    case Prov_SendNonce_1
                    by contradiction /* cyclic */
                  qed
                next
                  case Prov_Confirmation_2
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      next
        case split_case_2
        solve( !KU( cmac((
                          <
                           cmac('prck',
                                cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                           '1'>+
                          <fst(~random), '2'>),
                         Nd_1)
               ) @ #vk.14 )
          case Prov_Confirmation_1
          by contradiction /* from formulas */
        next
          case c_cmac
          solve( !KU( cmac((
                            <
                             cmac('prck',
                                  cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                             '1'>+
                            <snd(~random), '2'>),
                           Nd_2)
                 ) @ #vk.13 )
            case Prov_Confirmation_2
            by contradiction /* from formulas */
          next
            case c_cmac
            solve( !KU( <z, z.1>^inv(~sk) ) @ #vk.16 )
              case c_exp
              by solve( !KU( ~sk ) @ #vk.45 )
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma Secrecy_Keys:
  all-traces
  "∀ sessionkey devkey netkey #i.
    (Secret( sessionkey, devkey, netkey ) @ #i) ⇒
    (¬(((∃ #j. K( netkey ) @ #j) ∨ (∃ #k. K( sessionkey ) @ #k)) ∨
       (∃ #l. K( devkey ) @ #l)))"
/*
guarded formula characterizing all counter-examples:
"∃ sessionkey devkey netkey #i.
  (Secret( sessionkey, devkey, netkey ) @ #i)
 ∧
  ((∃ #j. (K( netkey ) @ #j)) ∨
   (∃ #k. (K( sessionkey ) @ #k)) ∨
   (∃ #l. (K( devkey ) @ #l)))"
*/
simplify
solve( (∃ #j. (K( netkey ) @ #j))  ∥ (∃ #k. (K( sessionkey ) @ #k))  ∥
       (∃ #l. (K( cmac('prdk', cmac((ECDH1+ECDH2), ProvisioningSALT)) ) @ #l)) )
  case case_1
  solve( ProvChecked( Prov, netkey, ReadOOBPK, ReadStaticOOB, SecureOption,
                      NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In,
                      AuthValue_1, AuthValue_2, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D,
                      PKType_P, AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, Np_1, ConfirmSALT,
                      ECDH1, ECDH2, CK, Cp_1, Cd_1, Nd_1, Np_2, Cp_2, Cd_2, Nd_2,
                      ProvisioningSALT, sessionkey
         ) ▶₀ #i )
    case Prov_Check_case_1
    solve( (Cd_1 =
            cmac((<z, '2'>+
                  <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
                 ),
                 Nd_1))  ∥
           (∃ mk mo.
             ((mk+mo) =
              (<z, '2'>+
               <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
              )) ∧
             (mk = rm(Cd_1, mo, Nd_1))
            ∧
             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
      case case_1
      solve( (Cd_2 =
              cmac((<z.1, '2'>+
                    <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
                   ),
                   Nd_2))  ∥
             (∃ mk mo.
               ((mk+mo) =
                (<z.1, '2'>+
                 <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
                )) ∧
               (mk = rm(Cd_2, mo, Nd_2))
              ∧
               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
        case case_1
        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User, 'Input'
               ) ▶₂ #vr.10 )
          case Receive_UserDevice_case_1
          solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User, AuthValue_In
                 ) ▶₃ #vr.10 )
            case Receive_UserDevice
            solve( !KU( ~NetKey ) @ #vk )
              case Prov_Distribute
              solve( splitEqs(2) )
                case split_case_1
                solve( !KU( cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                             s1(<'g'^~sk, DHpkD>))), 
                                   '1'>+
                                  <fst(~random), '2'>),
                                 Nd_1)
                       ) @ #vk.12 )
                  case NDev_Confirmation_1
                  solve( !KU( ~Nd ) @ #vk.12 )
                    case NDev_SendNonce_1
                    solve( (Cp_1 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <fst(~random), '2'>),
                                 Np_1))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <fst(~random), '2'>)) ∧
                             (mk = rm(Cp_1, mo, Np_1))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <snd(~random), '2'>),
                                       Nd_2)
                             ) @ #vk.12 )
                        case NDev_Confirmation_2
                        solve( !KU( ~Nd.1 ) @ #vk.12 )
                          case NDev_SendNonce_2
                          solve( (Cp_2 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <snd(~random), '2'>),
                                       Np_2))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk, 'g'^~sk.1>))), 
                                      '1'>+
                                     <snd(~random), '2'>)) ∧
                                   (mk = rm(Cp_2, mo, Np_2))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( cmac('prsk',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>)))
                                   ) @ #vk.46 )
                              case c_cmac
                              solve( !KU( cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1)
                                     ) @ #vk.47 )
                                case NDev_Confirmation_1
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1
                                solve( !KU( cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2)
                                       ) @ #vk.49 )
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                   ),
                                                   s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>))
                                         ) @ #vk.52 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>) ) @ #vk.55 )
                                      case c_s1
                                      solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.62 )
                                        case c_s1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.60 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.64 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.65 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.65 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.67 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                   ),
                                                   s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>))
                                         ) @ #vk.53 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>) ) @ #vk.62 )
                                      case c_s1
                                      solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.67 )
                                        case c_s1
                                        solve( !KU( cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>)))
                                               ) @ #vk.62 )
                                          case NDev_Confirmation_1
                                          solve( !KU( snd(~random) ) @ #vk.64 )
                                            case NDev_Confirmation_2
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_2
                                            solve( !KU( ~Np.1 ) @ #vk.70 )
                                              case Prov_SendNonce_2
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case c_snd
                                            solve( !KU( ~random ) @ #vk.72 )
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_2
                                              solve( !KU( ~Np.1 ) @ #vk.71 )
                                                case Prov_SendNonce_2
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        next
                                          case Prov_Confirmation_1
                                          solve( !KU( snd(~random) ) @ #vk.64 )
                                            case NDev_Confirmation_2
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_2
                                            solve( !KU( ~Np.1 ) @ #vk.70 )
                                              case Prov_SendNonce_2
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case c_snd
                                            solve( !KU( ~random ) @ #vk.72 )
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_2
                                              solve( !KU( ~Np.1 ) @ #vk.71 )
                                                case Prov_SendNonce_2
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        next
                                          case c_cmac
                                          solve( !KU( snd(~random) ) @ #vk.64 )
                                            case NDev_Confirmation_2
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_2
                                            solve( !KU( ~Np.1 ) @ #vk.69 )
                                              case Prov_SendNonce_2
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case c_snd
                                            solve( !KU( ~random ) @ #vk.72 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_2
                                              solve( !KU( ~Np.1 ) @ #vk.70 )
                                                case Prov_SendNonce_2
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case c_cmac
                                solve( !KU( cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2)
                                       ) @ #vk.50 )
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                   ),
                                                   s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>))
                                         ) @ #vk.54 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>) ) @ #vk.62 )
                                      case c_s1
                                      solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.67 )
                                        case c_s1
                                        solve( !KU( cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>)))
                                               ) @ #vk.62 )
                                          case NDev_Confirmation_1
                                          by contradiction /* cyclic */
                                        next
                                          case Prov_Confirmation_1
                                          solve( !KU( ~Np ) @ #vk.69 )
                                            case Prov_SendNonce_1
                                            by contradiction /* cyclic */
                                          qed
                                        next
                                          case c_cmac
                                          solve( !KU( fst(~random) ) @ #vk.64 )
                                            case NDev_Confirmation_1
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_1
                                            solve( !KU( ~Np ) @ #vk.71 )
                                              case Prov_SendNonce_1
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case c_fst
                                            solve( !KU( ~random ) @ #vk.71 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              solve( !KU( ~Np ) @ #vk.72 )
                                                case Prov_SendNonce_1
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case Prov_Confirmation_2
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                   ),
                                                   s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>))
                                         ) @ #vk.55 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>) ) @ #vk.65 )
                                      case c_s1
                                      solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.70 )
                                        case c_s1
                                        solve( !KU( cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>)))
                                               ) @ #vk.63 )
                                          case NDev_Confirmation_1
                                          by contradiction /* cyclic */
                                        next
                                          case Prov_Confirmation_1
                                          solve( !KU( ~Np ) @ #vk.73 )
                                            case Prov_SendNonce_1
                                            by contradiction /* cyclic */
                                          qed
                                        next
                                          case c_cmac
                                          solve( !KU( fst(~random) ) @ #vk.65 )
                                            case NDev_Confirmation_1
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_1
                                            solve( !KU( ~Np ) @ #vk.75 )
                                              case Prov_SendNonce_1
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case c_fst
                                            solve( !KU( ~random ) @ #vk.75 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              solve( !KU( ~Np ) @ #vk.76 )
                                                case Prov_SendNonce_1
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case Prov_Confirmation_2
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case Prov_Confirmation_2
                        by contradiction /* from formulas */
                      next
                        case c_cmac
                        solve( !KU( cmac('prsk',
                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                              s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>)))
                               ) @ #vk.45 )
                          case c_cmac
                          solve( !KU( cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Np_1)
                                 ) @ #vk.47 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>)))
                                   ) @ #vk.49 )
                              case NDev_Confirmation_1
                              solve( !KU( snd(~random) ) @ #vk.51 )
                                case NDev_Confirmation_2
                                solve( !KU( ~Nd.1 ) @ #vk.59 )
                                  case NDev_SendNonce_2
                                  solve( (Cp_2 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <snd(~random), '2'>),
                                               Np_2))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                         <snd('g'^(~sk*~sk.1)), '2'>),
                                                        s1(<'g'^~sk, 'g'^~sk.1>))), 
                                              '1'>+
                                             <snd(~random), '2'>)) ∧
                                           (mk = rm(Cp_2, mo, Np_2))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                           ) @ #vk.58 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.65 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.70 )
                                          case c_s1
                                          solve( !KU( fst(~random) ) @ #vk.67 )
                                            case c_fst
                                            solve( !KU( ~random ) @ #vk.73 )
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case Prov_Confirmation_2
                                solve( !KU( ~Np.1 ) @ #vk.57 )
                                  case Prov_SendNonce_2
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_snd
                                solve( !KU( ~random ) @ #vk.57 )
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.60 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                           <snd('g'^(~sk*~sk.1)), '2'>),
                                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                             ) @ #vk.59 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.66 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.71 )
                                            case c_s1
                                            solve( !KU( fst(~random) ) @ #vk.68 )
                                              case c_fst
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( ~Np.1 ) @ #vk.58 )
                                    case Prov_SendNonce_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_1
                              solve( !KU( snd(~random) ) @ #vk.51 )
                                case NDev_Confirmation_2
                                solve( !KU( ~Nd.1 ) @ #vk.59 )
                                  case NDev_SendNonce_2
                                  solve( (Cp_2 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <snd(~random), '2'>),
                                               Np_2))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                         <snd('g'^(~sk*~sk.1)), '2'>),
                                                        s1(<'g'^~sk, 'g'^~sk.1>))), 
                                              '1'>+
                                             <snd(~random), '2'>)) ∧
                                           (mk = rm(Cp_2, mo, Np_2))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                           ) @ #vk.58 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.65 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.70 )
                                          case c_s1
                                          solve( !KU( fst(~random) ) @ #vk.67 )
                                            case c_fst
                                            solve( !KU( ~random ) @ #vk.73 )
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case Prov_Confirmation_2
                                solve( !KU( ~Np.1 ) @ #vk.57 )
                                  case Prov_SendNonce_2
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_snd
                                solve( !KU( ~random ) @ #vk.57 )
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.60 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                           <snd('g'^(~sk*~sk.1)), '2'>),
                                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                             ) @ #vk.59 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.66 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.71 )
                                            case c_s1
                                            solve( !KU( fst(~random) ) @ #vk.68 )
                                              case c_fst
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( ~Np.1 ) @ #vk.58 )
                                    case Prov_SendNonce_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            next
                              case c_cmac
                              solve( !KU( snd(~random) ) @ #vk.51 )
                                case NDev_Confirmation_2
                                solve( !KU( ~Nd.1 ) @ #vk.59 )
                                  case NDev_SendNonce_2
                                  solve( (Cp_2 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <snd(~random), '2'>),
                                               Np_2))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                         <snd('g'^(~sk*~sk.1)), '2'>),
                                                        s1(<'g'^~sk, 'g'^~sk.1>))), 
                                              '1'>+
                                             <snd(~random), '2'>)) ∧
                                           (mk = rm(Cp_2, mo, Np_2))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                           ) @ #vk.57 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.65 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.70 )
                                          case c_s1
                                          solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))
                                                 ) @ #vk.67 )
                                            case c_cmac
                                            solve( !KU( cmac((
                                                              <
                                                               cmac('prck',
                                                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                          <snd('g'^(~sk*~sk.1)), '2'>),
                                                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                               '1'>+
                                                              <snd(~random), '2'>),
                                                             Np_2)
                                                   ) @ #vk.68 )
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_2
                                              solve( !KU( ~Np.1 ) @ #vk.69 )
                                                case Prov_SendNonce_2
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case c_cmac
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case Prov_Confirmation_2
                                solve( !KU( ~Np.1 ) @ #vk.57 )
                                  case Prov_SendNonce_2
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_snd
                                solve( !KU( ~random ) @ #vk.57 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.60 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                           <snd('g'^(~sk*~sk.1)), '2'>),
                                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                             ) @ #vk.58 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.67 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.72 )
                                            case c_s1
                                            solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))
                                                   ) @ #vk.68 )
                                              case c_cmac
                                              solve( !KU( fst(~random) ) @ #vk.70 )
                                                case NDev_Confirmation_1
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <snd(~random), '2'>),
                                                                 Np_2)
                                                       ) @ #vk.70 )
                                                  case NDev_Confirmation_2
                                                  by contradiction /* cyclic */
                                                next
                                                  case Prov_Confirmation_2
                                                  solve( !KU( ~Np.1 ) @ #vk.71 )
                                                    case Prov_SendNonce_2
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case Prov_Confirmation_1
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <snd(~random), '2'>),
                                                                 Np_2)
                                                       ) @ #vk.70 )
                                                  case NDev_Confirmation_2
                                                  by contradiction /* cyclic */
                                                next
                                                  case Prov_Confirmation_2
                                                  solve( !KU( ~Np.1 ) @ #vk.71 )
                                                    case Prov_SendNonce_2
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case c_fst
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( ~Np.1 ) @ #vk.58 )
                                    case Prov_SendNonce_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          next
                            case c_cmac
                            solve( !KU( cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>)))
                                   ) @ #vk.50 )
                              case NDev_Confirmation_1
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_1
                              solve( !KU( ~Np ) @ #vk.58 )
                                case Prov_SendNonce_1
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_cmac
                              solve( !KU( snd(~random) ) @ #vk.52 )
                                case NDev_Confirmation_2
                                solve( !KU( ~Nd.1 ) @ #vk.62 )
                                  case NDev_SendNonce_2
                                  solve( (Cp_2 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <snd(~random), '2'>),
                                               Np_2))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                         <snd('g'^(~sk*~sk.1)), '2'>),
                                                        s1(<'g'^~sk, 'g'^~sk.1>))), 
                                              '1'>+
                                             <snd(~random), '2'>)) ∧
                                           (mk = rm(Cp_2, mo, Np_2))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                           ) @ #vk.59 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.68 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.73 )
                                          case c_s1
                                          solve( !KU( fst(~random) ) @ #vk.68 )
                                            case NDev_Confirmation_1
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_1
                                            solve( !KU( ~Np ) @ #vk.76 )
                                              case Prov_SendNonce_1
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case c_fst
                                            solve( !KU( ~random ) @ #vk.76 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case Prov_Confirmation_2
                                solve( !KU( ~Np.1 ) @ #vk.60 )
                                  case Prov_SendNonce_2
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_snd
                                solve( !KU( ~random ) @ #vk.60 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.63 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                           <snd('g'^(~sk*~sk.1)), '2'>),
                                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                             ) @ #vk.60 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.69 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.74 )
                                            case c_s1
                                            solve( !KU( fst(~random) ) @ #vk.69 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              solve( !KU( ~Np ) @ #vk.77 )
                                                case Prov_SendNonce_1
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case c_fst
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( ~Np.1 ) @ #vk.61 )
                                    case Prov_SendNonce_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Prov_Confirmation_1
                  by contradiction /* from formulas */
                next
                  case c_cmac
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                               s1(<'g'^~sk, DHpkD>))), 
                                     '1'>+
                                    <snd(~random), '2'>),
                                   Nd_2)
                         ) @ #vk.11 )
                    case NDev_Confirmation_2
                    solve( (Cp_1 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <fst(~random), '2'>),
                                 Np_1))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <fst(~random), '2'>)) ∧
                             (mk = rm(Cp_1, mo, Np_1))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( ~Nd ) @ #vk.11 )
                        case NDev_SendNonce_2
                        solve( (Cp_2 =
                                cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                       '1'>+
                                      <snd(~random), '2'>),
                                     Np_2))  ∥
                               (∃ mk mo.
                                 ((mk+mo) =
                                  (
                                   <
                                    cmac('prck',
                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                    '1'>+
                                   <snd(~random), '2'>)) ∧
                                 (mk = rm(Cp_2, mo, Np_2))
                                ∧
                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                          case case_1
                          solve( !KU( cmac('prsk',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>)))
                                 ) @ #vk.48 )
                            case c_cmac
                            solve( !KU( cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>)))
                                   ) @ #vk.49 )
                              case NDev_Confirmation_1
                              solve( !KU( fst(~random) ) @ #vk.51 )
                                case c_fst
                                solve( !KU( ~random ) @ #vk.60 )
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_2
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case Prov_Confirmation_1
                              solve( !KU( ~Np ) @ #vk.59 )
                                case Prov_SendNonce_1
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_cmac
                              solve( !KU( fst(~random) ) @ #vk.51 )
                                case NDev_Confirmation_1
                                solve( !KU( cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <fst(~random), '2'>),
                                                 Np_1)
                                       ) @ #vk.55 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2)
                                         ) @ #vk.54 )
                                    case NDev_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>))
                                           ) @ #vk.58 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>) ) @ #vk.65 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.70 )
                                          case c_s1
                                          solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))
                                                 ) @ #vk.68 )
                                            case c_cmac
                                            solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.70 )
                                              case c_fst
                                              solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.72 )
                                                case NDev_SendPK_InBand
                                                by solve( !KU( ~sk ) @ #vk.73 )
                                              next
                                                case Prov_SendPK_InBand
                                                by solve( !KU( ~sk.1 ) @ #vk.73 )
                                              next
                                                case c_exp
                                                by solve( !KU( ~sk ) @ #vk.75 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case c_cmac
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>))
                                           ) @ #vk.60 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>) ) @ #vk.68 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.73 )
                                          case c_s1
                                          solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))
                                                 ) @ #vk.70 )
                                            case c_cmac
                                            solve( !KU( snd(~random) ) @ #vk.72 )
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_2
                                              solve( !KU( ~Np.1 ) @ #vk.75 )
                                                case Prov_SendNonce_2
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case c_snd
                                              solve( !KU( ~random ) @ #vk.76 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case NDev_Confirmation_2
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_2
                                                solve( !KU( ~Np.1 ) @ #vk.76 )
                                                  case Prov_SendNonce_2
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_cmac
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_1
                                solve( !KU( ~Np ) @ #vk.61 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_fst
                                solve( !KU( ~random ) @ #vk.61 )
                                  case NDev_Confirmation_1
                                  solve( !KU( cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <fst(~random), '2'>),
                                                   Np_1)
                                         ) @ #vk.56 )
                                    case NDev_Confirmation_1
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_1
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2)
                                           ) @ #vk.55 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>))
                                             ) @ #vk.59 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>) ) @ #vk.67 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.72 )
                                            case c_s1
                                            solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))
                                                   ) @ #vk.69 )
                                              case c_cmac
                                              solve( !KU( snd(~random) ) @ #vk.71 )
                                                case NDev_Confirmation_2
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_2
                                                by contradiction /* cyclic */
                                              next
                                                case c_snd
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>))
                                             ) @ #vk.61 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>) ) @ #vk.69 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.74 )
                                            case c_s1
                                            solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))
                                                   ) @ #vk.71 )
                                              case c_cmac
                                              solve( !KU( snd(~random) ) @ #vk.73 )
                                                case NDev_Confirmation_2
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_2
                                                by contradiction /* cyclic */
                                              next
                                                case c_snd
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case c_cmac
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( ~Np ) @ #vk.62 )
                                    case Prov_SendNonce_1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case Prov_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( cmac('prsk',
                                     cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                          s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>)))
                           ) @ #vk.45 )
                      case c_cmac
                      solve( !KU( cmac('prck',
                                       cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                            s1(<'g'^~sk, DHpkD>)))
                             ) @ #vk.46 )
                        case NDev_Confirmation_1
                        solve( !KU( ~Nd ) @ #vk.56 )
                          case NDev_SendNonce_1
                          solve( (Cp_1 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <fst(~random), '2'>),
                                       Np_1))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk, 'g'^~sk.1>))), 
                                      '1'>+
                                     <fst(~random), '2'>)) ∧
                                   (mk = rm(Cp_1, mo, Np_1))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( fst(~random) ) @ #vk.51 )
                              case c_fst
                              solve( !KU( ~random ) @ #vk.59 )
                                case NDev_Confirmation_2
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np ) @ #vk.54 )
                          case Prov_SendNonce_1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_cmac
                        solve( !KU( fst(~random) ) @ #vk.48 )
                          case NDev_Confirmation_1
                          solve( !KU( ~Nd ) @ #vk.59 )
                            case NDev_SendNonce_1
                            solve( (Cp_1 =
                                    cmac((
                                          <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                           '1'>+
                                          <fst(~random), '2'>),
                                         Np_1))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), '1'
                                       >+
                                       <fst(~random), '2'>)) ∧
                                     (mk = rm(Cp_1, mo, Np_1))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( splitEqs(11) )
                                case split_case_1
                                solve( !KU( snd(~random) ) @ #vk.55 )
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.65 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<z, '1'>+<z.1, '2'>),
                                                             s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<z, '1'>+<z.1, '2'>),
                                                          s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                       s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                             ) @ #vk.60 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.71 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.76 )
                                            case c_s1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<z, '1'>+<z.1, '2'>),
                                                                    s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                     ) @ #vk.72 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<z, '1'>+<z.1, '2'>),
                                                                             s1(<<z, z.1>^inv(~sk.1), 
                                                                                 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~random), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.72 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( ~Np.1 ) @ #vk.63 )
                                    case Prov_SendNonce_2
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_snd
                                  solve( !KU( ~random ) @ #vk.63 )
                                    case NDev_Confirmation_1
                                    by contradiction /* cyclic */
                                  next
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.66 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<z, '1'>+<z.1, '2'>),
                                                               s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<z, '1'>+<z.1, '2'>),
                                                            s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                               ) @ #vk.61 )
                                          case c_cmac
                                          solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.72 )
                                            case c_s1
                                            solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.77 )
                                              case c_s1
                                              solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>
                                                               ),
                                                               s1(<'g'^~sk, DHpkD>))
                                                     ) @ #vk.71 )
                                                case c_cmac
                                                solve( !KU( cmac('prck',
                                                                 cmac((<z, '1'>+<z.1, '2'>),
                                                                      s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                       ) @ #vk.73 )
                                                  case c_cmac
                                                  solve( !KU( cmac((
                                                                    <
                                                                     cmac('prck',
                                                                          cmac((<z, '1'>+<z.1, '2'>),
                                                                               s1(<<z, z.1>^inv(~sk.1), 
                                                                                   'g'^~sk.1>))), 
                                                                     '1'>+
                                                                    <fst(~random), '2'>),
                                                                   Np_1)
                                                         ) @ #vk.73 )
                                                    case NDev_Confirmation_1
                                                    by contradiction /* cyclic */
                                                  next
                                                    case c_cmac
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2_case_1
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case Prov_Confirmation_2_case_2
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case Prov_Confirmation_2_case_3
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case Prov_Confirmation_2_case_4
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case Prov_Confirmation_2_case_5
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case Prov_Confirmation_2_case_6
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              next
                                case split_case_2
                                solve( !KU( snd(~random) ) @ #vk.55 )
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.65 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst(ECDHSecret.1), '1'>+
                                                              <snd(ECDHSecret.1), '2'>),
                                                             s1(<DHpkP, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                          s1(<DHpkP, 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                       s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                             ) @ #vk.60 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.71 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.76 )
                                            case c_s1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<fst(ECDHSecret.1), '1'>+
                                                                     <snd(ECDHSecret.1), '2'>),
                                                                    s1(<DHpkP, 'g'^~sk.1>)))
                                                     ) @ #vk.72 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst(ECDHSecret.1), '1'>+
                                                                              <snd(ECDHSecret.1), '2'>),
                                                                             s1(<DHpkP, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~random), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.72 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case Prov_Confirmation_1
                                                  solve( !KU( ~Np ) @ #vk.71 )
                                                    case Prov_SendNonce_1
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( ~Np.1 ) @ #vk.63 )
                                    case Prov_SendNonce_2
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_snd
                                  solve( !KU( ~random ) @ #vk.63 )
                                    case NDev_Confirmation_1
                                    by contradiction /* cyclic */
                                  next
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.66 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst(ECDHSecret.1), '1'>+
                                                                <snd(ECDHSecret.1), '2'>),
                                                               s1(<DHpkP, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>
                                                            ),
                                                            s1(<DHpkP, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                               ) @ #vk.61 )
                                          case c_cmac
                                          solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.72 )
                                            case c_s1
                                            solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.77 )
                                              case c_s1
                                              solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>
                                                               ),
                                                               s1(<'g'^~sk, DHpkD>))
                                                     ) @ #vk.71 )
                                                case c_cmac
                                                solve( !KU( cmac('prck',
                                                                 cmac((<fst(ECDHSecret.1), '1'>+
                                                                       <snd(ECDHSecret.1), '2'>),
                                                                      s1(<DHpkP, 'g'^~sk.1>)))
                                                       ) @ #vk.73 )
                                                  case c_cmac
                                                  solve( !KU( cmac((
                                                                    <
                                                                     cmac('prck',
                                                                          cmac((<fst(ECDHSecret.1), '1'>+
                                                                                <snd(ECDHSecret.1), '2'>),
                                                                               s1(<DHpkP, 'g'^~sk.1>))), 
                                                                     '1'>+
                                                                    <fst(~random), '2'>),
                                                                   Np_1)
                                                         ) @ #vk.73 )
                                                    case NDev_Confirmation_1
                                                    by contradiction /* cyclic */
                                                  next
                                                    case Prov_Confirmation_1
                                                    solve( !KU( ~Np ) @ #vk.72 )
                                                      case Prov_SendNonce_1
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case c_cmac
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2_case_1
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case Prov_Confirmation_2_case_2
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case Prov_Confirmation_2_case_3
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case Prov_Confirmation_2_case_4
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case Prov_Confirmation_2_case_5
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case Prov_Confirmation_2_case_6
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_1
                          solve( !KU( ~Np ) @ #vk.56 )
                            case Prov_SendNonce_1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_fst
                          solve( !KU( ~random ) @ #vk.56 )
                            case NDev_Confirmation_1
                            solve( !KU( ~Nd ) @ #vk.60 )
                              case NDev_SendNonce_1
                              solve( (Cp_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Np_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cp_1, mo, Np_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( splitEqs(11) )
                                  case split_case_1
                                  solve( !KU( snd(~random) ) @ #vk.56 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.66 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<z, '1'>+<z.1, '2'>),
                                                               s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<z, '1'>+<z.1, '2'>),
                                                            s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                               ) @ #vk.61 )
                                          case c_cmac
                                          solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.72 )
                                            case c_s1
                                            solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.77 )
                                              case c_s1
                                              solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>
                                                               ),
                                                               s1(<'g'^~sk, DHpkD>))
                                                     ) @ #vk.71 )
                                                case c_cmac
                                                solve( !KU( cmac('prck',
                                                                 cmac((<z, '1'>+<z.1, '2'>),
                                                                      s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                       ) @ #vk.73 )
                                                  case c_cmac
                                                  solve( !KU( cmac((
                                                                    <
                                                                     cmac('prck',
                                                                          cmac((<z, '1'>+<z.1, '2'>),
                                                                               s1(<<z, z.1>^inv(~sk.1), 
                                                                                   'g'^~sk.1>))), 
                                                                     '1'>+
                                                                    <fst(~random), '2'>),
                                                                   Np_1)
                                                         ) @ #vk.73 )
                                                    case NDev_Confirmation_1
                                                    by contradiction /* cyclic */
                                                  next
                                                    case c_cmac
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case c_snd
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case split_case_2
                                  solve( !KU( snd(~random) ) @ #vk.56 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.66 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst(ECDHSecret.1), '1'>+
                                                                <snd(ECDHSecret.1), '2'>),
                                                               s1(<DHpkP, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>
                                                            ),
                                                            s1(<DHpkP, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                               ) @ #vk.61 )
                                          case c_cmac
                                          solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.72 )
                                            case c_s1
                                            solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.77 )
                                              case c_s1
                                              solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>
                                                               ),
                                                               s1(<'g'^~sk, DHpkD>))
                                                     ) @ #vk.71 )
                                                case c_cmac
                                                solve( !KU( cmac('prck',
                                                                 cmac((<fst(ECDHSecret.1), '1'>+
                                                                       <snd(ECDHSecret.1), '2'>),
                                                                      s1(<DHpkP, 'g'^~sk.1>)))
                                                       ) @ #vk.73 )
                                                  case c_cmac
                                                  solve( !KU( cmac((
                                                                    <
                                                                     cmac('prck',
                                                                          cmac((<fst(ECDHSecret.1), '1'>+
                                                                                <snd(ECDHSecret.1), '2'>),
                                                                               s1(<DHpkP, 'g'^~sk.1>))), 
                                                                     '1'>+
                                                                    <fst(~random), '2'>),
                                                                   Np_1)
                                                         ) @ #vk.73 )
                                                    case NDev_Confirmation_1
                                                    by contradiction /* cyclic */
                                                  next
                                                    case Prov_Confirmation_1
                                                    solve( !KU( ~Np ) @ #vk.72 )
                                                      case Prov_SendNonce_1
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case c_cmac
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case c_snd
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1_case_1
                            solve( !KU( ~Np ) @ #vk.57 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_1_case_2
                            solve( !KU( ~Np ) @ #vk.57 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_1_case_3
                            solve( !KU( ~Np ) @ #vk.57 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_1_case_4
                            solve( !KU( ~Np ) @ #vk.57 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_1_case_5
                            solve( !KU( ~Np ) @ #vk.57 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_1_case_6
                            solve( !KU( ~Np ) @ #vk.57 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_2_case_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2_case_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2_case_3
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2_case_4
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2_case_5
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_2_case_6
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( cmac((
                                  <
                                   cmac('prck',
                                        cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                                   '1'>+
                                  <fst(~random), '2'>),
                                 Nd_1)
                       ) @ #vk.12 )
                  case Prov_Confirmation_1
                  by contradiction /* from formulas */
                next
                  case c_cmac
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                                     '1'>+
                                    <snd(~random), '2'>),
                                   Nd_2)
                         ) @ #vk.11 )
                    case Prov_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( cmac('prsk',
                                     cmac((<z, '1'>+<z.1, '2'>),
                                          s1(<s1(<'g'^~sk, <z, z.1>^inv(~sk)>), ~Np.1, Nd_2>)))
                           ) @ #vk.45 )
                      case c_cmac
                      solve( !KU( <z, z.1>^inv(~sk) ) @ #vk.14 )
                        case c_exp
                        by solve( !KU( ~sk ) @ #vk.58 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Receive_UserDevice_case_2
          by solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User, AuthValue_In
                    ) ▶₃ #vr.10 )
        qed
      qed
    qed
  next
    case Prov_Check_case_2
    solve( (Cd_1 =
            cmac((
                  <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                  <fst(~m), '2'>),
                 Nd_1))  ∥
           (∃ mk mo.
             ((mk+mo) =
              (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
               <fst(~m), '2'>)) ∧
             (mk = rm(Cd_1, mo, Nd_1))
            ∧
             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
      case case_1
      solve( (Cd_2 =
              cmac((
                    <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                    <snd(~m), '2'>),
                   Nd_2))  ∥
             (∃ mk mo.
               ((mk+mo) =
                (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                 <snd(~m), '2'>)) ∧
               (mk = rm(Cd_2, mo, Nd_2))
              ∧
               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
        case case_1
        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User, 'Input'
               ) ▶₃ #vr.10 )
          case Receive_UserDevice_case_1
          solve( In_UD( <'AskForInput', 'Device', 'User'>, NDev, $User, 'Input'
                 ) ▶₄ #vr.10 )
            case Receive_UserDevice
            solve( !KU( ~NetKey ) @ #vk )
              case Prov_Distribute
              solve( splitEqs(2) )
                case split_case_1
                solve( !KU( cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                             s1(<'g'^~sk, DHpkD>))), 
                                   '1'>+
                                  <fst(~m), '2'>),
                                 Nd_1)
                       ) @ #vk.12 )
                  case NDev_Confirmation_1
                  solve( !KU( ~Nd ) @ #vk.12 )
                    case NDev_SendNonce_1
                    solve( (Cp_1 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <fst(~m), '2'>),
                                 Np_1))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <fst(~m), '2'>)) ∧
                             (mk = rm(Cp_1, mo, Np_1))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <snd(~m), '2'>),
                                       Nd_2)
                             ) @ #vk.12 )
                        case NDev_Confirmation_2
                        solve( !KU( ~Nd.1 ) @ #vk.12 )
                          case NDev_SendNonce_2
                          solve( (Cp_2 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <snd(~m), '2'>),
                                       Np_2))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk, 'g'^~sk.1>))), 
                                      '1'>+
                                     <snd(~m), '2'>)) ∧
                                   (mk = rm(Cp_2, mo, Np_2))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( cmac('prsk',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>)))
                                   ) @ #vk.46 )
                              case c_cmac
                              solve( !KU( cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~m), '2'>),
                                               Np_1)
                                     ) @ #vk.47 )
                                case NDev_Confirmation_1
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1
                                solve( !KU( cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~m), '2'>),
                                                 Np_2)
                                       ) @ #vk.49 )
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                   ),
                                                   s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>))
                                         ) @ #vk.52 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>) ) @ #vk.55 )
                                      case c_s1
                                      solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.62 )
                                        case c_s1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.60 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.64 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.65 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.65 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.67 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                   ),
                                                   s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>))
                                         ) @ #vk.53 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>) ) @ #vk.62 )
                                      case c_s1
                                      solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.67 )
                                        case c_s1
                                        solve( !KU( cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>)))
                                               ) @ #vk.62 )
                                          case NDev_Confirmation_1
                                          solve( !KU( snd(~m) ) @ #vk.64 )
                                            case NDev_Confirmation_2
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_2
                                            solve( !KU( ~Np.1 ) @ #vk.70 )
                                              case Prov_SendNonce_2
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case c_snd
                                            solve( !KU( ~m ) @ #vk.72 )
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_2
                                              solve( !KU( ~Np.1 ) @ #vk.71 )
                                                case Prov_SendNonce_2
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        next
                                          case Prov_Confirmation_1
                                          solve( !KU( snd(~m) ) @ #vk.64 )
                                            case NDev_Confirmation_2
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_2
                                            solve( !KU( ~Np.1 ) @ #vk.70 )
                                              case Prov_SendNonce_2
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case c_snd
                                            solve( !KU( ~m ) @ #vk.72 )
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_2
                                              solve( !KU( ~Np.1 ) @ #vk.71 )
                                                case Prov_SendNonce_2
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        next
                                          case c_cmac
                                          solve( !KU( snd(~m) ) @ #vk.64 )
                                            case NDev_Confirmation_2
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_2
                                            solve( !KU( ~Np.1 ) @ #vk.69 )
                                              case Prov_SendNonce_2
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case c_snd
                                            solve( !KU( ~m ) @ #vk.72 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_2
                                              solve( !KU( ~Np.1 ) @ #vk.70 )
                                                case Prov_SendNonce_2
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case c_cmac
                                solve( !KU( cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~m), '2'>),
                                                 Np_2)
                                       ) @ #vk.50 )
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                   ),
                                                   s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>))
                                         ) @ #vk.54 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>) ) @ #vk.62 )
                                      case c_s1
                                      solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.67 )
                                        case c_s1
                                        solve( !KU( cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>)))
                                               ) @ #vk.62 )
                                          case NDev_Confirmation_1
                                          by contradiction /* cyclic */
                                        next
                                          case Prov_Confirmation_1
                                          solve( !KU( ~Np ) @ #vk.69 )
                                            case Prov_SendNonce_1
                                            by contradiction /* cyclic */
                                          qed
                                        next
                                          case c_cmac
                                          solve( !KU( fst(~m) ) @ #vk.64 )
                                            case NDev_Confirmation_1
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_1
                                            solve( !KU( ~Np ) @ #vk.71 )
                                              case Prov_SendNonce_1
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case c_fst
                                            solve( !KU( ~m ) @ #vk.71 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              solve( !KU( ~Np ) @ #vk.72 )
                                                case Prov_SendNonce_1
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case Prov_Confirmation_2
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                   ),
                                                   s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>))
                                         ) @ #vk.55 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>) ) @ #vk.65 )
                                      case c_s1
                                      solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.70 )
                                        case c_s1
                                        solve( !KU( cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>)))
                                               ) @ #vk.63 )
                                          case NDev_Confirmation_1
                                          by contradiction /* cyclic */
                                        next
                                          case Prov_Confirmation_1
                                          solve( !KU( ~Np ) @ #vk.73 )
                                            case Prov_SendNonce_1
                                            by contradiction /* cyclic */
                                          qed
                                        next
                                          case c_cmac
                                          solve( !KU( fst(~m) ) @ #vk.65 )
                                            case NDev_Confirmation_1
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_1
                                            solve( !KU( ~Np ) @ #vk.75 )
                                              case Prov_SendNonce_1
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case c_fst
                                            solve( !KU( ~m ) @ #vk.75 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              solve( !KU( ~Np ) @ #vk.76 )
                                                case Prov_SendNonce_1
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case Prov_Confirmation_2
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case Prov_Confirmation_2
                        by contradiction /* from formulas */
                      next
                        case c_cmac
                        solve( !KU( cmac('prsk',
                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                              s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>)))
                               ) @ #vk.45 )
                          case c_cmac
                          solve( !KU( cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~m), '2'>),
                                           Np_1)
                                 ) @ #vk.47 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>)))
                                   ) @ #vk.49 )
                              case NDev_Confirmation_1
                              solve( !KU( snd(~m) ) @ #vk.51 )
                                case NDev_Confirmation_2
                                solve( !KU( ~Nd.1 ) @ #vk.59 )
                                  case NDev_SendNonce_2
                                  solve( (Cp_2 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <snd(~m), '2'>),
                                               Np_2))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                         <snd('g'^(~sk*~sk.1)), '2'>),
                                                        s1(<'g'^~sk, 'g'^~sk.1>))), 
                                              '1'>+
                                             <snd(~m), '2'>)) ∧
                                           (mk = rm(Cp_2, mo, Np_2))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                           ) @ #vk.58 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.65 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.70 )
                                          case c_s1
                                          solve( !KU( fst(~m) ) @ #vk.67 )
                                            case c_fst
                                            solve( !KU( ~m ) @ #vk.73 )
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case Prov_Confirmation_2
                                solve( !KU( ~Np.1 ) @ #vk.57 )
                                  case Prov_SendNonce_2
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_snd
                                solve( !KU( ~m ) @ #vk.57 )
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.60 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~m), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                           <snd('g'^(~sk*~sk.1)), '2'>),
                                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~m), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                             ) @ #vk.59 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.66 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.71 )
                                            case c_s1
                                            solve( !KU( fst(~m) ) @ #vk.68 )
                                              case c_fst
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( ~Np.1 ) @ #vk.58 )
                                    case Prov_SendNonce_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_1
                              solve( !KU( snd(~m) ) @ #vk.51 )
                                case NDev_Confirmation_2
                                solve( !KU( ~Nd.1 ) @ #vk.59 )
                                  case NDev_SendNonce_2
                                  solve( (Cp_2 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <snd(~m), '2'>),
                                               Np_2))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                         <snd('g'^(~sk*~sk.1)), '2'>),
                                                        s1(<'g'^~sk, 'g'^~sk.1>))), 
                                              '1'>+
                                             <snd(~m), '2'>)) ∧
                                           (mk = rm(Cp_2, mo, Np_2))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                           ) @ #vk.58 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.65 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.70 )
                                          case c_s1
                                          solve( !KU( fst(~m) ) @ #vk.67 )
                                            case c_fst
                                            solve( !KU( ~m ) @ #vk.73 )
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case Prov_Confirmation_2
                                solve( !KU( ~Np.1 ) @ #vk.57 )
                                  case Prov_SendNonce_2
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_snd
                                solve( !KU( ~m ) @ #vk.57 )
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.60 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~m), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                           <snd('g'^(~sk*~sk.1)), '2'>),
                                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~m), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                             ) @ #vk.59 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.66 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.71 )
                                            case c_s1
                                            solve( !KU( fst(~m) ) @ #vk.68 )
                                              case c_fst
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( ~Np.1 ) @ #vk.58 )
                                    case Prov_SendNonce_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            next
                              case c_cmac
                              solve( !KU( snd(~m) ) @ #vk.51 )
                                case NDev_Confirmation_2
                                solve( !KU( ~Nd.1 ) @ #vk.59 )
                                  case NDev_SendNonce_2
                                  solve( (Cp_2 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <snd(~m), '2'>),
                                               Np_2))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                         <snd('g'^(~sk*~sk.1)), '2'>),
                                                        s1(<'g'^~sk, 'g'^~sk.1>))), 
                                              '1'>+
                                             <snd(~m), '2'>)) ∧
                                           (mk = rm(Cp_2, mo, Np_2))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                           ) @ #vk.57 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.65 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.70 )
                                          case c_s1
                                          solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))
                                                 ) @ #vk.67 )
                                            case c_cmac
                                            solve( !KU( cmac((
                                                              <
                                                               cmac('prck',
                                                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                          <snd('g'^(~sk*~sk.1)), '2'>),
                                                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                               '1'>+
                                                              <snd(~m), '2'>),
                                                             Np_2)
                                                   ) @ #vk.68 )
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_2
                                              solve( !KU( ~Np.1 ) @ #vk.69 )
                                                case Prov_SendNonce_2
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case c_cmac
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case Prov_Confirmation_2
                                solve( !KU( ~Np.1 ) @ #vk.57 )
                                  case Prov_SendNonce_2
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_snd
                                solve( !KU( ~m ) @ #vk.57 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.60 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~m), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                           <snd('g'^(~sk*~sk.1)), '2'>),
                                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~m), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                             ) @ #vk.58 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.67 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.72 )
                                            case c_s1
                                            solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))
                                                   ) @ #vk.68 )
                                              case c_cmac
                                              solve( !KU( fst(~m) ) @ #vk.70 )
                                                case NDev_Confirmation_1
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <snd(~m), '2'>),
                                                                 Np_2)
                                                       ) @ #vk.70 )
                                                  case NDev_Confirmation_2
                                                  by contradiction /* cyclic */
                                                next
                                                  case Prov_Confirmation_2
                                                  solve( !KU( ~Np.1 ) @ #vk.71 )
                                                    case Prov_SendNonce_2
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case Prov_Confirmation_1
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <snd(~m), '2'>),
                                                                 Np_2)
                                                       ) @ #vk.70 )
                                                  case NDev_Confirmation_2
                                                  by contradiction /* cyclic */
                                                next
                                                  case Prov_Confirmation_2
                                                  solve( !KU( ~Np.1 ) @ #vk.71 )
                                                    case Prov_SendNonce_2
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case c_fst
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( ~Np.1 ) @ #vk.58 )
                                    case Prov_SendNonce_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          next
                            case c_cmac
                            solve( !KU( cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>)))
                                   ) @ #vk.50 )
                              case NDev_Confirmation_1
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_1
                              solve( !KU( ~Np ) @ #vk.58 )
                                case Prov_SendNonce_1
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_cmac
                              solve( !KU( snd(~m) ) @ #vk.52 )
                                case NDev_Confirmation_2
                                solve( !KU( ~Nd.1 ) @ #vk.62 )
                                  case NDev_SendNonce_2
                                  solve( (Cp_2 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <snd(~m), '2'>),
                                               Np_2))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                         <snd('g'^(~sk*~sk.1)), '2'>),
                                                        s1(<'g'^~sk, 'g'^~sk.1>))), 
                                              '1'>+
                                             <snd(~m), '2'>)) ∧
                                           (mk = rm(Cp_2, mo, Np_2))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                           ) @ #vk.59 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.68 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.73 )
                                          case c_s1
                                          solve( !KU( fst(~m) ) @ #vk.68 )
                                            case NDev_Confirmation_1
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_1
                                            solve( !KU( ~Np ) @ #vk.76 )
                                              case Prov_SendNonce_1
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case c_fst
                                            solve( !KU( ~m ) @ #vk.76 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case Prov_Confirmation_2
                                solve( !KU( ~Np.1 ) @ #vk.60 )
                                  case Prov_SendNonce_2
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_snd
                                solve( !KU( ~m ) @ #vk.60 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.63 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~m), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                           <snd('g'^(~sk*~sk.1)), '2'>),
                                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~m), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                             ) @ #vk.60 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.69 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.74 )
                                            case c_s1
                                            solve( !KU( fst(~m) ) @ #vk.69 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              solve( !KU( ~Np ) @ #vk.77 )
                                                case Prov_SendNonce_1
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case c_fst
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( ~Np.1 ) @ #vk.61 )
                                    case Prov_SendNonce_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Prov_Confirmation_1
                  by contradiction /* from formulas */
                next
                  case c_cmac
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                               s1(<'g'^~sk, DHpkD>))), 
                                     '1'>+
                                    <snd(~m), '2'>),
                                   Nd_2)
                         ) @ #vk.11 )
                    case NDev_Confirmation_2
                    solve( (Cp_1 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <fst(~m), '2'>),
                                 Np_1))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <fst(~m), '2'>)) ∧
                             (mk = rm(Cp_1, mo, Np_1))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( ~Nd ) @ #vk.11 )
                        case NDev_SendNonce_2
                        solve( (Cp_2 =
                                cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                       '1'>+
                                      <snd(~m), '2'>),
                                     Np_2))  ∥
                               (∃ mk mo.
                                 ((mk+mo) =
                                  (
                                   <
                                    cmac('prck',
                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                    '1'>+
                                   <snd(~m), '2'>)) ∧
                                 (mk = rm(Cp_2, mo, Np_2))
                                ∧
                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                          case case_1
                          solve( !KU( cmac('prsk',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>)))
                                 ) @ #vk.48 )
                            case c_cmac
                            solve( !KU( cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>)))
                                   ) @ #vk.49 )
                              case NDev_Confirmation_1
                              solve( !KU( fst(~m) ) @ #vk.51 )
                                case c_fst
                                solve( !KU( ~m ) @ #vk.60 )
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_2
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case Prov_Confirmation_1
                              solve( !KU( ~Np ) @ #vk.59 )
                                case Prov_SendNonce_1
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_cmac
                              solve( !KU( fst(~m) ) @ #vk.51 )
                                case NDev_Confirmation_1
                                solve( !KU( cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <fst(~m), '2'>),
                                                 Np_1)
                                       ) @ #vk.55 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~m), '2'>),
                                                   Np_2)
                                         ) @ #vk.54 )
                                    case NDev_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>))
                                           ) @ #vk.58 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>) ) @ #vk.65 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.70 )
                                          case c_s1
                                          solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))
                                                 ) @ #vk.68 )
                                            case c_cmac
                                            solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.70 )
                                              case c_fst
                                              solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.72 )
                                                case NDev_SendPK_InBand
                                                by solve( !KU( ~sk ) @ #vk.73 )
                                              next
                                                case Prov_SendPK_InBand
                                                by solve( !KU( ~sk.1 ) @ #vk.73 )
                                              next
                                                case c_exp
                                                by solve( !KU( ~sk ) @ #vk.75 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case c_cmac
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>))
                                           ) @ #vk.60 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>) ) @ #vk.68 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.73 )
                                          case c_s1
                                          solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))
                                                 ) @ #vk.70 )
                                            case c_cmac
                                            solve( !KU( snd(~m) ) @ #vk.72 )
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_2
                                              solve( !KU( ~Np.1 ) @ #vk.75 )
                                                case Prov_SendNonce_2
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case c_snd
                                              solve( !KU( ~m ) @ #vk.76 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case NDev_Confirmation_2
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_2
                                                solve( !KU( ~Np.1 ) @ #vk.76 )
                                                  case Prov_SendNonce_2
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_cmac
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_1
                                solve( !KU( ~Np ) @ #vk.61 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_fst
                                solve( !KU( ~m ) @ #vk.61 )
                                  case NDev_Confirmation_1
                                  solve( !KU( cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <fst(~m), '2'>),
                                                   Np_1)
                                         ) @ #vk.56 )
                                    case NDev_Confirmation_1
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_1
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~m), '2'>),
                                                     Np_2)
                                           ) @ #vk.55 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>))
                                             ) @ #vk.59 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>) ) @ #vk.67 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.72 )
                                            case c_s1
                                            solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))
                                                   ) @ #vk.69 )
                                              case c_cmac
                                              solve( !KU( snd(~m) ) @ #vk.71 )
                                                case NDev_Confirmation_2
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_2
                                                by contradiction /* cyclic */
                                              next
                                                case c_snd
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>))
                                             ) @ #vk.61 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>) ) @ #vk.69 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.74 )
                                            case c_s1
                                            solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))
                                                   ) @ #vk.71 )
                                              case c_cmac
                                              solve( !KU( snd(~m) ) @ #vk.73 )
                                                case NDev_Confirmation_2
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_2
                                                by contradiction /* cyclic */
                                              next
                                                case c_snd
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case c_cmac
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( ~Np ) @ #vk.62 )
                                    case Prov_SendNonce_1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case Prov_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( cmac('prsk',
                                     cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                          s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>)))
                           ) @ #vk.45 )
                      case c_cmac
                      solve( !KU( cmac('prck',
                                       cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                            s1(<'g'^~sk, DHpkD>)))
                             ) @ #vk.46 )
                        case NDev_Confirmation_1
                        solve( !KU( ~Nd ) @ #vk.56 )
                          case NDev_SendNonce_1
                          solve( (Cp_1 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <fst(~m), '2'>),
                                       Np_1))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk, 'g'^~sk.1>))), 
                                      '1'>+
                                     <fst(~m), '2'>)) ∧
                                   (mk = rm(Cp_1, mo, Np_1))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( fst(~m) ) @ #vk.51 )
                              case c_fst
                              solve( !KU( ~m ) @ #vk.59 )
                                case NDev_Confirmation_2
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np ) @ #vk.54 )
                          case Prov_SendNonce_1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_cmac
                        solve( !KU( fst(~m) ) @ #vk.48 )
                          case NDev_Confirmation_1
                          solve( !KU( ~Nd ) @ #vk.59 )
                            case NDev_SendNonce_1
                            solve( (Cp_1 =
                                    cmac((
                                          <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                           '1'>+
                                          <fst(~m), '2'>),
                                         Np_1))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), '1'
                                       >+
                                       <fst(~m), '2'>)) ∧
                                     (mk = rm(Cp_1, mo, Np_1))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( splitEqs(9) )
                                case split_case_1
                                solve( !KU( snd(~m) ) @ #vk.55 )
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.65 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<z, '1'>+<z.1, '2'>),
                                                             s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~m), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<z, '1'>+<z.1, '2'>),
                                                          s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~m), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                       s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                             ) @ #vk.60 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.71 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.76 )
                                            case c_s1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<z, '1'>+<z.1, '2'>),
                                                                    s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                     ) @ #vk.72 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<z, '1'>+<z.1, '2'>),
                                                                             s1(<<z, z.1>^inv(~sk.1), 
                                                                                 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~m), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.72 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( ~Np.1 ) @ #vk.63 )
                                    case Prov_SendNonce_2
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_snd
                                  solve( !KU( ~m ) @ #vk.63 )
                                    case NDev_Confirmation_1
                                    by contradiction /* cyclic */
                                  next
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.66 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<z, '1'>+<z.1, '2'>),
                                                               s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~m), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<z, '1'>+<z.1, '2'>),
                                                            s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~m), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                               ) @ #vk.61 )
                                          case c_cmac
                                          solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.72 )
                                            case c_s1
                                            solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.77 )
                                              case c_s1
                                              solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>
                                                               ),
                                                               s1(<'g'^~sk, DHpkD>))
                                                     ) @ #vk.71 )
                                                case c_cmac
                                                solve( !KU( cmac('prck',
                                                                 cmac((<z, '1'>+<z.1, '2'>),
                                                                      s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                       ) @ #vk.73 )
                                                  case c_cmac
                                                  solve( !KU( cmac((
                                                                    <
                                                                     cmac('prck',
                                                                          cmac((<z, '1'>+<z.1, '2'>),
                                                                               s1(<<z, z.1>^inv(~sk.1), 
                                                                                   'g'^~sk.1>))), 
                                                                     '1'>+
                                                                    <fst(~m), '2'>),
                                                                   Np_1)
                                                         ) @ #vk.73 )
                                                    case NDev_Confirmation_1
                                                    by contradiction /* cyclic */
                                                  next
                                                    case c_cmac
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              next
                                case split_case_2
                                solve( !KU( snd(~m) ) @ #vk.55 )
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.65 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst(ECDHSecret.1), '1'>+
                                                              <snd(ECDHSecret.1), '2'>),
                                                             s1(<DHpkP, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~m), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                          s1(<DHpkP, 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~m), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                       s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                             ) @ #vk.60 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.71 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.76 )
                                            case c_s1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<fst(ECDHSecret.1), '1'>+
                                                                     <snd(ECDHSecret.1), '2'>),
                                                                    s1(<DHpkP, 'g'^~sk.1>)))
                                                     ) @ #vk.72 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst(ECDHSecret.1), '1'>+
                                                                              <snd(ECDHSecret.1), '2'>),
                                                                             s1(<DHpkP, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~m), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.72 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case Prov_Confirmation_1
                                                  solve( !KU( ~Np ) @ #vk.71 )
                                                    case Prov_SendNonce_1
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( ~Np.1 ) @ #vk.63 )
                                    case Prov_SendNonce_2
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_snd
                                  solve( !KU( ~m ) @ #vk.63 )
                                    case NDev_Confirmation_1
                                    by contradiction /* cyclic */
                                  next
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.66 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst(ECDHSecret.1), '1'>+
                                                                <snd(ECDHSecret.1), '2'>),
                                                               s1(<DHpkP, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~m), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>
                                                            ),
                                                            s1(<DHpkP, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~m), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                               ) @ #vk.61 )
                                          case c_cmac
                                          solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.72 )
                                            case c_s1
                                            solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.77 )
                                              case c_s1
                                              solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>
                                                               ),
                                                               s1(<'g'^~sk, DHpkD>))
                                                     ) @ #vk.71 )
                                                case c_cmac
                                                solve( !KU( cmac('prck',
                                                                 cmac((<fst(ECDHSecret.1), '1'>+
                                                                       <snd(ECDHSecret.1), '2'>),
                                                                      s1(<DHpkP, 'g'^~sk.1>)))
                                                       ) @ #vk.73 )
                                                  case c_cmac
                                                  solve( !KU( cmac((
                                                                    <
                                                                     cmac('prck',
                                                                          cmac((<fst(ECDHSecret.1), '1'>+
                                                                                <snd(ECDHSecret.1), '2'>),
                                                                               s1(<DHpkP, 'g'^~sk.1>))), 
                                                                     '1'>+
                                                                    <fst(~m), '2'>),
                                                                   Np_1)
                                                         ) @ #vk.73 )
                                                    case NDev_Confirmation_1
                                                    by contradiction /* cyclic */
                                                  next
                                                    case Prov_Confirmation_1
                                                    solve( !KU( ~Np ) @ #vk.72 )
                                                      case Prov_SendNonce_1
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case c_cmac
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_1
                          solve( !KU( ~Np ) @ #vk.56 )
                            case Prov_SendNonce_1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_fst
                          solve( !KU( ~m ) @ #vk.56 )
                            case NDev_Confirmation_1
                            solve( !KU( ~Nd ) @ #vk.60 )
                              case NDev_SendNonce_1
                              solve( (Cp_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~m), '2'>),
                                           Np_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                          '1'>+
                                         <fst(~m), '2'>)) ∧
                                       (mk = rm(Cp_1, mo, Np_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( splitEqs(9) )
                                  case split_case_1
                                  solve( !KU( snd(~m) ) @ #vk.56 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.66 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<z, '1'>+<z.1, '2'>),
                                                               s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~m), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<z, '1'>+<z.1, '2'>),
                                                            s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~m), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                               ) @ #vk.61 )
                                          case c_cmac
                                          solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.72 )
                                            case c_s1
                                            solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.77 )
                                              case c_s1
                                              solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>
                                                               ),
                                                               s1(<'g'^~sk, DHpkD>))
                                                     ) @ #vk.71 )
                                                case c_cmac
                                                solve( !KU( cmac('prck',
                                                                 cmac((<z, '1'>+<z.1, '2'>),
                                                                      s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                       ) @ #vk.73 )
                                                  case c_cmac
                                                  solve( !KU( cmac((
                                                                    <
                                                                     cmac('prck',
                                                                          cmac((<z, '1'>+<z.1, '2'>),
                                                                               s1(<<z, z.1>^inv(~sk.1), 
                                                                                   'g'^~sk.1>))), 
                                                                     '1'>+
                                                                    <fst(~m), '2'>),
                                                                   Np_1)
                                                         ) @ #vk.73 )
                                                    case NDev_Confirmation_1
                                                    by contradiction /* cyclic */
                                                  next
                                                    case c_cmac
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case c_snd
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case split_case_2
                                  solve( !KU( snd(~m) ) @ #vk.56 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.66 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst(ECDHSecret.1), '1'>+
                                                                <snd(ECDHSecret.1), '2'>),
                                                               s1(<DHpkP, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~m), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>
                                                            ),
                                                            s1(<DHpkP, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~m), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                               ) @ #vk.61 )
                                          case c_cmac
                                          solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.72 )
                                            case c_s1
                                            solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.77 )
                                              case c_s1
                                              solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>
                                                               ),
                                                               s1(<'g'^~sk, DHpkD>))
                                                     ) @ #vk.71 )
                                                case c_cmac
                                                solve( !KU( cmac('prck',
                                                                 cmac((<fst(ECDHSecret.1), '1'>+
                                                                       <snd(ECDHSecret.1), '2'>),
                                                                      s1(<DHpkP, 'g'^~sk.1>)))
                                                       ) @ #vk.73 )
                                                  case c_cmac
                                                  solve( !KU( cmac((
                                                                    <
                                                                     cmac('prck',
                                                                          cmac((<fst(ECDHSecret.1), '1'>+
                                                                                <snd(ECDHSecret.1), '2'>),
                                                                               s1(<DHpkP, 'g'^~sk.1>))), 
                                                                     '1'>+
                                                                    <fst(~m), '2'>),
                                                                   Np_1)
                                                         ) @ #vk.73 )
                                                    case NDev_Confirmation_1
                                                    by contradiction /* cyclic */
                                                  next
                                                    case Prov_Confirmation_1
                                                    solve( !KU( ~Np ) @ #vk.72 )
                                                      case Prov_SendNonce_1
                                                      by contradiction /* cyclic */
                                                    qed
                                                  next
                                                    case c_cmac
                                                    by contradiction /* cyclic */
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case c_snd
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_2
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( ~Np ) @ #vk.57 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case split_case_2
                solve( !KU( cmac((
                                  <
                                   cmac('prck',
                                        cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                                   '1'>+
                                  <fst(~m), '2'>),
                                 Nd_1)
                       ) @ #vk.12 )
                  case Prov_Confirmation_1
                  by contradiction /* from formulas */
                next
                  case c_cmac
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                                     '1'>+
                                    <snd(~m), '2'>),
                                   Nd_2)
                         ) @ #vk.11 )
                    case Prov_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( cmac('prsk',
                                     cmac((<z, '1'>+<z.1, '2'>),
                                          s1(<s1(<'g'^~sk, <z, z.1>^inv(~sk)>), ~Np.1, Nd_2>)))
                           ) @ #vk.45 )
                      case c_cmac
                      solve( !KU( <z, z.1>^inv(~sk) ) @ #vk.14 )
                        case c_exp
                        by solve( !KU( ~sk ) @ #vk.58 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Receive_UserDevice_case_2
          solve( In_UD( <'AskForInput', 'Device', 'User'>, NDev, $User, 'Input'
                 ) ▶₄ #vr.10 )
            case Receive_UserDevice
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Prov_Check_case_3
    solve( (Cd_1 =
            cmac((
                  <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                  <fst(~random), '2'>),
                 Nd_1))  ∥
           (∃ mk mo.
             ((mk+mo) =
              (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
               <fst(~random), '2'>)) ∧
             (mk = rm(Cd_1, mo, Nd_1))
            ∧
             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
      case case_1
      solve( (Cd_2 =
              cmac((
                    <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                    <snd(~random), '2'>),
                   Nd_2))  ∥
             (∃ mk mo.
               ((mk+mo) =
                (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                 <snd(~random), '2'>)) ∧
               (mk = rm(Cd_2, mo, Nd_2))
              ∧
               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
        case case_1
        solve( !KU( ~NetKey ) @ #vk )
          case Prov_Distribute
          solve( splitEqs(2) )
            case split_case_1
            solve( !KU( cmac((
                              <
                               cmac('prck',
                                    cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                         s1(<'g'^~sk, DHpkD>))), 
                               '1'>+
                              <fst(~random), '2'>),
                             Nd_1)
                   ) @ #vk.13 )
              case NDev_Confirmation_1_case_1
              solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                     ) ▶₂ #vr.25 )
                case Receive_UserDevice
                solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, AuthValue_In
                       ) ▶₃ #vr.25 )
                  case Receive_UserDevice
                  by contradiction /* from formulas */
                qed
              qed
            next
              case NDev_Confirmation_1_case_2
              solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, AuthValue_In
                     ) ▶₂ #vr.25 )
                case Receive_UserDevice
                solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                       ) ▶₃ #vr.25 )
                  case Receive_UserDevice
                  solve( !KU( ~Nd ) @ #vk.13 )
                    case NDev_SendNonce_1
                    solve( (Cp_1 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <fst(~random), '2'>),
                                 Np_1))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <fst(~random), '2'>)) ∧
                             (mk = rm(Cp_1, mo, Np_1))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <snd(~random), '2'>),
                                       Nd_2)
                             ) @ #vk.13 )
                        case NDev_Confirmation_2
                        solve( !KU( ~Nd.1 ) @ #vk.13 )
                          case NDev_SendNonce_2
                          solve( (Cp_2 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <snd(~random), '2'>),
                                       Np_2))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk, 'g'^~sk.1>))), 
                                      '1'>+
                                     <snd(~random), '2'>)) ∧
                                   (mk = rm(Cp_2, mo, Np_2))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( cmac('prsk',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>)))
                                   ) @ #vk.31 )
                              case c_cmac
                              solve( !KU( cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1)
                                     ) @ #vk.41 )
                                case NDev_Confirmation_1
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1
                                solve( !KU( cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2)
                                       ) @ #vk.51 )
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                   ),
                                                   s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>))
                                         ) @ #vk.54 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>) ) @ #vk.57 )
                                      case c_s1
                                      solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.64 )
                                        case c_s1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.62 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.66 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.67 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.67 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.69 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                   ),
                                                   s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>))
                                         ) @ #vk.55 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>) ) @ #vk.64 )
                                      case c_s1
                                      solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.69 )
                                        case c_s1
                                        solve( !KU( cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>)))
                                               ) @ #vk.64 )
                                          case NDev_Confirmation_1
                                          solve( !KU( snd(~random) ) @ #vk.66 )
                                            case NDev_Confirmation_2
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_2
                                            solve( !KU( ~Np.1 ) @ #vk.72 )
                                              case Prov_SendNonce_2
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case c_snd
                                            solve( !KU( ~random ) @ #vk.74 )
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_2
                                              solve( !KU( ~Np.1 ) @ #vk.73 )
                                                case Prov_SendNonce_2
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        next
                                          case Prov_Confirmation_1
                                          solve( !KU( snd(~random) ) @ #vk.66 )
                                            case NDev_Confirmation_2
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_2
                                            solve( !KU( ~Np.1 ) @ #vk.72 )
                                              case Prov_SendNonce_2
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case c_snd
                                            solve( !KU( ~random ) @ #vk.74 )
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_2
                                              solve( !KU( ~Np.1 ) @ #vk.73 )
                                                case Prov_SendNonce_2
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        next
                                          case c_cmac
                                          solve( !KU( snd(~random) ) @ #vk.66 )
                                            case NDev_Confirmation_2
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_2
                                            solve( !KU( ~Np.1 ) @ #vk.71 )
                                              case Prov_SendNonce_2
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case c_snd
                                            solve( !KU( ~random ) @ #vk.74 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_2
                                              solve( !KU( ~Np.1 ) @ #vk.72 )
                                                case Prov_SendNonce_2
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case c_cmac
                                solve( !KU( cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2)
                                       ) @ #vk.52 )
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                   ),
                                                   s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>))
                                         ) @ #vk.56 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>) ) @ #vk.64 )
                                      case c_s1
                                      solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.69 )
                                        case c_s1
                                        solve( !KU( cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>)))
                                               ) @ #vk.64 )
                                          case NDev_Confirmation_1
                                          by contradiction /* cyclic */
                                        next
                                          case Prov_Confirmation_1
                                          solve( !KU( ~Np ) @ #vk.71 )
                                            case Prov_SendNonce_1
                                            by contradiction /* cyclic */
                                          qed
                                        next
                                          case c_cmac
                                          solve( !KU( fst(~random) ) @ #vk.66 )
                                            case NDev_Confirmation_1
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_1
                                            solve( !KU( ~Np ) @ #vk.73 )
                                              case Prov_SendNonce_1
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case c_fst
                                            solve( !KU( ~random ) @ #vk.73 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              solve( !KU( ~Np ) @ #vk.74 )
                                                case Prov_SendNonce_1
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case Prov_Confirmation_2
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                   ),
                                                   s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>))
                                         ) @ #vk.57 )
                                    case c_cmac
                                    solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>) ) @ #vk.67 )
                                      case c_s1
                                      solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.72 )
                                        case c_s1
                                        solve( !KU( cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>)))
                                               ) @ #vk.65 )
                                          case NDev_Confirmation_1
                                          by contradiction /* cyclic */
                                        next
                                          case Prov_Confirmation_1
                                          solve( !KU( ~Np ) @ #vk.75 )
                                            case Prov_SendNonce_1
                                            by contradiction /* cyclic */
                                          qed
                                        next
                                          case c_cmac
                                          solve( !KU( fst(~random) ) @ #vk.67 )
                                            case NDev_Confirmation_1
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_1
                                            solve( !KU( ~Np ) @ #vk.77 )
                                              case Prov_SendNonce_1
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case c_fst
                                            solve( !KU( ~random ) @ #vk.77 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              solve( !KU( ~Np ) @ #vk.78 )
                                                case Prov_SendNonce_1
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case Prov_Confirmation_2
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case Prov_Confirmation_2
                        by contradiction /* from formulas */
                      next
                        case c_cmac
                        solve( !KU( cmac('prsk',
                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                              s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>)))
                               ) @ #vk.32 )
                          case c_cmac
                          solve( !KU( cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Np_1)
                                 ) @ #vk.41 )
                            case NDev_Confirmation_1
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>)))
                                   ) @ #vk.51 )
                              case NDev_Confirmation_1
                              solve( !KU( snd(~random) ) @ #vk.53 )
                                case NDev_Confirmation_2
                                solve( !KU( ~Nd.1 ) @ #vk.61 )
                                  case NDev_SendNonce_2
                                  solve( (Cp_2 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <snd(~random), '2'>),
                                               Np_2))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                         <snd('g'^(~sk*~sk.1)), '2'>),
                                                        s1(<'g'^~sk, 'g'^~sk.1>))), 
                                              '1'>+
                                             <snd(~random), '2'>)) ∧
                                           (mk = rm(Cp_2, mo, Np_2))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                           ) @ #vk.60 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.67 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.72 )
                                          case c_s1
                                          solve( !KU( fst(~random) ) @ #vk.69 )
                                            case c_fst
                                            solve( !KU( ~random ) @ #vk.75 )
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case Prov_Confirmation_2
                                solve( !KU( ~Np.1 ) @ #vk.59 )
                                  case Prov_SendNonce_2
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_snd
                                solve( !KU( ~random ) @ #vk.59 )
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.62 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                           <snd('g'^(~sk*~sk.1)), '2'>),
                                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                             ) @ #vk.61 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.68 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.73 )
                                            case c_s1
                                            solve( !KU( fst(~random) ) @ #vk.70 )
                                              case c_fst
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( ~Np.1 ) @ #vk.60 )
                                    case Prov_SendNonce_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_1
                              solve( !KU( snd(~random) ) @ #vk.53 )
                                case NDev_Confirmation_2
                                solve( !KU( ~Nd.1 ) @ #vk.61 )
                                  case NDev_SendNonce_2
                                  solve( (Cp_2 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <snd(~random), '2'>),
                                               Np_2))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                         <snd('g'^(~sk*~sk.1)), '2'>),
                                                        s1(<'g'^~sk, 'g'^~sk.1>))), 
                                              '1'>+
                                             <snd(~random), '2'>)) ∧
                                           (mk = rm(Cp_2, mo, Np_2))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                           ) @ #vk.60 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.67 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.72 )
                                          case c_s1
                                          solve( !KU( fst(~random) ) @ #vk.69 )
                                            case c_fst
                                            solve( !KU( ~random ) @ #vk.75 )
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case Prov_Confirmation_2
                                solve( !KU( ~Np.1 ) @ #vk.59 )
                                  case Prov_SendNonce_2
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_snd
                                solve( !KU( ~random ) @ #vk.59 )
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.62 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                           <snd('g'^(~sk*~sk.1)), '2'>),
                                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                             ) @ #vk.61 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.68 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.73 )
                                            case c_s1
                                            solve( !KU( fst(~random) ) @ #vk.70 )
                                              case c_fst
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( ~Np.1 ) @ #vk.60 )
                                    case Prov_SendNonce_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            next
                              case c_cmac
                              solve( !KU( snd(~random) ) @ #vk.53 )
                                case NDev_Confirmation_2
                                solve( !KU( ~Nd.1 ) @ #vk.61 )
                                  case NDev_SendNonce_2
                                  solve( (Cp_2 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <snd(~random), '2'>),
                                               Np_2))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                         <snd('g'^(~sk*~sk.1)), '2'>),
                                                        s1(<'g'^~sk, 'g'^~sk.1>))), 
                                              '1'>+
                                             <snd(~random), '2'>)) ∧
                                           (mk = rm(Cp_2, mo, Np_2))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                           ) @ #vk.59 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.67 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.72 )
                                          case c_s1
                                          solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))
                                                 ) @ #vk.69 )
                                            case c_cmac
                                            solve( !KU( cmac((
                                                              <
                                                               cmac('prck',
                                                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                          <snd('g'^(~sk*~sk.1)), '2'>),
                                                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                               '1'>+
                                                              <snd(~random), '2'>),
                                                             Np_2)
                                                   ) @ #vk.70 )
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_2
                                              solve( !KU( ~Np.1 ) @ #vk.71 )
                                                case Prov_SendNonce_2
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case c_cmac
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case Prov_Confirmation_2
                                solve( !KU( ~Np.1 ) @ #vk.59 )
                                  case Prov_SendNonce_2
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_snd
                                solve( !KU( ~random ) @ #vk.59 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.62 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                           <snd('g'^(~sk*~sk.1)), '2'>),
                                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                             ) @ #vk.60 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.69 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.74 )
                                            case c_s1
                                            solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( fst(~random) ) @ #vk.72 )
                                                case NDev_Confirmation_1
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <snd(~random), '2'>),
                                                                 Np_2)
                                                       ) @ #vk.72 )
                                                  case NDev_Confirmation_2
                                                  by contradiction /* cyclic */
                                                next
                                                  case Prov_Confirmation_2
                                                  solve( !KU( ~Np.1 ) @ #vk.73 )
                                                    case Prov_SendNonce_2
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case Prov_Confirmation_1
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <snd(~random), '2'>),
                                                                 Np_2)
                                                       ) @ #vk.72 )
                                                  case NDev_Confirmation_2
                                                  by contradiction /* cyclic */
                                                next
                                                  case Prov_Confirmation_2
                                                  solve( !KU( ~Np.1 ) @ #vk.73 )
                                                    case Prov_SendNonce_2
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case c_fst
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( ~Np.1 ) @ #vk.60 )
                                    case Prov_SendNonce_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          next
                            case c_cmac
                            solve( !KU( cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>)))
                                   ) @ #vk.52 )
                              case NDev_Confirmation_1
                              by contradiction /* cyclic */
                            next
                              case Prov_Confirmation_1
                              solve( !KU( ~Np ) @ #vk.60 )
                                case Prov_SendNonce_1
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_cmac
                              solve( !KU( snd(~random) ) @ #vk.54 )
                                case NDev_Confirmation_2
                                solve( !KU( ~Nd.1 ) @ #vk.64 )
                                  case NDev_SendNonce_2
                                  solve( (Cp_2 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <snd(~random), '2'>),
                                               Np_2))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                         <snd('g'^(~sk*~sk.1)), '2'>),
                                                        s1(<'g'^~sk, 'g'^~sk.1>))), 
                                              '1'>+
                                             <snd(~random), '2'>)) ∧
                                           (mk = rm(Cp_2, mo, Np_2))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                           ) @ #vk.61 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.70 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.75 )
                                          case c_s1
                                          solve( !KU( fst(~random) ) @ #vk.70 )
                                            case NDev_Confirmation_1
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_Confirmation_1
                                            solve( !KU( ~Np ) @ #vk.78 )
                                              case Prov_SendNonce_1
                                              by contradiction /* cyclic */
                                            qed
                                          next
                                            case c_fst
                                            solve( !KU( ~random ) @ #vk.78 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case Prov_Confirmation_2
                                solve( !KU( ~Np.1 ) @ #vk.62 )
                                  case Prov_SendNonce_2
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_snd
                                solve( !KU( ~random ) @ #vk.62 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.65 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                           <snd('g'^(~sk*~sk.1)), '2'>),
                                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                                             ) @ #vk.62 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.71 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.76 )
                                            case c_s1
                                            solve( !KU( fst(~random) ) @ #vk.71 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              solve( !KU( ~Np ) @ #vk.79 )
                                                case Prov_SendNonce_1
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case c_fst
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( ~Np.1 ) @ #vk.63 )
                                    case Prov_SendNonce_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case NDev_Confirmation_2_case_1
              solve( (Cp_1 =
                      cmac((<z, '2'>+
                            <
                             cmac('prck',
                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                             '1'>
                           ),
                           Np_1))  ∥
                     (∃ mk mo.
                       ((mk+mo) =
                        (<z, '2'>+
                         <
                          cmac('prck',
                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                          '1'>
                        )) ∧
                       (mk = rm(Cp_1, mo, Np_1))
                      ∧
                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                case case_1
                solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                       ) ▶₂ #vr.27 )
                  case Receive_UserDevice
                  by solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1,
                                   <z, fst(~random)>
                            ) ▶₃ #vr.27 )
                qed
              qed
            next
              case NDev_Confirmation_2_case_2
              solve( (Cp_1 =
                      cmac((<z, '2'>+
                            <
                             cmac('prck',
                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                             '1'>
                           ),
                           Np_1))  ∥
                     (∃ mk mo.
                       ((mk+mo) =
                        (<z, '2'>+
                         <
                          cmac('prck',
                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                          '1'>
                        )) ∧
                       (mk = rm(Cp_1, mo, Np_1))
                      ∧
                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                case case_1
                by solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1,
                                 <z, fst(~random)>
                          ) ▶₂ #vr.27 )
              qed
            next
              case Prov_Confirmation_1
              by contradiction /* from formulas */
            next
              case c_cmac
              solve( !KU( cmac((
                                <
                                 cmac('prck',
                                      cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                           s1(<'g'^~sk, DHpkD>))), 
                                 '1'>+
                                <snd(~random), '2'>),
                               Nd_2)
                     ) @ #vk.12 )
                case NDev_Confirmation_1_case_1
                solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                       ) ▶₂ #vr.25 )
                  case Receive_UserDevice
                  by solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1,
                                   <snd(~random), x>
                            ) ▶₃ #vr.25 )
                qed
              next
                case NDev_Confirmation_1_case_2
                by solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1,
                                 <snd(~random), x>
                          ) ▶₂ #vr.25 )
              next
                case NDev_Confirmation_2_case_1
                solve( (Cp_1 =
                        cmac((<z, '2'>+
                              <
                               cmac('prck',
                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                               '1'>
                             ),
                             Np_1))  ∥
                       (∃ mk mo.
                         ((mk+mo) =
                          (<z, '2'>+
                           <
                            cmac('prck',
                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                      s1(<'g'^~sk, 'g'^~sk.1>))), 
                            '1'>
                          )) ∧
                         (mk = rm(Cp_1, mo, Np_1))
                        ∧
                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                  case case_1
                  solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                         ) ▶₂ #vr.27 )
                    case Receive_UserDevice
                    solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, AuthValue_In
                           ) ▶₃ #vr.27 )
                      case Receive_UserDevice
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case NDev_Confirmation_2_case_2
                solve( (Cp_1 =
                        cmac((<z, '2'>+
                              <
                               cmac('prck',
                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                               '1'>
                             ),
                             Np_1))  ∥
                       (∃ mk mo.
                         ((mk+mo) =
                          (<z, '2'>+
                           <
                            cmac('prck',
                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                      s1(<'g'^~sk, 'g'^~sk.1>))), 
                            '1'>
                          )) ∧
                         (mk = rm(Cp_1, mo, Np_1))
                        ∧
                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                  case case_1
                  solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, AuthValue_In
                         ) ▶₂ #vr.27 )
                    case Receive_UserDevice
                    solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                           ) ▶₃ #vr.27 )
                      case Receive_UserDevice
                      solve( !KU( ~Nd ) @ #vk.12 )
                        case NDev_SendNonce_2
                        solve( (Cp_2 =
                                cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                       '1'>+
                                      <snd(~random), '2'>),
                                     Np_2))  ∥
                               (∃ mk mo.
                                 ((mk+mo) =
                                  (
                                   <
                                    cmac('prck',
                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                    '1'>+
                                   <snd(~random), '2'>)) ∧
                                 (mk = rm(Cp_2, mo, Np_2))
                                ∧
                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                          case case_1
                          solve( !KU( cmac('prsk',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>)))
                                 ) @ #vk.33 )
                            case c_cmac
                            solve( !KU( cmac('prck',
                                             cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                  s1(<'g'^~sk, 'g'^~sk.1>)))
                                   ) @ #vk.34 )
                              case NDev_Confirmation_1
                              solve( !KU( fst(~random) ) @ #vk.36 )
                                case c_fst
                                solve( !KU( ~random ) @ #vk.62 )
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_2
                                  by contradiction /* cyclic */
                                qed
                              qed
                            next
                              case Prov_Confirmation_1
                              solve( !KU( ~Np ) @ #vk.61 )
                                case Prov_SendNonce_1
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_cmac
                              solve( !KU( fst(~random) ) @ #vk.36 )
                                case NDev_Confirmation_1
                                solve( !KU( cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <fst(~random), '2'>),
                                                 Np_1)
                                       ) @ #vk.49 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2)
                                         ) @ #vk.48 )
                                    case NDev_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>))
                                           ) @ #vk.60 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>) ) @ #vk.67 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.72 )
                                          case c_s1
                                          solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))
                                                 ) @ #vk.70 )
                                            case c_cmac
                                            solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.72 )
                                              case c_fst
                                              solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.74 )
                                                case NDev_SendPK_InBand
                                                by solve( !KU( ~sk ) @ #vk.75 )
                                              next
                                                case Prov_SendPK_InBand
                                                by solve( !KU( ~sk.1 ) @ #vk.75 )
                                              next
                                                case c_exp
                                                by solve( !KU( ~sk ) @ #vk.77 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case c_cmac
                                    solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                     ),
                                                     s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>))
                                           ) @ #vk.62 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>) ) @ #vk.70 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.75 )
                                          case c_s1
                                          solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))
                                                 ) @ #vk.72 )
                                            case c_cmac
                                            solve( !KU( snd(~random) ) @ #vk.74 )
                                              case NDev_Confirmation_2
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_2
                                              solve( !KU( ~Np.1 ) @ #vk.77 )
                                                case Prov_SendNonce_2
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case c_snd
                                              solve( !KU( ~random ) @ #vk.78 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case NDev_Confirmation_2
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_2
                                                solve( !KU( ~Np.1 ) @ #vk.78 )
                                                  case Prov_SendNonce_2
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case c_cmac
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_1
                                solve( !KU( ~Np ) @ #vk.63 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_fst
                                solve( !KU( ~random ) @ #vk.63 )
                                  case NDev_Confirmation_1
                                  solve( !KU( cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <fst(~random), '2'>),
                                                   Np_1)
                                         ) @ #vk.50 )
                                    case NDev_Confirmation_1
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_1
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2)
                                           ) @ #vk.49 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>))
                                             ) @ #vk.61 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>) ) @ #vk.69 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.74 )
                                            case c_s1
                                            solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))
                                                   ) @ #vk.71 )
                                              case c_cmac
                                              solve( !KU( snd(~random) ) @ #vk.73 )
                                                case NDev_Confirmation_2
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_2
                                                by contradiction /* cyclic */
                                              next
                                                case c_snd
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>))
                                             ) @ #vk.63 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>) ) @ #vk.71 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.76 )
                                            case c_s1
                                            solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                              <snd('g'^(~sk*~sk.1)), '2'>),
                                                             s1(<'g'^~sk, 'g'^~sk.1>))
                                                   ) @ #vk.73 )
                                              case c_cmac
                                              solve( !KU( snd(~random) ) @ #vk.75 )
                                                case NDev_Confirmation_2
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_2
                                                by contradiction /* cyclic */
                                              next
                                                case c_snd
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case c_cmac
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case NDev_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( ~Np ) @ #vk.64 )
                                    case Prov_SendNonce_1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Prov_Confirmation_2
                by contradiction /* from formulas */
              next
                case c_cmac
                solve( !KU( cmac('prsk',
                                 cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                      s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>)))
                       ) @ #vk.34 )
                  case c_cmac
                  solve( !KU( cmac('prck',
                                   cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                        s1(<'g'^~sk, DHpkD>)))
                         ) @ #vk.35 )
                    case NDev_Confirmation_1_case_1
                    solve( !KU( ~Nd ) @ #vk.51 )
                      case NDev_SendNonce_1
                      solve( (Cp_1 =
                              cmac((
                                    <
                                     cmac('prck',
                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                     '1'>+
                                    <fst(~random.1), '2'>),
                                   Np_1))  ∥
                             (∃ mk mo.
                               ((mk+mo) =
                                (
                                 <
                                  cmac('prck',
                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                  '1'>+
                                 <fst(~random.1), '2'>)) ∧
                               (mk = rm(Cp_1, mo, Np_1))
                              ∧
                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                        case case_1
                        solve( !KU( fst(~random) ) @ #vk.38 )
                          case Prov_Confirmation_1
                          solve( !KU( ~Np ) @ #vk.63 )
                            case Prov_SendNonce_1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_fst
                          solve( !KU( ~random ) @ #vk.63 )
                            case Prov_Confirmation_1
                            solve( !KU( ~Np ) @ #vk.64 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  next
                    case NDev_Confirmation_1_case_2
                    solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                           ) ▶₂ #vr.28 )
                      case Receive_UserDevice
                      solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, AuthValue_In
                             ) ▶₃ #vr.28 )
                        case Receive_UserDevice
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case NDev_Confirmation_1_case_3
                    solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, AuthValue_In
                           ) ▶₂ #vr.28 )
                      case Receive_UserDevice
                      solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                             ) ▶₃ #vr.28 )
                        case Receive_UserDevice
                        solve( !KU( ~Nd ) @ #vk.50 )
                          case NDev_SendNonce_1
                          solve( (Cp_1 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <fst(~random), '2'>),
                                       Np_1))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk, 'g'^~sk.1>))), 
                                      '1'>+
                                     <fst(~random), '2'>)) ∧
                                   (mk = rm(Cp_1, mo, Np_1))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( fst(~random) ) @ #vk.38 )
                              case c_fst
                              solve( !KU( ~random ) @ #vk.61 )
                                case NDev_Confirmation_2
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case NDev_Confirmation_1_case_4
                    solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                           ) ▶₃ #vr.28 )
                      case Receive_UserDevice
                      by solve( In_UD( <'AskForInput', 'Device', 'User'>, NDev, $User.1,
                                       'Input'
                                ) ▶₄ #vr.28 )
                    qed
                  next
                    case NDev_Confirmation_1_case_5
                    solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                           ) ▶₃ #vr.28 )
                      case Receive_UserDevice
                      by contradiction /* from formulas */
                    qed
                  next
                    case Prov_Confirmation_1
                    solve( !KU( ~Np ) @ #vk.43 )
                      case Prov_SendNonce_1
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_cmac
                    solve( !KU( fst(~random) ) @ #vk.37 )
                      case NDev_Confirmation_1_case_1
                      solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                             ) ▶₂ #vr.28 )
                        case Receive_UserDevice
                        solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                               ) ▶₃ #vr.28 )
                          case Receive_UserDevice
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case NDev_Confirmation_1_case_2
                      solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                             ) ▶₂ #vr.28 )
                        case Receive_UserDevice
                        solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                               ) ▶₃ #vr.28 )
                          case Receive_UserDevice
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case NDev_Confirmation_1_case_3
                      solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                             ) ▶₂ #vr.28 )
                        case Receive_UserDevice
                        solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                               ) ▶₃ #vr.28 )
                          case Receive_UserDevice
                          solve( !KU( ~Nd ) @ #vk.53 )
                            case NDev_SendNonce_1
                            solve( (Cp_1 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                     s1(<DHpkP, 'g'^~sk.1>))), 
                                           '1'>+
                                          <fst(~random), '2'>),
                                         Np_1))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                  s1(<DHpkP, 'g'^~sk.1>))), 
                                        '1'>+
                                       <fst(~random), '2'>)) ∧
                                     (mk = rm(Cp_1, mo, Np_1))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( snd(~random) ) @ #vk.42 )
                                case NDev_Confirmation_2
                                solve( !KU( ~Nd.1 ) @ #vk.67 )
                                  case NDev_SendNonce_2
                                  solve( (Cp_2 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>
                                                           ),
                                                           s1(<DHpkP, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <snd(~random), '2'>),
                                               Np_2))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                        s1(<DHpkP, 'g'^~sk.1>))), 
                                              '1'>+
                                             <snd(~random), '2'>)) ∧
                                           (mk = rm(Cp_2, mo, Np_2))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                     s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                           ) @ #vk.45 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.73 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.78 )
                                          case c_s1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.55 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(ECDHSecret.1), '1'>+
                                                                   <snd(ECDHSecret.1), '2'>),
                                                                  s1(<DHpkP, 'g'^~sk.1>)))
                                                   ) @ #vk.66 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(ECDHSecret.1), '1'>+
                                                                            <snd(ECDHSecret.1), '2'>),
                                                                           s1(<DHpkP, 'g'^~sk.1>))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Np_1)
                                                     ) @ #vk.66 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_1
                                                solve( !KU( ~Np ) @ #vk.73 )
                                                  case Prov_SendNonce_1
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case Prov_Confirmation_2
                                solve( !KU( ~Np.1 ) @ #vk.65 )
                                  case Prov_SendNonce_2
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_snd
                                solve( !KU( ~random ) @ #vk.65 )
                                  case NDev_Confirmation_1_case_1
                                  by contradiction /* cyclic */
                                next
                                  case NDev_Confirmation_1_case_2
                                  by contradiction /* cyclic */
                                next
                                  case NDev_Confirmation_1_case_3
                                  by contradiction /* cyclic */
                                next
                                  case NDev_Confirmation_1_case_4
                                  by contradiction /* cyclic */
                                next
                                  case NDev_Confirmation_1_case_5
                                  by contradiction /* cyclic */
                                next
                                  case NDev_Confirmation_1_case_6
                                  by contradiction /* cyclic */
                                next
                                  case NDev_Confirmation_2_case_1
                                  solve( !KU( ~Nd.1 ) @ #vk.68 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>
                                                             ),
                                                             s1(<DHpkP, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>),
                                                          s1(<DHpkP, 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                       s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                             ) @ #vk.46 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.74 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.79 )
                                            case c_s1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.56 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<fst(DHpkP^~sk.1), '1'>+
                                                                     <snd(DHpkP^~sk.1), '2'>),
                                                                    s1(<DHpkP, 'g'^~sk.1>)))
                                                     ) @ #vk.67 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst(DHpkP^~sk.1), '1'>+
                                                                              <snd(DHpkP^~sk.1), '2'>),
                                                                             s1(<DHpkP, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~random), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.67 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case NDev_Confirmation_2_case_2
                                  solve( !KU( ~Nd.1 ) @ #vk.68 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst(ECDHSecret.1), '1'>+
                                                              <snd(ECDHSecret.1), '2'>),
                                                             s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                          s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                       s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                             ) @ #vk.46 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.74 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.79 )
                                            case c_s1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.56 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<fst(ECDHSecret.1), '1'>+
                                                                     <snd(ECDHSecret.1), '2'>),
                                                                    s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>)))
                                                     ) @ #vk.67 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst(ECDHSecret.1), '1'>+
                                                                              <snd(ECDHSecret.1), '2'>),
                                                                             s1(<ECDHSecret.1^inv(~sk.1), 
                                                                                 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~random), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.67 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case NDev_Confirmation_2_case_3
                                  solve( !KU( ~Nd.1 ) @ #vk.68 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                              <snd(x^(~sk.1*x.1)), '2'>),
                                                             s1(<x^x.1, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst(x^(~sk.1*x.1)), '1'>+<snd(x^(~sk.1*x.1)), '2'>
                                                          ),
                                                          s1(<x^x.1, 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                       s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                             ) @ #vk.46 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.74 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.79 )
                                            case c_s1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.56 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                     <snd(x^(~sk.1*x.1)), '2'>),
                                                                    s1(<x^x.1, 'g'^~sk.1>)))
                                                     ) @ #vk.67 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                              <snd(x^(~sk.1*x.1)), '2'>),
                                                                             s1(<x^x.1, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~random), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.67 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case Prov_Confirmation_1
                                                  solve( !KU( ~Np ) @ #vk.74 )
                                                    case Prov_SendNonce_1
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case NDev_Confirmation_2_case_4
                                  solve( !KU( ~Nd.1 ) @ #vk.68 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                             s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                          s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                       s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                             ) @ #vk.46 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.74 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.79 )
                                            case c_s1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.56 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<fst(x^inv(x.1)), '1'>+
                                                                     <snd(x^inv(x.1)), '2'>),
                                                                    s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>)))
                                                     ) @ #vk.67 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst(x^inv(x.1)), '1'>+
                                                                              <snd(x^inv(x.1)), '2'>),
                                                                             s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1
                                                                                >))), 
                                                                   '1'>+
                                                                  <fst(~random), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.67 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case NDev_Confirmation_2_case_5
                                  solve( !KU( ~Nd.1 ) @ #vk.68 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst(x^x.1), '1'>+<snd(x^x.1), '2'>),
                                                             s1(<x^(x.1*inv(~sk.1)), 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst(x^x.1), '1'>+<snd(x^x.1), '2'>),
                                                          s1(<x^(x.1*inv(~sk.1)), 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( x^(x.1*inv(~sk.1)) ) @ #vk.60 )
                                        case NDev_SendPK_InBand_case_1
                                        by contradiction /* cyclic */
                                      next
                                        case NDev_SendPK_InBand_case_2
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_SendPK_InBand_case_1
                                        by solve( !KU( ~sk.1 ) @ #vk.72 )
                                      next
                                        case Prov_SendPK_InBand_case_2
                                        by solve( !KU( ~sk.1 ) @ #vk.74 )
                                      next
                                        case c_exp
                                        by solve( !KU( ~sk.1 ) @ #vk.75 )
                                      qed
                                    qed
                                  qed
                                next
                                  case NDev_Confirmation_2_case_6
                                  solve( !KU( ~Nd.1 ) @ #vk.68 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst(x^(x.1*inv(x.2))), '1'>+
                                                              <snd(x^(x.1*inv(x.2))), '2'>),
                                                             s1(<x^(x.1*inv((~sk.1*x.2))), 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst(x^(x.1*inv(x.2))), '1'>+
                                                           <snd(x^(x.1*inv(x.2))), '2'>),
                                                          s1(<x^(x.1*inv((~sk.1*x.2))), 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x.3 y. ((y+x.3) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( x^(x.1*inv((~sk.1*x.2))) ) @ #vk.60 )
                                        case NDev_SendPK_InBand_case_1
                                        by contradiction /* cyclic */
                                      next
                                        case NDev_SendPK_InBand_case_2
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_SendPK_InBand_case_1
                                        by solve( !KU( ~sk.1 ) @ #vk.73 )
                                      next
                                        case Prov_SendPK_InBand_case_2
                                        by solve( !KU( ~sk.1 ) @ #vk.75 )
                                      next
                                        case c_exp
                                        by solve( !KU( ~sk.1 ) @ #vk.76 )
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( ~Np.1 ) @ #vk.66 )
                                    case Prov_SendNonce_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case NDev_Confirmation_1_case_4
                      solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                             ) ▶₂ #vr.28 )
                        case Receive_UserDevice
                        solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                               ) ▶₃ #vr.28 )
                          case Receive_UserDevice
                          solve( !KU( ~Nd ) @ #vk.53 )
                            case NDev_SendNonce_1
                            solve( (Cp_1 =
                                    cmac((
                                          <
                                           cmac('prck',
                                                cmac((<z, '1'>+<z.1, '2'>),
                                                     s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                           '1'>+
                                          <fst(~random), '2'>),
                                         Np_1))  ∥
                                   (∃ mk mo.
                                     ((mk+mo) =
                                      (
                                       <
                                        cmac('prck',
                                             cmac((<z, '1'>+<z.1, '2'>),
                                                  s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                        '1'>+
                                       <fst(~random), '2'>)) ∧
                                     (mk = rm(Cp_1, mo, Np_1))
                                    ∧
                                     ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                              case case_1
                              solve( !KU( snd(~random) ) @ #vk.42 )
                                case NDev_Confirmation_2
                                solve( !KU( ~Nd.1 ) @ #vk.67 )
                                  case NDev_SendNonce_2
                                  solve( (Cp_2 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<z, '1'>+<z.1, '2'>),
                                                           s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                 '1'>+
                                                <snd(~random), '2'>),
                                               Np_2))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<z, '1'>+<z.1, '2'>),
                                                        s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                              '1'>+
                                             <snd(~random), '2'>)) ∧
                                           (mk = rm(Cp_2, mo, Np_2))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                     s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                           ) @ #vk.45 )
                                      case c_cmac
                                      solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.73 )
                                        case c_s1
                                        solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.78 )
                                          case c_s1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.55 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<z, '1'>+<z.1, '2'>),
                                                                  s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                   ) @ #vk.66 )
                                              case c_cmac
                                              solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.67 )
                                                case c_exp
                                                by solve( !KU( ~sk.1 ) @ #vk.87 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case Prov_Confirmation_2
                                solve( !KU( ~Np.1 ) @ #vk.65 )
                                  case Prov_SendNonce_2
                                  by contradiction /* cyclic */
                                qed
                              next
                                case c_snd
                                solve( !KU( ~random ) @ #vk.65 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.68 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<z, '1'>+<z.1, '2'>),
                                                             s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<z, '1'>+<z.1, '2'>),
                                                          s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                       s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                             ) @ #vk.46 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.74 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.79 )
                                            case c_s1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.56 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<z, '1'>+<z.1, '2'>),
                                                                    s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                     ) @ #vk.67 )
                                                case c_cmac
                                                solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.68 )
                                                  case c_exp
                                                  by solve( !KU( ~sk.1 ) @ #vk.88 )
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  solve( !KU( ~Np.1 ) @ #vk.66 )
                                    case Prov_SendNonce_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case Prov_Confirmation_1
                      solve( !KU( ~Np ) @ #vk.45 )
                        case Prov_SendNonce_1
                        by contradiction /* cyclic */
                      qed
                    next
                      case c_fst
                      solve( !KU( ~random ) @ #vk.45 )
                        case NDev_Confirmation_1_case_01
                        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                               ) ▶₂ #vr.28 )
                          case Receive_UserDevice
                          solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                 ) ▶₃ #vr.28 )
                            case Receive_UserDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_02
                        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                               ) ▶₂ #vr.28 )
                          case Receive_UserDevice
                          solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                 ) ▶₃ #vr.28 )
                            case Receive_UserDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_03
                        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                               ) ▶₂ #vr.28 )
                          case Receive_UserDevice
                          solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                 ) ▶₃ #vr.28 )
                            case Receive_UserDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_04
                        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                               ) ▶₂ #vr.28 )
                          case Receive_UserDevice
                          solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                 ) ▶₃ #vr.28 )
                            case Receive_UserDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_05
                        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                               ) ▶₂ #vr.28 )
                          case Receive_UserDevice
                          solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                 ) ▶₃ #vr.28 )
                            case Receive_UserDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_06
                        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                               ) ▶₂ #vr.28 )
                          case Receive_UserDevice
                          solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                 ) ▶₃ #vr.28 )
                            case Receive_UserDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_07
                        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                               ) ▶₂ #vr.28 )
                          case Receive_UserDevice
                          solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                 ) ▶₃ #vr.28 )
                            case Receive_UserDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_08
                        solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                               ) ▶₂ #vr.28 )
                          case Receive_UserDevice
                          solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                 ) ▶₃ #vr.28 )
                            case Receive_UserDevice
                            solve( !KU( ~Nd ) @ #vk.54 )
                              case NDev_SendNonce_1
                              solve( (Cp_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>),
                                                       s1(<DHpkP, 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Np_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>),
                                                    s1(<DHpkP, 'g'^~sk.1>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cp_1, mo, Np_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( snd(~random) ) @ #vk.43 )
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.68 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>
                                                             ),
                                                             s1(<DHpkP, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>),
                                                          s1(<DHpkP, 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                       s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                             ) @ #vk.46 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.74 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.79 )
                                            case c_s1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.56 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<fst(DHpkP^~sk.1), '1'>+
                                                                     <snd(DHpkP^~sk.1), '2'>),
                                                                    s1(<DHpkP, 'g'^~sk.1>)))
                                                     ) @ #vk.67 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst(DHpkP^~sk.1), '1'>+
                                                                              <snd(DHpkP^~sk.1), '2'>),
                                                                             s1(<DHpkP, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~random), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.67 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case c_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_09
                        solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                               ) ▶₂ #vr.28 )
                          case Receive_UserDevice
                          solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                 ) ▶₃ #vr.28 )
                            case Receive_UserDevice
                            solve( !KU( ~Nd ) @ #vk.54 )
                              case NDev_SendNonce_1
                              solve( (Cp_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                       s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Np_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                    s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cp_1, mo, Np_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( snd(~random) ) @ #vk.43 )
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.68 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst(ECDHSecret.1), '1'>+
                                                              <snd(ECDHSecret.1), '2'>),
                                                             s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                          s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                       s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                             ) @ #vk.46 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.74 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.79 )
                                            case c_s1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.56 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<fst(ECDHSecret.1), '1'>+
                                                                     <snd(ECDHSecret.1), '2'>),
                                                                    s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>)))
                                                     ) @ #vk.67 )
                                                case c_cmac
                                                solve( !KU( ECDHSecret.1^inv(~sk.1) ) @ #vk.68 )
                                                  case c_exp
                                                  by solve( !KU( ~sk.1 ) @ #vk.86 )
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case c_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_10
                        solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                               ) ▶₂ #vr.28 )
                          case Receive_UserDevice
                          solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                 ) ▶₃ #vr.28 )
                            case Receive_UserDevice
                            solve( !KU( ~Nd ) @ #vk.54 )
                              case NDev_SendNonce_1
                              solve( (Cp_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(x^(~sk.1*x.1)), '1'>+<snd(x^(~sk.1*x.1)), '2'>),
                                                       s1(<x^x.1, 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Np_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(x^(~sk.1*x.1)), '1'>+<snd(x^(~sk.1*x.1)), '2'>),
                                                    s1(<x^x.1, 'g'^~sk.1>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cp_1, mo, Np_1))
                                      ∧
                                       ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( snd(~random) ) @ #vk.43 )
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.68 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                              <snd(x^(~sk.1*x.1)), '2'>),
                                                             s1(<x^x.1, 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst(x^(~sk.1*x.1)), '1'>+<snd(x^(~sk.1*x.1)), '2'>
                                                          ),
                                                          s1(<x^x.1, 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                       s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                             ) @ #vk.46 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.74 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.79 )
                                            case c_s1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.56 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                     <snd(x^(~sk.1*x.1)), '2'>),
                                                                    s1(<x^x.1, 'g'^~sk.1>)))
                                                     ) @ #vk.67 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                              <snd(x^(~sk.1*x.1)), '2'>),
                                                                             s1(<x^x.1, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~random), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.67 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case Prov_Confirmation_1
                                                  solve( !KU( ~Np ) @ #vk.74 )
                                                    case Prov_SendNonce_1
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case c_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_11
                        solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                               ) ▶₂ #vr.28 )
                          case Receive_UserDevice
                          solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                 ) ▶₃ #vr.28 )
                            case Receive_UserDevice
                            solve( !KU( ~Nd ) @ #vk.54 )
                              case NDev_SendNonce_1
                              solve( (Cp_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                       s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Np_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                    s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cp_1, mo, Np_1))
                                      ∧
                                       ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( snd(~random) ) @ #vk.43 )
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.68 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                             s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                          s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                       s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                             ) @ #vk.46 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.74 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.79 )
                                            case c_s1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.56 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<fst(x^inv(x.1)), '1'>+
                                                                     <snd(x^inv(x.1)), '2'>),
                                                                    s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>)))
                                                     ) @ #vk.67 )
                                                case c_cmac
                                                solve( !KU( x^inv((~sk.1*x.1)) ) @ #vk.68 )
                                                  case c_exp
                                                  by solve( !KU( ~sk.1 ) @ #vk.87 )
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case c_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_12
                        solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                               ) ▶₂ #vr.28 )
                          case Receive_UserDevice
                          solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                 ) ▶₃ #vr.28 )
                            case Receive_UserDevice
                            solve( !KU( ~Nd ) @ #vk.54 )
                              case NDev_SendNonce_1
                              solve( (Cp_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(x^x.1), '1'>+<snd(x^x.1), '2'>),
                                                       s1(<x^(x.1*inv(~sk.1)), 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Np_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(x^x.1), '1'>+<snd(x^x.1), '2'>),
                                                    s1(<x^(x.1*inv(~sk.1)), 'g'^~sk.1>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cp_1, mo, Np_1))
                                      ∧
                                       ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( x^(x.1*inv(~sk.1)) ) @ #vk.57 )
                                  case NDev_SendPK_InBand_case_1
                                  by contradiction /* cyclic */
                                next
                                  case NDev_SendPK_InBand_case_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_SendPK_InBand_case_1
                                  by solve( !KU( ~sk.1 ) @ #vk.67 )
                                next
                                  case Prov_SendPK_InBand_case_2
                                  by solve( !KU( ~sk.1 ) @ #vk.69 )
                                next
                                  case c_exp
                                  by solve( !KU( ~sk.1 ) @ #vk.70 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_13
                        solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                               ) ▶₂ #vr.28 )
                          case Receive_UserDevice
                          solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                 ) ▶₃ #vr.28 )
                            case Receive_UserDevice
                            solve( !KU( ~Nd ) @ #vk.54 )
                              case NDev_SendNonce_1
                              solve( (Cp_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst(x^(x.1*inv(x.2))), '1'>+
                                                        <snd(x^(x.1*inv(x.2))), '2'>),
                                                       s1(<x^(x.1*inv((~sk.1*x.2))), 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Np_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst(x^(x.1*inv(x.2))), '1'>+<snd(x^(x.1*inv(x.2))), '2'>
                                                    ),
                                                    s1(<x^(x.1*inv((~sk.1*x.2))), 'g'^~sk.1>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cp_1, mo, Np_1))
                                      ∧
                                       ∀ x.3 y. ((y+x.3) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( x^(x.1*inv((~sk.1*x.2))) ) @ #vk.57 )
                                  case NDev_SendPK_InBand_case_1
                                  by contradiction /* cyclic */
                                next
                                  case NDev_SendPK_InBand_case_2
                                  by contradiction /* cyclic */
                                next
                                  case Prov_SendPK_InBand_case_1
                                  by solve( !KU( ~sk.1 ) @ #vk.68 )
                                next
                                  case Prov_SendPK_InBand_case_2
                                  by solve( !KU( ~sk.1 ) @ #vk.70 )
                                next
                                  case c_exp
                                  by solve( !KU( ~sk.1 ) @ #vk.71 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_14
                        solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                               ) ▶₂ #vr.28 )
                          case Receive_UserDevice
                          solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                 ) ▶₃ #vr.28 )
                            case Receive_UserDevice
                            solve( !KU( ~Nd ) @ #vk.54 )
                              case NDev_SendNonce_1
                              solve( (Cp_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<z, '1'>+<z.1, '2'>),
                                                       s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Np_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<z, '1'>+<z.1, '2'>),
                                                    s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cp_1, mo, Np_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( snd(~random) ) @ #vk.43 )
                                  case NDev_Confirmation_2
                                  solve( !KU( ~Nd.1 ) @ #vk.68 )
                                    case NDev_SendNonce_2
                                    solve( (Cp_2 =
                                            cmac((
                                                  <
                                                   cmac('prck',
                                                        cmac((<z, '1'>+<z.1, '2'>),
                                                             s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                   '1'>+
                                                  <snd(~random), '2'>),
                                                 Np_2))  ∥
                                           (∃ mk mo.
                                             ((mk+mo) =
                                              (
                                               <
                                                cmac('prck',
                                                     cmac((<z, '1'>+<z.1, '2'>),
                                                          s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                '1'>+
                                               <snd(~random), '2'>)) ∧
                                             (mk = rm(Cp_2, mo, Np_2))
                                            ∧
                                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                      case case_1
                                      solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                       s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                                             ) @ #vk.46 )
                                        case c_cmac
                                        solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.74 )
                                          case c_s1
                                          solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.79 )
                                            case c_s1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.56 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<z, '1'>+<z.1, '2'>),
                                                                    s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                     ) @ #vk.67 )
                                                case c_cmac
                                                solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.68 )
                                                  case c_exp
                                                  by solve( !KU( ~sk.1 ) @ #vk.88 )
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_2
                                  by contradiction /* cyclic */
                                next
                                  case c_snd
                                  by contradiction /* cyclic */
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case NDev_Confirmation_2_case_01
                        by contradiction /* cyclic */
                      next
                        case NDev_Confirmation_2_case_02
                        by contradiction /* cyclic */
                      next
                        case NDev_Confirmation_2_case_03
                        by contradiction /* cyclic */
                      next
                        case NDev_Confirmation_2_case_04
                        by contradiction /* cyclic */
                      next
                        case NDev_Confirmation_2_case_05
                        by contradiction /* cyclic */
                      next
                        case NDev_Confirmation_2_case_06
                        by contradiction /* cyclic */
                      next
                        case NDev_Confirmation_2_case_07
                        by contradiction /* cyclic */
                      next
                        case NDev_Confirmation_2_case_08
                        by contradiction /* cyclic */
                      next
                        case NDev_Confirmation_2_case_09
                        by contradiction /* cyclic */
                      next
                        case NDev_Confirmation_2_case_10
                        by contradiction /* cyclic */
                      next
                        case NDev_Confirmation_2_case_11
                        by contradiction /* cyclic */
                      next
                        case NDev_Confirmation_2_case_12
                        by contradiction /* cyclic */
                      next
                        case NDev_Confirmation_2_case_13
                        by contradiction /* cyclic */
                      next
                        case NDev_Confirmation_2_case_14
                        by contradiction /* cyclic */
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np ) @ #vk.46 )
                          case Prov_SendNonce_1
                          by contradiction /* cyclic */
                        qed
                      next
                        case Prov_Confirmation_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case split_case_2
            solve( !KU( cmac((
                              <
                               cmac('prck',
                                    cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                               '1'>+
                              <fst(~random), '2'>),
                             Nd_1)
                   ) @ #vk.13 )
              case Prov_Confirmation_1
              by contradiction /* from formulas */
            next
              case c_cmac
              solve( !KU( cmac((
                                <
                                 cmac('prck',
                                      cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                                 '1'>+
                                <snd(~random), '2'>),
                               Nd_2)
                     ) @ #vk.12 )
                case Prov_Confirmation_2
                by contradiction /* from formulas */
              next
                case c_cmac
                solve( !KU( cmac('prsk',
                                 cmac((<z, '1'>+<z.1, '2'>),
                                      s1(<s1(<'g'^~sk, <z, z.1>^inv(~sk)>), ~Np.1, Nd_2>)))
                       ) @ #vk.34 )
                  case c_cmac
                  solve( !KU( <z, z.1>^inv(~sk) ) @ #vk.16 )
                    case c_exp
                    by solve( !KU( ~sk ) @ #vk.47 )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( ProvChecked( Prov, netkey, ReadOOBPK, ReadStaticOOB, SecureOption,
                      NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In,
                      AuthValue_1, AuthValue_2, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D,
                      PKType_P, AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, Np_1, ConfirmSALT,
                      ECDH1, ECDH2, CK, Cp_1, Cd_1, Nd_1, Np_2, Cp_2, Cd_2, Nd_2,
                      ProvisioningSALT, sessionkey
         ) ▶₀ #i )
    case Prov_Check_case_1
    solve( (Cd_1 =
            cmac((<z, '2'>+
                  <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
                 ),
                 Nd_1))  ∥
           (∃ mk mo.
             ((mk+mo) =
              (<z, '2'>+
               <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
              )) ∧
             (mk = rm(Cd_1, mo, Nd_1))
            ∧
             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
      case case_1
      solve( (Cd_2 =
              cmac((<z.1, '2'>+
                    <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
                   ),
                   Nd_2))  ∥
             (∃ mk mo.
               ((mk+mo) =
                (<z.1, '2'>+
                 <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
                )) ∧
               (mk = rm(Cd_2, mo, Nd_2))
              ∧
               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
        case case_1
        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User, 'Input'
               ) ▶₂ #vr.10 )
          case Receive_UserDevice_case_1
          solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User, AuthValue_In
                 ) ▶₃ #vr.10 )
            case Receive_UserDevice
            solve( splitEqs(2) )
              case split_case_1
              solve( !KU( cmac('prsk',
                               cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                    s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>)))
                     ) @ #vk )
                case c_cmac
                solve( !KU( cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                             s1(<'g'^~sk, DHpkD>))), 
                                   '1'>+
                                  <fst(~random), '2'>),
                                 Nd_1)
                       ) @ #vk.12 )
                  case NDev_Confirmation_1
                  solve( !KU( ~Nd ) @ #vk.12 )
                    case NDev_SendNonce_1
                    solve( (Cp_1 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <fst(~random), '2'>),
                                 Np_1))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <fst(~random), '2'>)) ∧
                             (mk = rm(Cp_1, mo, Np_1))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <snd(~random), '2'>),
                                       Nd_2)
                             ) @ #vk.12 )
                        case NDev_Confirmation_2
                        solve( !KU( ~Nd.1 ) @ #vk.12 )
                          case NDev_SendNonce_2
                          solve( (Cp_2 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <snd(~random), '2'>),
                                       Np_2))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk, 'g'^~sk.1>))), 
                                      '1'>+
                                     <snd(~random), '2'>)) ∧
                                   (mk = rm(Cp_2, mo, Np_2))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                             ),
                                             s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>))
                                   ) @ #vk.47 )
                              case c_cmac
                              solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>) ) @ #vk.54 )
                                case c_s1
                                solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.61 )
                                  case c_s1
                                  solve( !KU( cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <fst(~random), '2'>),
                                                   Np_1)
                                         ) @ #vk.55 )
                                    case NDev_Confirmation_1
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_1
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2)
                                           ) @ #vk.57 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.59 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.63 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.64 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.64 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.66 )
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.60 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.69 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.70 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.70 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.72 )
                                        qed
                                      qed
                                    qed
                                  next
                                    case c_cmac
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2)
                                           ) @ #vk.58 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.61 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.68 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.69 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.69 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.71 )
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.62 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.72 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.73 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.73 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.75 )
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case Prov_Confirmation_2
                        by contradiction /* from formulas */
                      next
                        case c_cmac
                        solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                         ),
                                         s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                               ) @ #vk.46 )
                          case c_cmac
                          solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.57 )
                            case c_s1
                            solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.62 )
                              case c_s1
                              solve( !KU( cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1)
                                     ) @ #vk.55 )
                                case NDev_Confirmation_1
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1
                                solve( !KU( cmac('prck',
                                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                      ),
                                                      s1(<'g'^~sk, 'g'^~sk.1>)))
                                       ) @ #vk.57 )
                                  case NDev_Confirmation_1
                                  solve( !KU( snd(~random) ) @ #vk.59 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.69 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.66 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.72 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.73 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.73 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.75 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.65 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.67 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.70 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.73 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.74 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.74 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.76 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.66 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( snd(~random) ) @ #vk.59 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.69 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.66 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.72 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.73 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.73 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.75 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.65 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.67 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.70 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.73 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.74 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.74 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.76 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.66 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( snd(~random) ) @ #vk.59 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.69 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.65 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.72 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.73 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.73 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.75 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.67 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.70 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.66 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.74 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.75 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.75 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.77 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.65 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case c_cmac
                                solve( !KU( cmac('prck',
                                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                      ),
                                                      s1(<'g'^~sk, 'g'^~sk.1>)))
                                       ) @ #vk.58 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( ~Np ) @ #vk.68 )
                                    case Prov_SendNonce_1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( snd(~random) ) @ #vk.60 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.72 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.76 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.76 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.78 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.66 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.70 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.73 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.68 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.76 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.77 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.77 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.79 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.67 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Prov_Confirmation_1
                  by contradiction /* from formulas */
                next
                  case c_cmac
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                               s1(<'g'^~sk, DHpkD>))), 
                                     '1'>+
                                    <snd(~random), '2'>),
                                   Nd_2)
                         ) @ #vk.11 )
                    case NDev_Confirmation_2
                    solve( (Cp_1 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <fst(~random), '2'>),
                                 Np_1))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <fst(~random), '2'>)) ∧
                             (mk = rm(Cp_1, mo, Np_1))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( ~Nd ) @ #vk.11 )
                        case NDev_SendNonce_2
                        solve( (Cp_2 =
                                cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                       '1'>+
                                      <snd(~random), '2'>),
                                     Np_2))  ∥
                               (∃ mk mo.
                                 ((mk+mo) =
                                  (
                                   <
                                    cmac('prck',
                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                    '1'>+
                                   <snd(~random), '2'>)) ∧
                                 (mk = rm(Cp_2, mo, Np_2))
                                ∧
                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                          case case_1
                          solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                           ),
                                           s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>))
                                 ) @ #vk.49 )
                            case c_cmac
                            solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>) ) @ #vk.61 )
                              case c_s1
                              solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.66 )
                                case c_s1
                                solve( !KU( cmac('prck',
                                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                      ),
                                                      s1(<'g'^~sk, 'g'^~sk.1>)))
                                       ) @ #vk.57 )
                                  case NDev_Confirmation_1
                                  solve( !KU( fst(~random) ) @ #vk.59 )
                                    case c_fst
                                    solve( !KU( ~random ) @ #vk.70 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( ~Np ) @ #vk.69 )
                                    case Prov_SendNonce_1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( fst(~random) ) @ #vk.59 )
                                    case NDev_Confirmation_1
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <fst(~random), '2'>),
                                                     Np_1)
                                           ) @ #vk.64 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_1
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~random), '2'>),
                                                       Np_2)
                                             ) @ #vk.63 )
                                        case NDev_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_2
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.66 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.71 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.72 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.72 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.74 )
                                          qed
                                        qed
                                      next
                                        case c_cmac
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.68 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.76 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.76 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.78 )
                                          qed
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case Prov_Confirmation_1
                                    solve( !KU( ~Np ) @ #vk.71 )
                                      case Prov_SendNonce_1
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_fst
                                    solve( !KU( ~random ) @ #vk.71 )
                                      case NDev_Confirmation_1
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <fst(~random), '2'>),
                                                       Np_1)
                                             ) @ #vk.65 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_1
                                        solve( !KU( cmac((
                                                          <
                                                           cmac('prck',
                                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                      <snd('g'^(~sk*~sk.1)), '2'>),
                                                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                           '1'>+
                                                          <snd(~random), '2'>),
                                                         Np_2)
                                               ) @ #vk.64 )
                                          case NDev_Confirmation_2
                                          by contradiction /* cyclic */
                                        next
                                          case Prov_Confirmation_2
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.73 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.74 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.74 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.76 )
                                            qed
                                          qed
                                        next
                                          case c_cmac
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.69 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.76 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.77 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.77 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.79 )
                                            qed
                                          qed
                                        qed
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_1
                                      solve( !KU( ~Np ) @ #vk.72 )
                                        case Prov_SendNonce_1
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case Prov_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                     s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                           ) @ #vk.46 )
                      case c_cmac
                      solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.56 )
                        case c_s1
                        solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.61 )
                          case c_s1
                          solve( !KU( cmac('prck',
                                           cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                s1(<'g'^~sk, DHpkD>)))
                                 ) @ #vk.54 )
                            case NDev_Confirmation_1
                            solve( !KU( ~Nd ) @ #vk.66 )
                              case NDev_SendNonce_1
                              solve( (Cp_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Np_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cp_1, mo, Np_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( fst(~random) ) @ #vk.59 )
                                  case c_fst
                                  solve( !KU( ~random ) @ #vk.69 )
                                    case NDev_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_1
                            solve( !KU( ~Np ) @ #vk.65 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_cmac
                            solve( !KU( fst(~random) ) @ #vk.56 )
                              case NDev_Confirmation_1
                              solve( !KU( ~Nd ) @ #vk.70 )
                                case NDev_SendNonce_1
                                solve( (Cp_1 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                               '1'>+
                                              <fst(~random), '2'>),
                                             Np_1))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                            '1'>+
                                           <fst(~random), '2'>)) ∧
                                         (mk = rm(Cp_1, mo, Np_1))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( splitEqs(8) )
                                    case split_case_1
                                    solve( !KU( snd(~random) ) @ #vk.64 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.76 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<z, '1'>+<z.1, '2'>),
                                                                 s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<z, '1'>+<z.1, '2'>),
                                                              s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.73 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<z, '1'>+<z.1, '2'>),
                                                                  s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                   ) @ #vk.75 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<z, '1'>+<z.1, '2'>),
                                                                           s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1
                                                                              >))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Np_1)
                                                     ) @ #vk.75 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.67 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case c_snd
                                      solve( !KU( ~random ) @ #vk.74 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case NDev_Confirmation_2
                                        solve( !KU( ~Nd.1 ) @ #vk.77 )
                                          case NDev_SendNonce_2
                                          solve( (Cp_2 =
                                                  cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<z, '1'>+<z.1, '2'>),
                                                                   s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~random), '2'>),
                                                       Np_2))  ∥
                                                 (∃ mk mo.
                                                   ((mk+mo) =
                                                    (
                                                     <
                                                      cmac('prck',
                                                           cmac((<z, '1'>+<z.1, '2'>),
                                                                s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                      '1'>+
                                                     <snd(~random), '2'>)) ∧
                                                   (mk = rm(Cp_2, mo, Np_2))
                                                  ∧
                                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                            case case_1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<z, '1'>+<z.1, '2'>),
                                                                    s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                     ) @ #vk.76 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<z, '1'>+<z.1, '2'>),
                                                                             s1(<<z, z.1>^inv(~sk.1), 
                                                                                 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~random), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.76 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_1
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_2
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_3
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_4
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_5
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_6
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  next
                                    case split_case_2
                                    solve( !KU( snd(~random) ) @ #vk.64 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.76 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(ECDHSecret.1), '1'>+
                                                                  <snd(ECDHSecret.1), '2'>),
                                                                 s1(<DHpkP, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(ECDHSecret.1), '1'>+
                                                               <snd(ECDHSecret.1), '2'>),
                                                              s1(<DHpkP, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.73 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(ECDHSecret.1), '1'>+
                                                                   <snd(ECDHSecret.1), '2'>),
                                                                  s1(<DHpkP, 'g'^~sk.1>)))
                                                   ) @ #vk.75 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(ECDHSecret.1), '1'>+
                                                                            <snd(ECDHSecret.1), '2'>),
                                                                           s1(<DHpkP, 'g'^~sk.1>))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Np_1)
                                                     ) @ #vk.75 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_1
                                                solve( !KU( ~Np ) @ #vk.73 )
                                                  case Prov_SendNonce_1
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.67 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case c_snd
                                      solve( !KU( ~random ) @ #vk.74 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case NDev_Confirmation_2
                                        solve( !KU( ~Nd.1 ) @ #vk.77 )
                                          case NDev_SendNonce_2
                                          solve( (Cp_2 =
                                                  cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst(ECDHSecret.1), '1'>+
                                                                    <snd(ECDHSecret.1), '2'>),
                                                                   s1(<DHpkP, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~random), '2'>),
                                                       Np_2))  ∥
                                                 (∃ mk mo.
                                                   ((mk+mo) =
                                                    (
                                                     <
                                                      cmac('prck',
                                                           cmac((<fst(ECDHSecret.1), '1'>+
                                                                 <snd(ECDHSecret.1), '2'>),
                                                                s1(<DHpkP, 'g'^~sk.1>))), 
                                                      '1'>+
                                                     <snd(~random), '2'>)) ∧
                                                   (mk = rm(Cp_2, mo, Np_2))
                                                  ∧
                                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                            case case_1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<fst(ECDHSecret.1), '1'>+
                                                                     <snd(ECDHSecret.1), '2'>),
                                                                    s1(<DHpkP, 'g'^~sk.1>)))
                                                     ) @ #vk.76 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst(ECDHSecret.1), '1'>+
                                                                              <snd(ECDHSecret.1), '2'>),
                                                                             s1(<DHpkP, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~random), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.76 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case Prov_Confirmation_1
                                                  solve( !KU( ~Np ) @ #vk.74 )
                                                    case Prov_SendNonce_1
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_1
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_2
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_3
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_4
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_5
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_6
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_1
                              solve( !KU( ~Np ) @ #vk.67 )
                                case Prov_SendNonce_1
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_fst
                              solve( !KU( ~random ) @ #vk.67 )
                                case NDev_Confirmation_1
                                solve( !KU( ~Nd ) @ #vk.71 )
                                  case NDev_SendNonce_1
                                  solve( (Cp_1 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                              '1'>+
                                             <fst(~random), '2'>)) ∧
                                           (mk = rm(Cp_1, mo, Np_1))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( splitEqs(8) )
                                      case split_case_1
                                      solve( !KU( snd(~random) ) @ #vk.65 )
                                        case NDev_Confirmation_2
                                        solve( !KU( ~Nd.1 ) @ #vk.77 )
                                          case NDev_SendNonce_2
                                          solve( (Cp_2 =
                                                  cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<z, '1'>+<z.1, '2'>),
                                                                   s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~random), '2'>),
                                                       Np_2))  ∥
                                                 (∃ mk mo.
                                                   ((mk+mo) =
                                                    (
                                                     <
                                                      cmac('prck',
                                                           cmac((<z, '1'>+<z.1, '2'>),
                                                                s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                      '1'>+
                                                     <snd(~random), '2'>)) ∧
                                                   (mk = rm(Cp_2, mo, Np_2))
                                                  ∧
                                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                            case case_1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<z, '1'>+<z.1, '2'>),
                                                                    s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                     ) @ #vk.76 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<z, '1'>+<z.1, '2'>),
                                                                             s1(<<z, z.1>^inv(~sk.1), 
                                                                                 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~random), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.76 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case c_snd
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case split_case_2
                                      solve( !KU( snd(~random) ) @ #vk.65 )
                                        case NDev_Confirmation_2
                                        solve( !KU( ~Nd.1 ) @ #vk.77 )
                                          case NDev_SendNonce_2
                                          solve( (Cp_2 =
                                                  cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst(ECDHSecret.1), '1'>+
                                                                    <snd(ECDHSecret.1), '2'>),
                                                                   s1(<DHpkP, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~random), '2'>),
                                                       Np_2))  ∥
                                                 (∃ mk mo.
                                                   ((mk+mo) =
                                                    (
                                                     <
                                                      cmac('prck',
                                                           cmac((<fst(ECDHSecret.1), '1'>+
                                                                 <snd(ECDHSecret.1), '2'>),
                                                                s1(<DHpkP, 'g'^~sk.1>))), 
                                                      '1'>+
                                                     <snd(~random), '2'>)) ∧
                                                   (mk = rm(Cp_2, mo, Np_2))
                                                  ∧
                                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                            case case_1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<fst(ECDHSecret.1), '1'>+
                                                                     <snd(ECDHSecret.1), '2'>),
                                                                    s1(<DHpkP, 'g'^~sk.1>)))
                                                     ) @ #vk.76 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst(ECDHSecret.1), '1'>+
                                                                              <snd(ECDHSecret.1), '2'>),
                                                                             s1(<DHpkP, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~random), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.76 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case Prov_Confirmation_1
                                                  solve( !KU( ~Np ) @ #vk.74 )
                                                    case Prov_SendNonce_1
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case c_snd
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case NDev_Confirmation_2
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1_case_1
                                solve( !KU( ~Np ) @ #vk.68 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_1_case_2
                                solve( !KU( ~Np ) @ #vk.68 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_1_case_3
                                solve( !KU( ~Np ) @ #vk.68 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_1_case_4
                                solve( !KU( ~Np ) @ #vk.68 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_1_case_5
                                solve( !KU( ~Np ) @ #vk.68 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_1_case_6
                                solve( !KU( ~Np ) @ #vk.68 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_2_case_1
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2_case_2
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2_case_4
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2_case_5
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2_case_6
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case split_case_2
              solve( !KU( cmac('prsk',
                               cmac((<z, '1'>+<z.1, '2'>),
                                    s1(<s1(<'g'^~sk, <z, z.1>^inv(~sk)>), ~Np.1, Nd_2>)))
                     ) @ #vk )
                case c_cmac
                solve( !KU( cmac((
                                  <
                                   cmac('prck',
                                        cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                                   '1'>+
                                  <fst(~random), '2'>),
                                 Nd_1)
                       ) @ #vk.12 )
                  case Prov_Confirmation_1
                  by contradiction /* from formulas */
                next
                  case c_cmac
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                                     '1'>+
                                    <snd(~random), '2'>),
                                   Nd_2)
                         ) @ #vk.11 )
                    case Prov_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( <z, z.1>^inv(~sk) ) @ #vk.13 )
                      case c_exp
                      by solve( !KU( ~sk ) @ #vk.57 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Receive_UserDevice_case_2
          by solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User, AuthValue_In
                    ) ▶₃ #vr.10 )
        qed
      qed
    qed
  next
    case Prov_Check_case_2
    solve( (Cd_1 =
            cmac((
                  <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                  <fst(~m), '2'>),
                 Nd_1))  ∥
           (∃ mk mo.
             ((mk+mo) =
              (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
               <fst(~m), '2'>)) ∧
             (mk = rm(Cd_1, mo, Nd_1))
            ∧
             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
      case case_1
      solve( (Cd_2 =
              cmac((
                    <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                    <snd(~m), '2'>),
                   Nd_2))  ∥
             (∃ mk mo.
               ((mk+mo) =
                (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                 <snd(~m), '2'>)) ∧
               (mk = rm(Cd_2, mo, Nd_2))
              ∧
               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
        case case_1
        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User, 'Input'
               ) ▶₃ #vr.10 )
          case Receive_UserDevice_case_1
          solve( In_UD( <'AskForInput', 'Device', 'User'>, NDev, $User, 'Input'
                 ) ▶₄ #vr.10 )
            case Receive_UserDevice
            solve( splitEqs(2) )
              case split_case_1
              solve( !KU( cmac('prsk',
                               cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                    s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>)))
                     ) @ #vk )
                case c_cmac
                solve( !KU( cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                             s1(<'g'^~sk, DHpkD>))), 
                                   '1'>+
                                  <fst(~m), '2'>),
                                 Nd_1)
                       ) @ #vk.12 )
                  case NDev_Confirmation_1
                  solve( !KU( ~Nd ) @ #vk.12 )
                    case NDev_SendNonce_1
                    solve( (Cp_1 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <fst(~m), '2'>),
                                 Np_1))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <fst(~m), '2'>)) ∧
                             (mk = rm(Cp_1, mo, Np_1))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <snd(~m), '2'>),
                                       Nd_2)
                             ) @ #vk.12 )
                        case NDev_Confirmation_2
                        solve( !KU( ~Nd.1 ) @ #vk.12 )
                          case NDev_SendNonce_2
                          solve( (Cp_2 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <snd(~m), '2'>),
                                       Np_2))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk, 'g'^~sk.1>))), 
                                      '1'>+
                                     <snd(~m), '2'>)) ∧
                                   (mk = rm(Cp_2, mo, Np_2))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                             ),
                                             s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>))
                                   ) @ #vk.47 )
                              case c_cmac
                              solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>) ) @ #vk.54 )
                                case c_s1
                                solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.61 )
                                  case c_s1
                                  solve( !KU( cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <fst(~m), '2'>),
                                                   Np_1)
                                         ) @ #vk.55 )
                                    case NDev_Confirmation_1
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_1
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~m), '2'>),
                                                     Np_2)
                                           ) @ #vk.57 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.59 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.63 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.64 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.64 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.66 )
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.60 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.69 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.70 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.70 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.72 )
                                        qed
                                      qed
                                    qed
                                  next
                                    case c_cmac
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~m), '2'>),
                                                     Np_2)
                                           ) @ #vk.58 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.61 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.68 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.69 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.69 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.71 )
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.62 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.72 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.73 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.73 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.75 )
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case Prov_Confirmation_2
                        by contradiction /* from formulas */
                      next
                        case c_cmac
                        solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                         ),
                                         s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                               ) @ #vk.46 )
                          case c_cmac
                          solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.57 )
                            case c_s1
                            solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.62 )
                              case c_s1
                              solve( !KU( cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~m), '2'>),
                                               Np_1)
                                     ) @ #vk.55 )
                                case NDev_Confirmation_1
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1
                                solve( !KU( cmac('prck',
                                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                      ),
                                                      s1(<'g'^~sk, 'g'^~sk.1>)))
                                       ) @ #vk.57 )
                                  case NDev_Confirmation_1
                                  solve( !KU( snd(~m) ) @ #vk.59 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.69 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~m), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~m), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.66 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.72 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.73 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.73 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.75 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.65 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~m ) @ #vk.67 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.70 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~m), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~m), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.73 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.74 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.74 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.76 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.66 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( snd(~m) ) @ #vk.59 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.69 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~m), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~m), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.66 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.72 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.73 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.73 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.75 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.65 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~m ) @ #vk.67 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.70 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~m), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~m), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.73 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.74 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.74 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.76 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.66 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( snd(~m) ) @ #vk.59 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.69 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~m), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~m), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.65 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.72 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.73 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.73 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.75 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~m ) @ #vk.67 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.70 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~m), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~m), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.66 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.74 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.75 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.75 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.77 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.65 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case c_cmac
                                solve( !KU( cmac('prck',
                                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                      ),
                                                      s1(<'g'^~sk, 'g'^~sk.1>)))
                                       ) @ #vk.58 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( ~Np ) @ #vk.68 )
                                    case Prov_SendNonce_1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( snd(~m) ) @ #vk.60 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.72 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~m), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~m), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.76 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.76 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.78 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.66 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~m ) @ #vk.70 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.73 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~m), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~m), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.68 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.76 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.77 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.77 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.79 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.67 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Prov_Confirmation_1
                  by contradiction /* from formulas */
                next
                  case c_cmac
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                               s1(<'g'^~sk, DHpkD>))), 
                                     '1'>+
                                    <snd(~m), '2'>),
                                   Nd_2)
                         ) @ #vk.11 )
                    case NDev_Confirmation_2
                    solve( (Cp_1 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <fst(~m), '2'>),
                                 Np_1))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <fst(~m), '2'>)) ∧
                             (mk = rm(Cp_1, mo, Np_1))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( ~Nd ) @ #vk.11 )
                        case NDev_SendNonce_2
                        solve( (Cp_2 =
                                cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                       '1'>+
                                      <snd(~m), '2'>),
                                     Np_2))  ∥
                               (∃ mk mo.
                                 ((mk+mo) =
                                  (
                                   <
                                    cmac('prck',
                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                    '1'>+
                                   <snd(~m), '2'>)) ∧
                                 (mk = rm(Cp_2, mo, Np_2))
                                ∧
                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                          case case_1
                          solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                           ),
                                           s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>))
                                 ) @ #vk.49 )
                            case c_cmac
                            solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>) ) @ #vk.61 )
                              case c_s1
                              solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.66 )
                                case c_s1
                                solve( !KU( cmac('prck',
                                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                      ),
                                                      s1(<'g'^~sk, 'g'^~sk.1>)))
                                       ) @ #vk.57 )
                                  case NDev_Confirmation_1
                                  solve( !KU( fst(~m) ) @ #vk.59 )
                                    case c_fst
                                    solve( !KU( ~m ) @ #vk.70 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( ~Np ) @ #vk.69 )
                                    case Prov_SendNonce_1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( fst(~m) ) @ #vk.59 )
                                    case NDev_Confirmation_1
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <fst(~m), '2'>),
                                                     Np_1)
                                           ) @ #vk.64 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_1
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~m), '2'>),
                                                       Np_2)
                                             ) @ #vk.63 )
                                        case NDev_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_2
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.66 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.71 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.72 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.72 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.74 )
                                          qed
                                        qed
                                      next
                                        case c_cmac
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.68 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.76 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.76 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.78 )
                                          qed
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case Prov_Confirmation_1
                                    solve( !KU( ~Np ) @ #vk.71 )
                                      case Prov_SendNonce_1
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_fst
                                    solve( !KU( ~m ) @ #vk.71 )
                                      case NDev_Confirmation_1
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <fst(~m), '2'>),
                                                       Np_1)
                                             ) @ #vk.65 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_1
                                        solve( !KU( cmac((
                                                          <
                                                           cmac('prck',
                                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                      <snd('g'^(~sk*~sk.1)), '2'>),
                                                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                           '1'>+
                                                          <snd(~m), '2'>),
                                                         Np_2)
                                               ) @ #vk.64 )
                                          case NDev_Confirmation_2
                                          by contradiction /* cyclic */
                                        next
                                          case Prov_Confirmation_2
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.73 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.74 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.74 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.76 )
                                            qed
                                          qed
                                        next
                                          case c_cmac
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.69 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.76 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.77 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.77 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.79 )
                                            qed
                                          qed
                                        qed
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_1
                                      solve( !KU( ~Np ) @ #vk.72 )
                                        case Prov_SendNonce_1
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case Prov_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                     s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                           ) @ #vk.46 )
                      case c_cmac
                      solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.56 )
                        case c_s1
                        solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.61 )
                          case c_s1
                          solve( !KU( cmac('prck',
                                           cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                s1(<'g'^~sk, DHpkD>)))
                                 ) @ #vk.54 )
                            case NDev_Confirmation_1
                            solve( !KU( ~Nd ) @ #vk.66 )
                              case NDev_SendNonce_1
                              solve( (Cp_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~m), '2'>),
                                           Np_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                                          '1'>+
                                         <fst(~m), '2'>)) ∧
                                       (mk = rm(Cp_1, mo, Np_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( fst(~m) ) @ #vk.59 )
                                  case c_fst
                                  solve( !KU( ~m ) @ #vk.69 )
                                    case NDev_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_1
                            solve( !KU( ~Np ) @ #vk.65 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_cmac
                            solve( !KU( fst(~m) ) @ #vk.56 )
                              case NDev_Confirmation_1
                              solve( !KU( ~Nd ) @ #vk.70 )
                                case NDev_SendNonce_1
                                solve( (Cp_1 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                               '1'>+
                                              <fst(~m), '2'>),
                                             Np_1))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                            '1'>+
                                           <fst(~m), '2'>)) ∧
                                         (mk = rm(Cp_1, mo, Np_1))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( splitEqs(7) )
                                    case split_case_1
                                    solve( !KU( snd(~m) ) @ #vk.64 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.76 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<z, '1'>+<z.1, '2'>),
                                                                 s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~m), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<z, '1'>+<z.1, '2'>),
                                                              s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~m), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.73 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<z, '1'>+<z.1, '2'>),
                                                                  s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                   ) @ #vk.75 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<z, '1'>+<z.1, '2'>),
                                                                           s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1
                                                                              >))), 
                                                                 '1'>+
                                                                <fst(~m), '2'>),
                                                               Np_1)
                                                     ) @ #vk.75 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.67 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case c_snd
                                      solve( !KU( ~m ) @ #vk.74 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case NDev_Confirmation_2
                                        solve( !KU( ~Nd.1 ) @ #vk.77 )
                                          case NDev_SendNonce_2
                                          solve( (Cp_2 =
                                                  cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<z, '1'>+<z.1, '2'>),
                                                                   s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~m), '2'>),
                                                       Np_2))  ∥
                                                 (∃ mk mo.
                                                   ((mk+mo) =
                                                    (
                                                     <
                                                      cmac('prck',
                                                           cmac((<z, '1'>+<z.1, '2'>),
                                                                s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                      '1'>+
                                                     <snd(~m), '2'>)) ∧
                                                   (mk = rm(Cp_2, mo, Np_2))
                                                  ∧
                                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                            case case_1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<z, '1'>+<z.1, '2'>),
                                                                    s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                     ) @ #vk.76 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<z, '1'>+<z.1, '2'>),
                                                                             s1(<<z, z.1>^inv(~sk.1), 
                                                                                 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~m), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.76 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_2
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  next
                                    case split_case_2
                                    solve( !KU( snd(~m) ) @ #vk.64 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.76 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(ECDHSecret.1), '1'>+
                                                                  <snd(ECDHSecret.1), '2'>),
                                                                 s1(<DHpkP, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~m), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(ECDHSecret.1), '1'>+
                                                               <snd(ECDHSecret.1), '2'>),
                                                              s1(<DHpkP, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~m), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.73 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(ECDHSecret.1), '1'>+
                                                                   <snd(ECDHSecret.1), '2'>),
                                                                  s1(<DHpkP, 'g'^~sk.1>)))
                                                   ) @ #vk.75 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(ECDHSecret.1), '1'>+
                                                                            <snd(ECDHSecret.1), '2'>),
                                                                           s1(<DHpkP, 'g'^~sk.1>))), 
                                                                 '1'>+
                                                                <fst(~m), '2'>),
                                                               Np_1)
                                                     ) @ #vk.75 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_1
                                                solve( !KU( ~Np ) @ #vk.73 )
                                                  case Prov_SendNonce_1
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.67 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case c_snd
                                      solve( !KU( ~m ) @ #vk.74 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case NDev_Confirmation_2
                                        solve( !KU( ~Nd.1 ) @ #vk.77 )
                                          case NDev_SendNonce_2
                                          solve( (Cp_2 =
                                                  cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst(ECDHSecret.1), '1'>+
                                                                    <snd(ECDHSecret.1), '2'>),
                                                                   s1(<DHpkP, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~m), '2'>),
                                                       Np_2))  ∥
                                                 (∃ mk mo.
                                                   ((mk+mo) =
                                                    (
                                                     <
                                                      cmac('prck',
                                                           cmac((<fst(ECDHSecret.1), '1'>+
                                                                 <snd(ECDHSecret.1), '2'>),
                                                                s1(<DHpkP, 'g'^~sk.1>))), 
                                                      '1'>+
                                                     <snd(~m), '2'>)) ∧
                                                   (mk = rm(Cp_2, mo, Np_2))
                                                  ∧
                                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                            case case_1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<fst(ECDHSecret.1), '1'>+
                                                                     <snd(ECDHSecret.1), '2'>),
                                                                    s1(<DHpkP, 'g'^~sk.1>)))
                                                     ) @ #vk.76 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst(ECDHSecret.1), '1'>+
                                                                              <snd(ECDHSecret.1), '2'>),
                                                                             s1(<DHpkP, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~m), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.76 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case Prov_Confirmation_1
                                                  solve( !KU( ~Np ) @ #vk.74 )
                                                    case Prov_SendNonce_1
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_2
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_1
                              solve( !KU( ~Np ) @ #vk.67 )
                                case Prov_SendNonce_1
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_fst
                              solve( !KU( ~m ) @ #vk.67 )
                                case NDev_Confirmation_1
                                solve( !KU( ~Nd ) @ #vk.71 )
                                  case NDev_SendNonce_1
                                  solve( (Cp_1 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~m), '2'>),
                                               Np_1))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                              '1'>+
                                             <fst(~m), '2'>)) ∧
                                           (mk = rm(Cp_1, mo, Np_1))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( splitEqs(7) )
                                      case split_case_1
                                      solve( !KU( snd(~m) ) @ #vk.65 )
                                        case NDev_Confirmation_2
                                        solve( !KU( ~Nd.1 ) @ #vk.77 )
                                          case NDev_SendNonce_2
                                          solve( (Cp_2 =
                                                  cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<z, '1'>+<z.1, '2'>),
                                                                   s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~m), '2'>),
                                                       Np_2))  ∥
                                                 (∃ mk mo.
                                                   ((mk+mo) =
                                                    (
                                                     <
                                                      cmac('prck',
                                                           cmac((<z, '1'>+<z.1, '2'>),
                                                                s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                      '1'>+
                                                     <snd(~m), '2'>)) ∧
                                                   (mk = rm(Cp_2, mo, Np_2))
                                                  ∧
                                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                            case case_1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<z, '1'>+<z.1, '2'>),
                                                                    s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                     ) @ #vk.76 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<z, '1'>+<z.1, '2'>),
                                                                             s1(<<z, z.1>^inv(~sk.1), 
                                                                                 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~m), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.76 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case c_snd
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case split_case_2
                                      solve( !KU( snd(~m) ) @ #vk.65 )
                                        case NDev_Confirmation_2
                                        solve( !KU( ~Nd.1 ) @ #vk.77 )
                                          case NDev_SendNonce_2
                                          solve( (Cp_2 =
                                                  cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst(ECDHSecret.1), '1'>+
                                                                    <snd(ECDHSecret.1), '2'>),
                                                                   s1(<DHpkP, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~m), '2'>),
                                                       Np_2))  ∥
                                                 (∃ mk mo.
                                                   ((mk+mo) =
                                                    (
                                                     <
                                                      cmac('prck',
                                                           cmac((<fst(ECDHSecret.1), '1'>+
                                                                 <snd(ECDHSecret.1), '2'>),
                                                                s1(<DHpkP, 'g'^~sk.1>))), 
                                                      '1'>+
                                                     <snd(~m), '2'>)) ∧
                                                   (mk = rm(Cp_2, mo, Np_2))
                                                  ∧
                                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                            case case_1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<fst(ECDHSecret.1), '1'>+
                                                                     <snd(ECDHSecret.1), '2'>),
                                                                    s1(<DHpkP, 'g'^~sk.1>)))
                                                     ) @ #vk.76 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst(ECDHSecret.1), '1'>+
                                                                              <snd(ECDHSecret.1), '2'>),
                                                                             s1(<DHpkP, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~m), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.76 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case Prov_Confirmation_1
                                                  solve( !KU( ~Np ) @ #vk.74 )
                                                    case Prov_SendNonce_1
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case c_snd
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case NDev_Confirmation_2
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1
                                solve( !KU( ~Np ) @ #vk.68 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case split_case_2
              solve( !KU( cmac('prsk',
                               cmac((<z, '1'>+<z.1, '2'>),
                                    s1(<s1(<'g'^~sk, <z, z.1>^inv(~sk)>), ~Np.1, Nd_2>)))
                     ) @ #vk )
                case c_cmac
                solve( !KU( cmac((
                                  <
                                   cmac('prck',
                                        cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                                   '1'>+
                                  <fst(~m), '2'>),
                                 Nd_1)
                       ) @ #vk.12 )
                  case Prov_Confirmation_1
                  by contradiction /* from formulas */
                next
                  case c_cmac
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                                     '1'>+
                                    <snd(~m), '2'>),
                                   Nd_2)
                         ) @ #vk.11 )
                    case Prov_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( <z, z.1>^inv(~sk) ) @ #vk.13 )
                      case c_exp
                      by solve( !KU( ~sk ) @ #vk.57 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Receive_UserDevice_case_2
          solve( In_UD( <'AskForInput', 'Device', 'User'>, NDev, $User, 'Input'
                 ) ▶₄ #vr.10 )
            case Receive_UserDevice
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Prov_Check_case_3
    solve( (Cd_1 =
            cmac((
                  <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                  <fst(~random), '2'>),
                 Nd_1))  ∥
           (∃ mk mo.
             ((mk+mo) =
              (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
               <fst(~random), '2'>)) ∧
             (mk = rm(Cd_1, mo, Nd_1))
            ∧
             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
      case case_1
      solve( (Cd_2 =
              cmac((
                    <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                    <snd(~random), '2'>),
                   Nd_2))  ∥
             (∃ mk mo.
               ((mk+mo) =
                (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                 <snd(~random), '2'>)) ∧
               (mk = rm(Cd_2, mo, Nd_2))
              ∧
               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
        case case_1
        solve( splitEqs(2) )
          case split_case_1
          solve( !KU( cmac('prsk',
                           cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>)))
                 ) @ #vk )
            case c_cmac
            solve( !KU( cmac((
                              <
                               cmac('prck',
                                    cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                         s1(<'g'^~sk, DHpkD>))), 
                               '1'>+
                              <fst(~random), '2'>),
                             Nd_1)
                   ) @ #vk.13 )
              case NDev_Confirmation_1_case_1
              solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                     ) ▶₂ #vr.23 )
                case Receive_UserDevice
                solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, AuthValue_In
                       ) ▶₃ #vr.23 )
                  case Receive_UserDevice
                  by contradiction /* from formulas */
                qed
              qed
            next
              case NDev_Confirmation_1_case_2
              solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, AuthValue_In
                     ) ▶₂ #vr.23 )
                case Receive_UserDevice
                solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                       ) ▶₃ #vr.23 )
                  case Receive_UserDevice
                  solve( !KU( ~Nd ) @ #vk.13 )
                    case NDev_SendNonce_1
                    solve( (Cp_1 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <fst(~random), '2'>),
                                 Np_1))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <fst(~random), '2'>)) ∧
                             (mk = rm(Cp_1, mo, Np_1))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <snd(~random), '2'>),
                                       Nd_2)
                             ) @ #vk.13 )
                        case NDev_Confirmation_2
                        solve( !KU( ~Nd.1 ) @ #vk.13 )
                          case NDev_SendNonce_2
                          solve( (Cp_2 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <snd(~random), '2'>),
                                       Np_2))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk, 'g'^~sk.1>))), 
                                      '1'>+
                                     <snd(~random), '2'>)) ∧
                                   (mk = rm(Cp_2, mo, Np_2))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                             ),
                                             s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>))
                                   ) @ #vk.32 )
                              case c_cmac
                              solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>) ) @ #vk.56 )
                                case c_s1
                                solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.63 )
                                  case c_s1
                                  solve( !KU( cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <fst(~random), '2'>),
                                                   Np_1)
                                         ) @ #vk.49 )
                                    case NDev_Confirmation_1
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_1
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2)
                                           ) @ #vk.59 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.61 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.65 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.66 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.66 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.68 )
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.62 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.71 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.72 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.72 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.74 )
                                        qed
                                      qed
                                    qed
                                  next
                                    case c_cmac
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2)
                                           ) @ #vk.60 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.63 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.70 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.71 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.71 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.73 )
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.64 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.74 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.75 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.75 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.77 )
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case Prov_Confirmation_2
                        by contradiction /* from formulas */
                      next
                        case c_cmac
                        solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                         ),
                                         s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                               ) @ #vk.33 )
                          case c_cmac
                          solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.59 )
                            case c_s1
                            solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.64 )
                              case c_s1
                              solve( !KU( cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1)
                                     ) @ #vk.49 )
                                case NDev_Confirmation_1
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1
                                solve( !KU( cmac('prck',
                                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                      ),
                                                      s1(<'g'^~sk, 'g'^~sk.1>)))
                                       ) @ #vk.59 )
                                  case NDev_Confirmation_1
                                  solve( !KU( snd(~random) ) @ #vk.61 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.71 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.68 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.74 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.75 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.75 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.77 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.67 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.69 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.72 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.69 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.76 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.76 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.78 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.68 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( snd(~random) ) @ #vk.61 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.71 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.68 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.74 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.75 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.75 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.77 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.67 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.69 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.72 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.69 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.76 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.76 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.78 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.68 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( snd(~random) ) @ #vk.61 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.71 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.74 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.75 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.75 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.77 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.66 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.69 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.72 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.68 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.76 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.77 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.77 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.79 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.67 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case c_cmac
                                solve( !KU( cmac('prck',
                                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                      ),
                                                      s1(<'g'^~sk, 'g'^~sk.1>)))
                                       ) @ #vk.60 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( ~Np ) @ #vk.70 )
                                    case Prov_SendNonce_1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( snd(~random) ) @ #vk.62 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.74 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.69 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.77 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.78 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.78 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.80 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.68 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.72 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.75 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.70 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.78 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.79 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.79 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.81 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.69 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case NDev_Confirmation_2_case_1
              solve( (Cp_1 =
                      cmac((<z, '2'>+
                            <
                             cmac('prck',
                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                             '1'>
                           ),
                           Np_1))  ∥
                     (∃ mk mo.
                       ((mk+mo) =
                        (<z, '2'>+
                         <
                          cmac('prck',
                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                          '1'>
                        )) ∧
                       (mk = rm(Cp_1, mo, Np_1))
                      ∧
                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                case case_1
                solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                       ) ▶₂ #vr.25 )
                  case Receive_UserDevice
                  by solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1,
                                   <z, fst(~random)>
                            ) ▶₃ #vr.25 )
                qed
              qed
            next
              case NDev_Confirmation_2_case_2
              solve( (Cp_1 =
                      cmac((<z, '2'>+
                            <
                             cmac('prck',
                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                             '1'>
                           ),
                           Np_1))  ∥
                     (∃ mk mo.
                       ((mk+mo) =
                        (<z, '2'>+
                         <
                          cmac('prck',
                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                          '1'>
                        )) ∧
                       (mk = rm(Cp_1, mo, Np_1))
                      ∧
                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                case case_1
                by solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1,
                                 <z, fst(~random)>
                          ) ▶₂ #vr.25 )
              qed
            next
              case Prov_Confirmation_1
              by contradiction /* from formulas */
            next
              case c_cmac
              solve( !KU( cmac((
                                <
                                 cmac('prck',
                                      cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                           s1(<'g'^~sk, DHpkD>))), 
                                 '1'>+
                                <snd(~random), '2'>),
                               Nd_2)
                     ) @ #vk.12 )
                case NDev_Confirmation_1_case_1
                solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                       ) ▶₂ #vr.23 )
                  case Receive_UserDevice
                  by solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1,
                                   <snd(~random), x>
                            ) ▶₃ #vr.23 )
                qed
              next
                case NDev_Confirmation_1_case_2
                by solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1,
                                 <snd(~random), x>
                          ) ▶₂ #vr.23 )
              next
                case NDev_Confirmation_2_case_1
                solve( (Cp_1 =
                        cmac((<z, '2'>+
                              <
                               cmac('prck',
                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                               '1'>
                             ),
                             Np_1))  ∥
                       (∃ mk mo.
                         ((mk+mo) =
                          (<z, '2'>+
                           <
                            cmac('prck',
                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                      s1(<'g'^~sk, 'g'^~sk.1>))), 
                            '1'>
                          )) ∧
                         (mk = rm(Cp_1, mo, Np_1))
                        ∧
                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                  case case_1
                  solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                         ) ▶₂ #vr.25 )
                    case Receive_UserDevice
                    solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, AuthValue_In
                           ) ▶₃ #vr.25 )
                      case Receive_UserDevice
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case NDev_Confirmation_2_case_2
                solve( (Cp_1 =
                        cmac((<z, '2'>+
                              <
                               cmac('prck',
                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                               '1'>
                             ),
                             Np_1))  ∥
                       (∃ mk mo.
                         ((mk+mo) =
                          (<z, '2'>+
                           <
                            cmac('prck',
                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                      s1(<'g'^~sk, 'g'^~sk.1>))), 
                            '1'>
                          )) ∧
                         (mk = rm(Cp_1, mo, Np_1))
                        ∧
                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                  case case_1
                  solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, AuthValue_In
                         ) ▶₂ #vr.25 )
                    case Receive_UserDevice
                    solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                           ) ▶₃ #vr.25 )
                      case Receive_UserDevice
                      solve( !KU( ~Nd ) @ #vk.12 )
                        case NDev_SendNonce_2
                        solve( (Cp_2 =
                                cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                       '1'>+
                                      <snd(~random), '2'>),
                                     Np_2))  ∥
                               (∃ mk mo.
                                 ((mk+mo) =
                                  (
                                   <
                                    cmac('prck',
                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                    '1'>+
                                   <snd(~random), '2'>)) ∧
                                 (mk = rm(Cp_2, mo, Np_2))
                                ∧
                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                          case case_1
                          solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                           ),
                                           s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>))
                                 ) @ #vk.34 )
                            case c_cmac
                            solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>) ) @ #vk.63 )
                              case c_s1
                              solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.68 )
                                case c_s1
                                solve( !KU( cmac('prck',
                                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                      ),
                                                      s1(<'g'^~sk, 'g'^~sk.1>)))
                                       ) @ #vk.42 )
                                  case NDev_Confirmation_1
                                  solve( !KU( fst(~random) ) @ #vk.44 )
                                    case c_fst
                                    solve( !KU( ~random ) @ #vk.72 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( ~Np ) @ #vk.71 )
                                    case Prov_SendNonce_1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( fst(~random) ) @ #vk.44 )
                                    case NDev_Confirmation_1
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <fst(~random), '2'>),
                                                     Np_1)
                                           ) @ #vk.58 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_1
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~random), '2'>),
                                                       Np_2)
                                             ) @ #vk.57 )
                                        case NDev_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_2
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.68 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.73 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.74 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.74 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.76 )
                                          qed
                                        qed
                                      next
                                        case c_cmac
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.70 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.77 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.78 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.78 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.80 )
                                          qed
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case Prov_Confirmation_1
                                    solve( !KU( ~Np ) @ #vk.73 )
                                      case Prov_SendNonce_1
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_fst
                                    solve( !KU( ~random ) @ #vk.73 )
                                      case NDev_Confirmation_1
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <fst(~random), '2'>),
                                                       Np_1)
                                             ) @ #vk.59 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_1
                                        solve( !KU( cmac((
                                                          <
                                                           cmac('prck',
                                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                      <snd('g'^(~sk*~sk.1)), '2'>),
                                                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                           '1'>+
                                                          <snd(~random), '2'>),
                                                         Np_2)
                                               ) @ #vk.58 )
                                          case NDev_Confirmation_2
                                          by contradiction /* cyclic */
                                        next
                                          case Prov_Confirmation_2
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.69 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.76 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.76 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.78 )
                                            qed
                                          qed
                                        next
                                          case c_cmac
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.71 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.78 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.79 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.79 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.81 )
                                            qed
                                          qed
                                        qed
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_1
                                      solve( !KU( ~Np ) @ #vk.74 )
                                        case Prov_SendNonce_1
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Prov_Confirmation_2
                by contradiction /* from formulas */
              next
                case c_cmac
                solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                 s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                       ) @ #vk.35 )
                  case c_cmac
                  solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.45 )
                    case c_s1
                    solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.50 )
                      case c_s1
                      solve( !KU( cmac('prck',
                                       cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                            s1(<'g'^~sk, DHpkD>)))
                             ) @ #vk.43 )
                        case NDev_Confirmation_1_case_1
                        solve( !KU( ~Nd ) @ #vk.62 )
                          case NDev_SendNonce_1
                          solve( (Cp_1 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <fst(~random.1), '2'>),
                                       Np_1))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk, 'g'^~sk.1>))), 
                                      '1'>+
                                     <fst(~random.1), '2'>)) ∧
                                   (mk = rm(Cp_1, mo, Np_1))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( fst(~random) ) @ #vk.46 )
                              case Prov_Confirmation_1
                              solve( !KU( ~Np ) @ #vk.73 )
                                case Prov_SendNonce_1
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_fst
                              solve( !KU( ~random ) @ #vk.73 )
                                case Prov_Confirmation_1
                                solve( !KU( ~Np ) @ #vk.74 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_2
                        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                               ) ▶₂ #vr.26 )
                          case Receive_UserDevice
                          solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, AuthValue_In
                                 ) ▶₃ #vr.26 )
                            case Receive_UserDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_3
                        solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, AuthValue_In
                               ) ▶₂ #vr.26 )
                          case Receive_UserDevice
                          solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                 ) ▶₃ #vr.26 )
                            case Receive_UserDevice
                            solve( !KU( ~Nd ) @ #vk.61 )
                              case NDev_SendNonce_1
                              solve( (Cp_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Np_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cp_1, mo, Np_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( fst(~random) ) @ #vk.46 )
                                  case c_fst
                                  solve( !KU( ~random ) @ #vk.71 )
                                    case NDev_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_4
                        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                               ) ▶₃ #vr.26 )
                          case Receive_UserDevice
                          by solve( In_UD( <'AskForInput', 'Device', 'User'>, NDev, $User.1,
                                           'Input'
                                    ) ▶₄ #vr.26 )
                        qed
                      next
                        case NDev_Confirmation_1_case_5
                        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                               ) ▶₃ #vr.26 )
                          case Receive_UserDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np ) @ #vk.54 )
                          case Prov_SendNonce_1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_cmac
                        solve( !KU( fst(~random) ) @ #vk.45 )
                          case NDev_Confirmation_1_case_1
                          solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                                 ) ▶₂ #vr.26 )
                            case Receive_UserDevice
                            solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                   ) ▶₃ #vr.26 )
                              case Receive_UserDevice
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case NDev_Confirmation_1_case_2
                          solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                                 ) ▶₂ #vr.26 )
                            case Receive_UserDevice
                            solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                   ) ▶₃ #vr.26 )
                              case Receive_UserDevice
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case NDev_Confirmation_1_case_3
                          solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                                 ) ▶₂ #vr.26 )
                            case Receive_UserDevice
                            solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                   ) ▶₃ #vr.26 )
                              case Receive_UserDevice
                              solve( !KU( ~Nd ) @ #vk.64 )
                                case NDev_SendNonce_1
                                solve( (Cp_1 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                         s1(<DHpkP, 'g'^~sk.1>))), 
                                               '1'>+
                                              <fst(~random), '2'>),
                                             Np_1))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                      s1(<DHpkP, 'g'^~sk.1>))), 
                                            '1'>+
                                           <fst(~random), '2'>)) ∧
                                         (mk = rm(Cp_1, mo, Np_1))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( snd(~random) ) @ #vk.51 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.78 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst(ECDHSecret.1), '1'>+
                                                                <snd(ECDHSecret.1), '2'>),
                                                               s1(<DHpkP, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>
                                                            ),
                                                            s1(<DHpkP, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<'g'^~sk, DHpkD>))
                                               ) @ #vk.58 )
                                          case c_cmac
                                          solve( !KU( cmac('prck',
                                                           cmac((<fst(ECDHSecret.1), '1'>+
                                                                 <snd(ECDHSecret.1), '2'>),
                                                                s1(<DHpkP, 'g'^~sk.1>)))
                                                 ) @ #vk.69 )
                                            case c_cmac
                                            solve( !KU( cmac((
                                                              <
                                                               cmac('prck',
                                                                    cmac((<fst(ECDHSecret.1), '1'>+
                                                                          <snd(ECDHSecret.1), '2'>),
                                                                         s1(<DHpkP, 'g'^~sk.1>))), 
                                                               '1'>+
                                                              <fst(~random), '2'>),
                                                             Np_1)
                                                   ) @ #vk.69 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              solve( !KU( ~Np ) @ #vk.75 )
                                                case Prov_SendNonce_1
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case c_cmac
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.54 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.76 )
                                      case NDev_Confirmation_1_case_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_1_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_1_case_3
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_1_case_4
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_1_case_5
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_1_case_6
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2_case_1
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(DHpkP^~sk.1), '1'>+
                                                                  <snd(DHpkP^~sk.1), '2'>),
                                                                 s1(<DHpkP, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>
                                                              ),
                                                              s1(<DHpkP, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(DHpkP^~sk.1), '1'>+
                                                                   <snd(DHpkP^~sk.1), '2'>),
                                                                  s1(<DHpkP, 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(DHpkP^~sk.1), '1'>+
                                                                            <snd(DHpkP^~sk.1), '2'>),
                                                                           s1(<DHpkP, 'g'^~sk.1>))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Np_1)
                                                     ) @ #vk.70 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case NDev_Confirmation_2_case_2
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(ECDHSecret.1), '1'>+
                                                                  <snd(ECDHSecret.1), '2'>),
                                                                 s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(ECDHSecret.1), '1'>+
                                                               <snd(ECDHSecret.1), '2'>),
                                                              s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(ECDHSecret.1), '1'>+
                                                                   <snd(ECDHSecret.1), '2'>),
                                                                  s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(ECDHSecret.1), '1'>+
                                                                            <snd(ECDHSecret.1), '2'>),
                                                                           s1(<ECDHSecret.1^inv(~sk.1), 
                                                                               'g'^~sk.1>))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Np_1)
                                                     ) @ #vk.70 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case NDev_Confirmation_2_case_3
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                  <snd(x^(~sk.1*x.1)), '2'>),
                                                                 s1(<x^x.1, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                               <snd(x^(~sk.1*x.1)), '2'>),
                                                              s1(<x^x.1, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                   <snd(x^(~sk.1*x.1)), '2'>),
                                                                  s1(<x^x.1, 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                            <snd(x^(~sk.1*x.1)), '2'>),
                                                                           s1(<x^x.1, 'g'^~sk.1>))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Np_1)
                                                     ) @ #vk.70 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_1
                                                solve( !KU( ~Np ) @ #vk.76 )
                                                  case Prov_SendNonce_1
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case NDev_Confirmation_2_case_4
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(x^inv(x.1)), '1'>+
                                                                  <snd(x^inv(x.1)), '2'>),
                                                                 s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                              s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(x^inv(x.1)), '1'>+
                                                                   <snd(x^inv(x.1)), '2'>),
                                                                  s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(x^inv(x.1)), '1'>+
                                                                            <snd(x^inv(x.1)), '2'>),
                                                                           s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1
                                                                              >))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Np_1)
                                                     ) @ #vk.70 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case NDev_Confirmation_2_case_5
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(x^x.1), '1'>+<snd(x^x.1), '2'>),
                                                                 s1(<x^(x.1*inv(~sk.1)), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(x^x.1), '1'>+<snd(x^x.1), '2'>),
                                                              s1(<x^(x.1*inv(~sk.1)), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( x^(x.1*inv(~sk.1)) ) @ #vk.71 )
                                            case NDev_SendPK_InBand_case_1
                                            by contradiction /* cyclic */
                                          next
                                            case NDev_SendPK_InBand_case_2
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_SendPK_InBand_case_1
                                            by solve( !KU( ~sk.1 ) @ #vk.83 )
                                          next
                                            case Prov_SendPK_InBand_case_2
                                            by solve( !KU( ~sk.1 ) @ #vk.85 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk.1 ) @ #vk.86 )
                                          qed
                                        qed
                                      qed
                                    next
                                      case NDev_Confirmation_2_case_6
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(x^(x.1*inv(x.2))), '1'>+
                                                                  <snd(x^(x.1*inv(x.2))), '2'>),
                                                                 s1(<x^(x.1*inv((~sk.1*x.2))), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(x^(x.1*inv(x.2))), '1'>+
                                                               <snd(x^(x.1*inv(x.2))), '2'>),
                                                              s1(<x^(x.1*inv((~sk.1*x.2))), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x.3 y. ((y+x.3) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( x^(x.1*inv((~sk.1*x.2))) ) @ #vk.71 )
                                            case NDev_SendPK_InBand_case_1
                                            by contradiction /* cyclic */
                                          next
                                            case NDev_SendPK_InBand_case_2
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_SendPK_InBand_case_1
                                            by solve( !KU( ~sk.1 ) @ #vk.84 )
                                          next
                                            case Prov_SendPK_InBand_case_2
                                            by solve( !KU( ~sk.1 ) @ #vk.86 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk.1 ) @ #vk.87 )
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.55 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case NDev_Confirmation_1_case_4
                          solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                                 ) ▶₂ #vr.26 )
                            case Receive_UserDevice
                            solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                   ) ▶₃ #vr.26 )
                              case Receive_UserDevice
                              solve( !KU( ~Nd ) @ #vk.64 )
                                case NDev_SendNonce_1
                                solve( (Cp_1 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<z, '1'>+<z.1, '2'>),
                                                         s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                               '1'>+
                                              <fst(~random), '2'>),
                                             Np_1))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<z, '1'>+<z.1, '2'>),
                                                      s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                            '1'>+
                                           <fst(~random), '2'>)) ∧
                                         (mk = rm(Cp_1, mo, Np_1))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( snd(~random) ) @ #vk.51 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.78 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<z, '1'>+<z.1, '2'>),
                                                               s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<z, '1'>+<z.1, '2'>),
                                                            s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<'g'^~sk, DHpkD>))
                                               ) @ #vk.58 )
                                          case c_cmac
                                          solve( !KU( cmac('prck',
                                                           cmac((<z, '1'>+<z.1, '2'>),
                                                                s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                 ) @ #vk.69 )
                                            case c_cmac
                                            solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.70 )
                                              case c_exp
                                              by solve( !KU( ~sk.1 ) @ #vk.86 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.54 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.76 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<z, '1'>+<z.1, '2'>),
                                                                 s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<z, '1'>+<z.1, '2'>),
                                                              s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<z, '1'>+<z.1, '2'>),
                                                                  s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.71 )
                                                case c_exp
                                                by solve( !KU( ~sk.1 ) @ #vk.87 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.55 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_1
                          solve( !KU( ~Np ) @ #vk.56 )
                            case Prov_SendNonce_1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_fst
                          solve( !KU( ~random ) @ #vk.56 )
                            case NDev_Confirmation_1_case_01
                            solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_02
                            solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_03
                            solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_04
                            solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_05
                            solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_06
                            solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_07
                            solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_08
                            solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                solve( !KU( ~Nd ) @ #vk.65 )
                                  case NDev_SendNonce_1
                                  solve( (Cp_1 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>),
                                                           s1(<DHpkP, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>),
                                                        s1(<DHpkP, 'g'^~sk.1>))), 
                                              '1'>+
                                             <fst(~random), '2'>)) ∧
                                           (mk = rm(Cp_1, mo, Np_1))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( snd(~random) ) @ #vk.52 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(DHpkP^~sk.1), '1'>+
                                                                  <snd(DHpkP^~sk.1), '2'>),
                                                                 s1(<DHpkP, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>
                                                              ),
                                                              s1(<DHpkP, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(DHpkP^~sk.1), '1'>+
                                                                   <snd(DHpkP^~sk.1), '2'>),
                                                                  s1(<DHpkP, 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(DHpkP^~sk.1), '1'>+
                                                                            <snd(DHpkP^~sk.1), '2'>),
                                                                           s1(<DHpkP, 'g'^~sk.1>))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Np_1)
                                                     ) @ #vk.70 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case c_snd
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_09
                            solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                solve( !KU( ~Nd ) @ #vk.65 )
                                  case NDev_SendNonce_1
                                  solve( (Cp_1 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>
                                                           ),
                                                           s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                        s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                              '1'>+
                                             <fst(~random), '2'>)) ∧
                                           (mk = rm(Cp_1, mo, Np_1))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( snd(~random) ) @ #vk.52 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(ECDHSecret.1), '1'>+
                                                                  <snd(ECDHSecret.1), '2'>),
                                                                 s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(ECDHSecret.1), '1'>+
                                                               <snd(ECDHSecret.1), '2'>),
                                                              s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(ECDHSecret.1), '1'>+
                                                                   <snd(ECDHSecret.1), '2'>),
                                                                  s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( ECDHSecret.1^inv(~sk.1) ) @ #vk.71 )
                                                case c_exp
                                                by solve( !KU( ~sk.1 ) @ #vk.85 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case c_snd
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_10
                            solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                solve( !KU( ~Nd ) @ #vk.65 )
                                  case NDev_SendNonce_1
                                  solve( (Cp_1 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                            <snd(x^(~sk.1*x.1)), '2'>),
                                                           s1(<x^x.1, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst(x^(~sk.1*x.1)), '1'>+<snd(x^(~sk.1*x.1)), '2'>),
                                                        s1(<x^x.1, 'g'^~sk.1>))), 
                                              '1'>+
                                             <fst(~random), '2'>)) ∧
                                           (mk = rm(Cp_1, mo, Np_1))
                                          ∧
                                           ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( snd(~random) ) @ #vk.52 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                  <snd(x^(~sk.1*x.1)), '2'>),
                                                                 s1(<x^x.1, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                               <snd(x^(~sk.1*x.1)), '2'>),
                                                              s1(<x^x.1, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                   <snd(x^(~sk.1*x.1)), '2'>),
                                                                  s1(<x^x.1, 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                            <snd(x^(~sk.1*x.1)), '2'>),
                                                                           s1(<x^x.1, 'g'^~sk.1>))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Np_1)
                                                     ) @ #vk.70 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_1
                                                solve( !KU( ~Np ) @ #vk.76 )
                                                  case Prov_SendNonce_1
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case c_snd
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_11
                            solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                solve( !KU( ~Nd ) @ #vk.65 )
                                  case NDev_SendNonce_1
                                  solve( (Cp_1 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                           s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                        s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                              '1'>+
                                             <fst(~random), '2'>)) ∧
                                           (mk = rm(Cp_1, mo, Np_1))
                                          ∧
                                           ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( snd(~random) ) @ #vk.52 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(x^inv(x.1)), '1'>+
                                                                  <snd(x^inv(x.1)), '2'>),
                                                                 s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                              s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(x^inv(x.1)), '1'>+
                                                                   <snd(x^inv(x.1)), '2'>),
                                                                  s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( x^inv((~sk.1*x.1)) ) @ #vk.71 )
                                                case c_exp
                                                by solve( !KU( ~sk.1 ) @ #vk.86 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case c_snd
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_12
                            solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                solve( !KU( ~Nd ) @ #vk.65 )
                                  case NDev_SendNonce_1
                                  solve( (Cp_1 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst(x^x.1), '1'>+<snd(x^x.1), '2'>),
                                                           s1(<x^(x.1*inv(~sk.1)), 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst(x^x.1), '1'>+<snd(x^x.1), '2'>),
                                                        s1(<x^(x.1*inv(~sk.1)), 'g'^~sk.1>))), 
                                              '1'>+
                                             <fst(~random), '2'>)) ∧
                                           (mk = rm(Cp_1, mo, Np_1))
                                          ∧
                                           ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( x^(x.1*inv(~sk.1)) ) @ #vk.68 )
                                      case NDev_SendPK_InBand_case_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_SendPK_InBand_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_SendPK_InBand_case_1
                                      by solve( !KU( ~sk.1 ) @ #vk.78 )
                                    next
                                      case Prov_SendPK_InBand_case_2
                                      by solve( !KU( ~sk.1 ) @ #vk.80 )
                                    next
                                      case c_exp
                                      by solve( !KU( ~sk.1 ) @ #vk.81 )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_13
                            solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                solve( !KU( ~Nd ) @ #vk.65 )
                                  case NDev_SendNonce_1
                                  solve( (Cp_1 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst(x^(x.1*inv(x.2))), '1'>+
                                                            <snd(x^(x.1*inv(x.2))), '2'>),
                                                           s1(<x^(x.1*inv((~sk.1*x.2))), 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst(x^(x.1*inv(x.2))), '1'>+
                                                         <snd(x^(x.1*inv(x.2))), '2'>),
                                                        s1(<x^(x.1*inv((~sk.1*x.2))), 'g'^~sk.1>))), 
                                              '1'>+
                                             <fst(~random), '2'>)) ∧
                                           (mk = rm(Cp_1, mo, Np_1))
                                          ∧
                                           ∀ x.3 y. ((y+x.3) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( x^(x.1*inv((~sk.1*x.2))) ) @ #vk.68 )
                                      case NDev_SendPK_InBand_case_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_SendPK_InBand_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_SendPK_InBand_case_1
                                      by solve( !KU( ~sk.1 ) @ #vk.79 )
                                    next
                                      case Prov_SendPK_InBand_case_2
                                      by solve( !KU( ~sk.1 ) @ #vk.81 )
                                    next
                                      case c_exp
                                      by solve( !KU( ~sk.1 ) @ #vk.82 )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_14
                            solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                solve( !KU( ~Nd ) @ #vk.65 )
                                  case NDev_SendNonce_1
                                  solve( (Cp_1 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<z, '1'>+<z.1, '2'>),
                                                           s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<z, '1'>+<z.1, '2'>),
                                                        s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                              '1'>+
                                             <fst(~random), '2'>)) ∧
                                           (mk = rm(Cp_1, mo, Np_1))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( snd(~random) ) @ #vk.52 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<z, '1'>+<z.1, '2'>),
                                                                 s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<z, '1'>+<z.1, '2'>),
                                                              s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<z, '1'>+<z.1, '2'>),
                                                                  s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.71 )
                                                case c_exp
                                                by solve( !KU( ~sk.1 ) @ #vk.87 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case c_snd
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_2_case_01
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_02
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_03
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_04
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_05
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_06
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_07
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_08
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_09
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_10
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_11
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_12
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_13
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_14
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( ~Np ) @ #vk.57 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case split_case_2
          solve( !KU( cmac('prsk',
                           cmac((<z, '1'>+<z.1, '2'>),
                                s1(<s1(<'g'^~sk, <z, z.1>^inv(~sk)>), ~Np.1, Nd_2>)))
                 ) @ #vk )
            case c_cmac
            solve( !KU( cmac((
                              <
                               cmac('prck',
                                    cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                               '1'>+
                              <fst(~random), '2'>),
                             Nd_1)
                   ) @ #vk.13 )
              case Prov_Confirmation_1
              by contradiction /* from formulas */
            next
              case c_cmac
              solve( !KU( cmac((
                                <
                                 cmac('prck',
                                      cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                                 '1'>+
                                <snd(~random), '2'>),
                               Nd_2)
                     ) @ #vk.12 )
                case Prov_Confirmation_2
                by contradiction /* from formulas */
              next
                case c_cmac
                solve( !KU( <z, z.1>^inv(~sk) ) @ #vk.15 )
                  case c_exp
                  by solve( !KU( ~sk ) @ #vk.46 )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_3
  solve( ProvChecked( Prov, netkey, ReadOOBPK, ReadStaticOOB, SecureOption,
                      NDev, DeviceUUID, LinkID, OOBPKURI, AuthValueURI, AuthValue_In,
                      AuthValue_1, AuthValue_2, PKType_D, OutputOOB_D, InputOOB_D, StaticOOB_D,
                      PKType_P, AuthMethod_P, skP, DHpkP, DHpkD, ECDHSecret, Np_1, ConfirmSALT,
                      ECDH1, ECDH2, CK, Cp_1, Cd_1, Nd_1, Np_2, Cp_2, Cd_2, Nd_2,
                      ProvisioningSALT, sessionkey
         ) ▶₀ #i )
    case Prov_Check_case_1
    solve( (Cd_1 =
            cmac((<z, '2'>+
                  <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
                 ),
                 Nd_1))  ∥
           (∃ mk mo.
             ((mk+mo) =
              (<z, '2'>+
               <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
              )) ∧
             (mk = rm(Cd_1, mo, Nd_1))
            ∧
             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
      case case_1
      solve( (Cd_2 =
              cmac((<z.1, '2'>+
                    <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
                   ),
                   Nd_2))  ∥
             (∃ mk mo.
               ((mk+mo) =
                (<z.1, '2'>+
                 <cmac('prck', cmac((<z.2, '1'>+<z.3, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>
                )) ∧
               (mk = rm(Cd_2, mo, Nd_2))
              ∧
               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
        case case_1
        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User, 'Input'
               ) ▶₂ #vr.10 )
          case Receive_UserDevice_case_1
          solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User, AuthValue_In
                 ) ▶₃ #vr.10 )
            case Receive_UserDevice
            solve( splitEqs(2) )
              case split_case_1
              solve( !KU( cmac('prdk',
                               cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                    s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>)))
                     ) @ #vk )
                case c_cmac
                solve( !KU( cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                             s1(<'g'^~sk, DHpkD>))), 
                                   '1'>+
                                  <fst(~random), '2'>),
                                 Nd_1)
                       ) @ #vk.12 )
                  case NDev_Confirmation_1
                  solve( !KU( ~Nd ) @ #vk.12 )
                    case NDev_SendNonce_1
                    solve( (Cp_1 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <fst(~random), '2'>),
                                 Np_1))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <fst(~random), '2'>)) ∧
                             (mk = rm(Cp_1, mo, Np_1))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <snd(~random), '2'>),
                                       Nd_2)
                             ) @ #vk.12 )
                        case NDev_Confirmation_2
                        solve( !KU( ~Nd.1 ) @ #vk.12 )
                          case NDev_SendNonce_2
                          solve( (Cp_2 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <snd(~random), '2'>),
                                       Np_2))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk, 'g'^~sk.1>))), 
                                      '1'>+
                                     <snd(~random), '2'>)) ∧
                                   (mk = rm(Cp_2, mo, Np_2))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                             ),
                                             s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>))
                                   ) @ #vk.47 )
                              case c_cmac
                              solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>) ) @ #vk.54 )
                                case c_s1
                                solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.61 )
                                  case c_s1
                                  solve( !KU( cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <fst(~random), '2'>),
                                                   Np_1)
                                         ) @ #vk.55 )
                                    case NDev_Confirmation_1
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_1
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2)
                                           ) @ #vk.57 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.59 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.63 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.64 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.64 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.66 )
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.60 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.69 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.70 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.70 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.72 )
                                        qed
                                      qed
                                    qed
                                  next
                                    case c_cmac
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2)
                                           ) @ #vk.58 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.61 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.68 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.69 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.69 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.71 )
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.62 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.72 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.73 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.73 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.75 )
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case Prov_Confirmation_2
                        by contradiction /* from formulas */
                      next
                        case c_cmac
                        solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                         ),
                                         s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                               ) @ #vk.46 )
                          case c_cmac
                          solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.57 )
                            case c_s1
                            solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.62 )
                              case c_s1
                              solve( !KU( cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1)
                                     ) @ #vk.55 )
                                case NDev_Confirmation_1
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1
                                solve( !KU( cmac('prck',
                                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                      ),
                                                      s1(<'g'^~sk, 'g'^~sk.1>)))
                                       ) @ #vk.57 )
                                  case NDev_Confirmation_1
                                  solve( !KU( snd(~random) ) @ #vk.59 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.69 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.66 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.72 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.73 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.73 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.75 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.65 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.67 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.70 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.73 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.74 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.74 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.76 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.66 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( snd(~random) ) @ #vk.59 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.69 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.66 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.72 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.73 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.73 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.75 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.65 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.67 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.70 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.73 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.74 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.74 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.76 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.66 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( snd(~random) ) @ #vk.59 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.69 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.65 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.72 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.73 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.73 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.75 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.67 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.70 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.66 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.74 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.75 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.75 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.77 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.65 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case c_cmac
                                solve( !KU( cmac('prck',
                                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                      ),
                                                      s1(<'g'^~sk, 'g'^~sk.1>)))
                                       ) @ #vk.58 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( ~Np ) @ #vk.68 )
                                    case Prov_SendNonce_1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( snd(~random) ) @ #vk.60 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.72 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.76 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.76 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.78 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.66 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.70 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.73 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.68 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.76 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.77 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.77 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.79 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.67 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Prov_Confirmation_1
                  by contradiction /* from formulas */
                next
                  case c_cmac
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                               s1(<'g'^~sk, DHpkD>))), 
                                     '1'>+
                                    <snd(~random), '2'>),
                                   Nd_2)
                         ) @ #vk.11 )
                    case NDev_Confirmation_2
                    solve( (Cp_1 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <fst(~random), '2'>),
                                 Np_1))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <fst(~random), '2'>)) ∧
                             (mk = rm(Cp_1, mo, Np_1))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( ~Nd ) @ #vk.11 )
                        case NDev_SendNonce_2
                        solve( (Cp_2 =
                                cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                       '1'>+
                                      <snd(~random), '2'>),
                                     Np_2))  ∥
                               (∃ mk mo.
                                 ((mk+mo) =
                                  (
                                   <
                                    cmac('prck',
                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                    '1'>+
                                   <snd(~random), '2'>)) ∧
                                 (mk = rm(Cp_2, mo, Np_2))
                                ∧
                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                          case case_1
                          solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                           ),
                                           s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>))
                                 ) @ #vk.49 )
                            case c_cmac
                            solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>) ) @ #vk.61 )
                              case c_s1
                              solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.66 )
                                case c_s1
                                solve( !KU( cmac('prck',
                                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                      ),
                                                      s1(<'g'^~sk, 'g'^~sk.1>)))
                                       ) @ #vk.57 )
                                  case NDev_Confirmation_1
                                  solve( !KU( fst(~random) ) @ #vk.59 )
                                    case c_fst
                                    solve( !KU( ~random ) @ #vk.70 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( ~Np ) @ #vk.69 )
                                    case Prov_SendNonce_1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( fst(~random) ) @ #vk.59 )
                                    case NDev_Confirmation_1
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <fst(~random), '2'>),
                                                     Np_1)
                                           ) @ #vk.64 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_1
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~random), '2'>),
                                                       Np_2)
                                             ) @ #vk.63 )
                                        case NDev_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_2
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.66 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.71 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.72 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.72 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.74 )
                                          qed
                                        qed
                                      next
                                        case c_cmac
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.68 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.76 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.76 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.78 )
                                          qed
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case Prov_Confirmation_1
                                    solve( !KU( ~Np ) @ #vk.71 )
                                      case Prov_SendNonce_1
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_fst
                                    solve( !KU( ~random ) @ #vk.71 )
                                      case NDev_Confirmation_1
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <fst(~random), '2'>),
                                                       Np_1)
                                             ) @ #vk.65 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_1
                                        solve( !KU( cmac((
                                                          <
                                                           cmac('prck',
                                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                      <snd('g'^(~sk*~sk.1)), '2'>),
                                                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                           '1'>+
                                                          <snd(~random), '2'>),
                                                         Np_2)
                                               ) @ #vk.64 )
                                          case NDev_Confirmation_2
                                          by contradiction /* cyclic */
                                        next
                                          case Prov_Confirmation_2
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.73 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.74 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.74 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.76 )
                                            qed
                                          qed
                                        next
                                          case c_cmac
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.69 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.76 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.77 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.77 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.79 )
                                            qed
                                          qed
                                        qed
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_1
                                      solve( !KU( ~Np ) @ #vk.72 )
                                        case Prov_SendNonce_1
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case Prov_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                     s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                           ) @ #vk.46 )
                      case c_cmac
                      solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.56 )
                        case c_s1
                        solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.61 )
                          case c_s1
                          solve( !KU( cmac('prck',
                                           cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                s1(<'g'^~sk, DHpkD>)))
                                 ) @ #vk.54 )
                            case NDev_Confirmation_1
                            solve( !KU( ~Nd ) @ #vk.66 )
                              case NDev_SendNonce_1
                              solve( (Cp_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Np_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cp_1, mo, Np_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( fst(~random) ) @ #vk.59 )
                                  case c_fst
                                  solve( !KU( ~random ) @ #vk.69 )
                                    case NDev_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_1
                            solve( !KU( ~Np ) @ #vk.65 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_cmac
                            solve( !KU( fst(~random) ) @ #vk.56 )
                              case NDev_Confirmation_1
                              solve( !KU( ~Nd ) @ #vk.70 )
                                case NDev_SendNonce_1
                                solve( (Cp_1 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                               '1'>+
                                              <fst(~random), '2'>),
                                             Np_1))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                            '1'>+
                                           <fst(~random), '2'>)) ∧
                                         (mk = rm(Cp_1, mo, Np_1))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( splitEqs(8) )
                                    case split_case_1
                                    solve( !KU( snd(~random) ) @ #vk.64 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.76 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<z, '1'>+<z.1, '2'>),
                                                                 s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<z, '1'>+<z.1, '2'>),
                                                              s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.73 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<z, '1'>+<z.1, '2'>),
                                                                  s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                   ) @ #vk.75 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<z, '1'>+<z.1, '2'>),
                                                                           s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1
                                                                              >))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Np_1)
                                                     ) @ #vk.75 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.67 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case c_snd
                                      solve( !KU( ~random ) @ #vk.74 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case NDev_Confirmation_2
                                        solve( !KU( ~Nd.1 ) @ #vk.77 )
                                          case NDev_SendNonce_2
                                          solve( (Cp_2 =
                                                  cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<z, '1'>+<z.1, '2'>),
                                                                   s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~random), '2'>),
                                                       Np_2))  ∥
                                                 (∃ mk mo.
                                                   ((mk+mo) =
                                                    (
                                                     <
                                                      cmac('prck',
                                                           cmac((<z, '1'>+<z.1, '2'>),
                                                                s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                      '1'>+
                                                     <snd(~random), '2'>)) ∧
                                                   (mk = rm(Cp_2, mo, Np_2))
                                                  ∧
                                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                            case case_1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<z, '1'>+<z.1, '2'>),
                                                                    s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                     ) @ #vk.76 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<z, '1'>+<z.1, '2'>),
                                                                             s1(<<z, z.1>^inv(~sk.1), 
                                                                                 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~random), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.76 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_1
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_2
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_3
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_4
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_5
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_6
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  next
                                    case split_case_2
                                    solve( !KU( snd(~random) ) @ #vk.64 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.76 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(ECDHSecret.1), '1'>+
                                                                  <snd(ECDHSecret.1), '2'>),
                                                                 s1(<DHpkP, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(ECDHSecret.1), '1'>+
                                                               <snd(ECDHSecret.1), '2'>),
                                                              s1(<DHpkP, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.73 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(ECDHSecret.1), '1'>+
                                                                   <snd(ECDHSecret.1), '2'>),
                                                                  s1(<DHpkP, 'g'^~sk.1>)))
                                                   ) @ #vk.75 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(ECDHSecret.1), '1'>+
                                                                            <snd(ECDHSecret.1), '2'>),
                                                                           s1(<DHpkP, 'g'^~sk.1>))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Np_1)
                                                     ) @ #vk.75 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_1
                                                solve( !KU( ~Np ) @ #vk.73 )
                                                  case Prov_SendNonce_1
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.67 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case c_snd
                                      solve( !KU( ~random ) @ #vk.74 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case NDev_Confirmation_2
                                        solve( !KU( ~Nd.1 ) @ #vk.77 )
                                          case NDev_SendNonce_2
                                          solve( (Cp_2 =
                                                  cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst(ECDHSecret.1), '1'>+
                                                                    <snd(ECDHSecret.1), '2'>),
                                                                   s1(<DHpkP, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~random), '2'>),
                                                       Np_2))  ∥
                                                 (∃ mk mo.
                                                   ((mk+mo) =
                                                    (
                                                     <
                                                      cmac('prck',
                                                           cmac((<fst(ECDHSecret.1), '1'>+
                                                                 <snd(ECDHSecret.1), '2'>),
                                                                s1(<DHpkP, 'g'^~sk.1>))), 
                                                      '1'>+
                                                     <snd(~random), '2'>)) ∧
                                                   (mk = rm(Cp_2, mo, Np_2))
                                                  ∧
                                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                            case case_1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<fst(ECDHSecret.1), '1'>+
                                                                     <snd(ECDHSecret.1), '2'>),
                                                                    s1(<DHpkP, 'g'^~sk.1>)))
                                                     ) @ #vk.76 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst(ECDHSecret.1), '1'>+
                                                                              <snd(ECDHSecret.1), '2'>),
                                                                             s1(<DHpkP, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~random), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.76 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case Prov_Confirmation_1
                                                  solve( !KU( ~Np ) @ #vk.74 )
                                                    case Prov_SendNonce_1
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_1
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_2
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_3
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_4
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_5
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      next
                                        case Prov_Confirmation_2_case_6
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_1
                              solve( !KU( ~Np ) @ #vk.67 )
                                case Prov_SendNonce_1
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_fst
                              solve( !KU( ~random ) @ #vk.67 )
                                case NDev_Confirmation_1
                                solve( !KU( ~Nd ) @ #vk.71 )
                                  case NDev_SendNonce_1
                                  solve( (Cp_1 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                              '1'>+
                                             <fst(~random), '2'>)) ∧
                                           (mk = rm(Cp_1, mo, Np_1))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( splitEqs(8) )
                                      case split_case_1
                                      solve( !KU( snd(~random) ) @ #vk.65 )
                                        case NDev_Confirmation_2
                                        solve( !KU( ~Nd.1 ) @ #vk.77 )
                                          case NDev_SendNonce_2
                                          solve( (Cp_2 =
                                                  cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<z, '1'>+<z.1, '2'>),
                                                                   s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~random), '2'>),
                                                       Np_2))  ∥
                                                 (∃ mk mo.
                                                   ((mk+mo) =
                                                    (
                                                     <
                                                      cmac('prck',
                                                           cmac((<z, '1'>+<z.1, '2'>),
                                                                s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                      '1'>+
                                                     <snd(~random), '2'>)) ∧
                                                   (mk = rm(Cp_2, mo, Np_2))
                                                  ∧
                                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                            case case_1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<z, '1'>+<z.1, '2'>),
                                                                    s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                     ) @ #vk.76 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<z, '1'>+<z.1, '2'>),
                                                                             s1(<<z, z.1>^inv(~sk.1), 
                                                                                 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~random), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.76 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case c_snd
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case split_case_2
                                      solve( !KU( snd(~random) ) @ #vk.65 )
                                        case NDev_Confirmation_2
                                        solve( !KU( ~Nd.1 ) @ #vk.77 )
                                          case NDev_SendNonce_2
                                          solve( (Cp_2 =
                                                  cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst(ECDHSecret.1), '1'>+
                                                                    <snd(ECDHSecret.1), '2'>),
                                                                   s1(<DHpkP, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~random), '2'>),
                                                       Np_2))  ∥
                                                 (∃ mk mo.
                                                   ((mk+mo) =
                                                    (
                                                     <
                                                      cmac('prck',
                                                           cmac((<fst(ECDHSecret.1), '1'>+
                                                                 <snd(ECDHSecret.1), '2'>),
                                                                s1(<DHpkP, 'g'^~sk.1>))), 
                                                      '1'>+
                                                     <snd(~random), '2'>)) ∧
                                                   (mk = rm(Cp_2, mo, Np_2))
                                                  ∧
                                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                            case case_1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<fst(ECDHSecret.1), '1'>+
                                                                     <snd(ECDHSecret.1), '2'>),
                                                                    s1(<DHpkP, 'g'^~sk.1>)))
                                                     ) @ #vk.76 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst(ECDHSecret.1), '1'>+
                                                                              <snd(ECDHSecret.1), '2'>),
                                                                             s1(<DHpkP, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~random), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.76 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case Prov_Confirmation_1
                                                  solve( !KU( ~Np ) @ #vk.74 )
                                                    case Prov_SendNonce_1
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case c_snd
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case NDev_Confirmation_2
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1_case_1
                                solve( !KU( ~Np ) @ #vk.68 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_1_case_2
                                solve( !KU( ~Np ) @ #vk.68 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_1_case_3
                                solve( !KU( ~Np ) @ #vk.68 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_1_case_4
                                solve( !KU( ~Np ) @ #vk.68 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_1_case_5
                                solve( !KU( ~Np ) @ #vk.68 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_1_case_6
                                solve( !KU( ~Np ) @ #vk.68 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_2_case_1
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2_case_2
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2_case_3
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2_case_4
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2_case_5
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_2_case_6
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case split_case_2
              solve( !KU( cmac('prdk',
                               cmac((<z, '1'>+<z.1, '2'>),
                                    s1(<s1(<'g'^~sk, <z, z.1>^inv(~sk)>), ~Np.1, Nd_2>)))
                     ) @ #vk )
                case c_cmac
                solve( !KU( cmac((
                                  <
                                   cmac('prck',
                                        cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                                   '1'>+
                                  <fst(~random), '2'>),
                                 Nd_1)
                       ) @ #vk.12 )
                  case Prov_Confirmation_1
                  by contradiction /* from formulas */
                next
                  case c_cmac
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                                     '1'>+
                                    <snd(~random), '2'>),
                                   Nd_2)
                         ) @ #vk.11 )
                    case Prov_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( <z, z.1>^inv(~sk) ) @ #vk.13 )
                      case c_exp
                      by solve( !KU( ~sk ) @ #vk.57 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Receive_UserDevice_case_2
          by solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User, AuthValue_In
                    ) ▶₃ #vr.10 )
        qed
      qed
    qed
  next
    case Prov_Check_case_2
    solve( (Cd_1 =
            cmac((
                  <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                  <fst(~m), '2'>),
                 Nd_1))  ∥
           (∃ mk mo.
             ((mk+mo) =
              (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
               <fst(~m), '2'>)) ∧
             (mk = rm(Cd_1, mo, Nd_1))
            ∧
             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
      case case_1
      solve( (Cd_2 =
              cmac((
                    <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                    <snd(~m), '2'>),
                   Nd_2))  ∥
             (∃ mk mo.
               ((mk+mo) =
                (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                 <snd(~m), '2'>)) ∧
               (mk = rm(Cd_2, mo, Nd_2))
              ∧
               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
        case case_1
        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User, 'Input'
               ) ▶₃ #vr.10 )
          case Receive_UserDevice_case_1
          solve( In_UD( <'AskForInput', 'Device', 'User'>, NDev, $User, 'Input'
                 ) ▶₄ #vr.10 )
            case Receive_UserDevice
            solve( splitEqs(2) )
              case split_case_1
              solve( !KU( cmac('prdk',
                               cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                    s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>)))
                     ) @ #vk )
                case c_cmac
                solve( !KU( cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                             s1(<'g'^~sk, DHpkD>))), 
                                   '1'>+
                                  <fst(~m), '2'>),
                                 Nd_1)
                       ) @ #vk.12 )
                  case NDev_Confirmation_1
                  solve( !KU( ~Nd ) @ #vk.12 )
                    case NDev_SendNonce_1
                    solve( (Cp_1 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <fst(~m), '2'>),
                                 Np_1))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <fst(~m), '2'>)) ∧
                             (mk = rm(Cp_1, mo, Np_1))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <snd(~m), '2'>),
                                       Nd_2)
                             ) @ #vk.12 )
                        case NDev_Confirmation_2
                        solve( !KU( ~Nd.1 ) @ #vk.12 )
                          case NDev_SendNonce_2
                          solve( (Cp_2 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <snd(~m), '2'>),
                                       Np_2))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk, 'g'^~sk.1>))), 
                                      '1'>+
                                     <snd(~m), '2'>)) ∧
                                   (mk = rm(Cp_2, mo, Np_2))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                             ),
                                             s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>))
                                   ) @ #vk.47 )
                              case c_cmac
                              solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>) ) @ #vk.54 )
                                case c_s1
                                solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.61 )
                                  case c_s1
                                  solve( !KU( cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <fst(~m), '2'>),
                                                   Np_1)
                                         ) @ #vk.55 )
                                    case NDev_Confirmation_1
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_1
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~m), '2'>),
                                                     Np_2)
                                           ) @ #vk.57 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.59 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.63 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.64 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.64 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.66 )
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.60 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.69 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.70 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.70 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.72 )
                                        qed
                                      qed
                                    qed
                                  next
                                    case c_cmac
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~m), '2'>),
                                                     Np_2)
                                           ) @ #vk.58 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.61 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.68 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.69 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.69 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.71 )
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.62 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.72 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.73 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.73 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.75 )
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case Prov_Confirmation_2
                        by contradiction /* from formulas */
                      next
                        case c_cmac
                        solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                         ),
                                         s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                               ) @ #vk.46 )
                          case c_cmac
                          solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.57 )
                            case c_s1
                            solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.62 )
                              case c_s1
                              solve( !KU( cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~m), '2'>),
                                               Np_1)
                                     ) @ #vk.55 )
                                case NDev_Confirmation_1
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1
                                solve( !KU( cmac('prck',
                                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                      ),
                                                      s1(<'g'^~sk, 'g'^~sk.1>)))
                                       ) @ #vk.57 )
                                  case NDev_Confirmation_1
                                  solve( !KU( snd(~m) ) @ #vk.59 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.69 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~m), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~m), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.66 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.72 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.73 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.73 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.75 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.65 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~m ) @ #vk.67 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.70 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~m), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~m), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.73 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.74 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.74 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.76 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.66 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( snd(~m) ) @ #vk.59 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.69 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~m), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~m), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.66 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.72 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.73 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.73 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.75 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.65 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~m ) @ #vk.67 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.70 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~m), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~m), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.73 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.74 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.74 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.76 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.66 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( snd(~m) ) @ #vk.59 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.69 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~m), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~m), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.65 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.72 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.73 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.73 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.75 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.64 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~m ) @ #vk.67 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.70 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~m), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~m), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.66 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.74 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.75 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.75 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.77 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.65 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case c_cmac
                                solve( !KU( cmac('prck',
                                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                      ),
                                                      s1(<'g'^~sk, 'g'^~sk.1>)))
                                       ) @ #vk.58 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( ~Np ) @ #vk.68 )
                                    case Prov_SendNonce_1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( snd(~m) ) @ #vk.60 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.72 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~m), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~m), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.76 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.76 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.78 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.66 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~m ) @ #vk.70 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.73 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~m), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~m), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.68 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.76 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.77 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.77 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.79 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.67 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case Prov_Confirmation_1
                  by contradiction /* from formulas */
                next
                  case c_cmac
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                               s1(<'g'^~sk, DHpkD>))), 
                                     '1'>+
                                    <snd(~m), '2'>),
                                   Nd_2)
                         ) @ #vk.11 )
                    case NDev_Confirmation_2
                    solve( (Cp_1 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <fst(~m), '2'>),
                                 Np_1))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <fst(~m), '2'>)) ∧
                             (mk = rm(Cp_1, mo, Np_1))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( ~Nd ) @ #vk.11 )
                        case NDev_SendNonce_2
                        solve( (Cp_2 =
                                cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                       '1'>+
                                      <snd(~m), '2'>),
                                     Np_2))  ∥
                               (∃ mk mo.
                                 ((mk+mo) =
                                  (
                                   <
                                    cmac('prck',
                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                    '1'>+
                                   <snd(~m), '2'>)) ∧
                                 (mk = rm(Cp_2, mo, Np_2))
                                ∧
                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                          case case_1
                          solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                           ),
                                           s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>))
                                 ) @ #vk.49 )
                            case c_cmac
                            solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>) ) @ #vk.61 )
                              case c_s1
                              solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.66 )
                                case c_s1
                                solve( !KU( cmac('prck',
                                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                      ),
                                                      s1(<'g'^~sk, 'g'^~sk.1>)))
                                       ) @ #vk.57 )
                                  case NDev_Confirmation_1
                                  solve( !KU( fst(~m) ) @ #vk.59 )
                                    case c_fst
                                    solve( !KU( ~m ) @ #vk.70 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( ~Np ) @ #vk.69 )
                                    case Prov_SendNonce_1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( fst(~m) ) @ #vk.59 )
                                    case NDev_Confirmation_1
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <fst(~m), '2'>),
                                                     Np_1)
                                           ) @ #vk.64 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_1
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~m), '2'>),
                                                       Np_2)
                                             ) @ #vk.63 )
                                        case NDev_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_2
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.66 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.71 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.72 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.72 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.74 )
                                          qed
                                        qed
                                      next
                                        case c_cmac
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.68 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.76 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.76 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.78 )
                                          qed
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case Prov_Confirmation_1
                                    solve( !KU( ~Np ) @ #vk.71 )
                                      case Prov_SendNonce_1
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_fst
                                    solve( !KU( ~m ) @ #vk.71 )
                                      case NDev_Confirmation_1
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <fst(~m), '2'>),
                                                       Np_1)
                                             ) @ #vk.65 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_1
                                        solve( !KU( cmac((
                                                          <
                                                           cmac('prck',
                                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                      <snd('g'^(~sk*~sk.1)), '2'>),
                                                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                           '1'>+
                                                          <snd(~m), '2'>),
                                                         Np_2)
                                               ) @ #vk.64 )
                                          case NDev_Confirmation_2
                                          by contradiction /* cyclic */
                                        next
                                          case Prov_Confirmation_2
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.73 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.74 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.74 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.76 )
                                            qed
                                          qed
                                        next
                                          case c_cmac
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.69 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.76 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.77 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.77 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.79 )
                                            qed
                                          qed
                                        qed
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_1
                                      solve( !KU( ~Np ) @ #vk.72 )
                                        case Prov_SendNonce_1
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case Prov_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                     s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                           ) @ #vk.46 )
                      case c_cmac
                      solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.56 )
                        case c_s1
                        solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.61 )
                          case c_s1
                          solve( !KU( cmac('prck',
                                           cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                s1(<'g'^~sk, DHpkD>)))
                                 ) @ #vk.54 )
                            case NDev_Confirmation_1
                            solve( !KU( ~Nd ) @ #vk.66 )
                              case NDev_SendNonce_1
                              solve( (Cp_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~m), '2'>),
                                           Np_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                                          '1'>+
                                         <fst(~m), '2'>)) ∧
                                       (mk = rm(Cp_1, mo, Np_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( fst(~m) ) @ #vk.59 )
                                  case c_fst
                                  solve( !KU( ~m ) @ #vk.69 )
                                    case NDev_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          next
                            case Prov_Confirmation_1
                            solve( !KU( ~Np ) @ #vk.65 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case c_cmac
                            solve( !KU( fst(~m) ) @ #vk.56 )
                              case NDev_Confirmation_1
                              solve( !KU( ~Nd ) @ #vk.70 )
                                case NDev_SendNonce_1
                                solve( (Cp_1 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                               '1'>+
                                              <fst(~m), '2'>),
                                             Np_1))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                            '1'>+
                                           <fst(~m), '2'>)) ∧
                                         (mk = rm(Cp_1, mo, Np_1))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( splitEqs(7) )
                                    case split_case_1
                                    solve( !KU( snd(~m) ) @ #vk.64 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.76 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<z, '1'>+<z.1, '2'>),
                                                                 s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~m), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<z, '1'>+<z.1, '2'>),
                                                              s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~m), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.73 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<z, '1'>+<z.1, '2'>),
                                                                  s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                   ) @ #vk.75 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<z, '1'>+<z.1, '2'>),
                                                                           s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1
                                                                              >))), 
                                                                 '1'>+
                                                                <fst(~m), '2'>),
                                                               Np_1)
                                                     ) @ #vk.75 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.67 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case c_snd
                                      solve( !KU( ~m ) @ #vk.74 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case NDev_Confirmation_2
                                        solve( !KU( ~Nd.1 ) @ #vk.77 )
                                          case NDev_SendNonce_2
                                          solve( (Cp_2 =
                                                  cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<z, '1'>+<z.1, '2'>),
                                                                   s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~m), '2'>),
                                                       Np_2))  ∥
                                                 (∃ mk mo.
                                                   ((mk+mo) =
                                                    (
                                                     <
                                                      cmac('prck',
                                                           cmac((<z, '1'>+<z.1, '2'>),
                                                                s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                      '1'>+
                                                     <snd(~m), '2'>)) ∧
                                                   (mk = rm(Cp_2, mo, Np_2))
                                                  ∧
                                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                            case case_1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<z, '1'>+<z.1, '2'>),
                                                                    s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                     ) @ #vk.76 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<z, '1'>+<z.1, '2'>),
                                                                             s1(<<z, z.1>^inv(~sk.1), 
                                                                                 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~m), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.76 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_2
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  next
                                    case split_case_2
                                    solve( !KU( snd(~m) ) @ #vk.64 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.76 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(ECDHSecret.1), '1'>+
                                                                  <snd(ECDHSecret.1), '2'>),
                                                                 s1(<DHpkP, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~m), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(ECDHSecret.1), '1'>+
                                                               <snd(ECDHSecret.1), '2'>),
                                                              s1(<DHpkP, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~m), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.73 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(ECDHSecret.1), '1'>+
                                                                   <snd(ECDHSecret.1), '2'>),
                                                                  s1(<DHpkP, 'g'^~sk.1>)))
                                                   ) @ #vk.75 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(ECDHSecret.1), '1'>+
                                                                            <snd(ECDHSecret.1), '2'>),
                                                                           s1(<DHpkP, 'g'^~sk.1>))), 
                                                                 '1'>+
                                                                <fst(~m), '2'>),
                                                               Np_1)
                                                     ) @ #vk.75 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_1
                                                solve( !KU( ~Np ) @ #vk.73 )
                                                  case Prov_SendNonce_1
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.67 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case c_snd
                                      solve( !KU( ~m ) @ #vk.74 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case NDev_Confirmation_2
                                        solve( !KU( ~Nd.1 ) @ #vk.77 )
                                          case NDev_SendNonce_2
                                          solve( (Cp_2 =
                                                  cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst(ECDHSecret.1), '1'>+
                                                                    <snd(ECDHSecret.1), '2'>),
                                                                   s1(<DHpkP, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~m), '2'>),
                                                       Np_2))  ∥
                                                 (∃ mk mo.
                                                   ((mk+mo) =
                                                    (
                                                     <
                                                      cmac('prck',
                                                           cmac((<fst(ECDHSecret.1), '1'>+
                                                                 <snd(ECDHSecret.1), '2'>),
                                                                s1(<DHpkP, 'g'^~sk.1>))), 
                                                      '1'>+
                                                     <snd(~m), '2'>)) ∧
                                                   (mk = rm(Cp_2, mo, Np_2))
                                                  ∧
                                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                            case case_1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<fst(ECDHSecret.1), '1'>+
                                                                     <snd(ECDHSecret.1), '2'>),
                                                                    s1(<DHpkP, 'g'^~sk.1>)))
                                                     ) @ #vk.76 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst(ECDHSecret.1), '1'>+
                                                                              <snd(ECDHSecret.1), '2'>),
                                                                             s1(<DHpkP, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~m), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.76 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case Prov_Confirmation_1
                                                  solve( !KU( ~Np ) @ #vk.74 )
                                                    case Prov_SendNonce_1
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_2
                                        solve( !KU( ~Np.1 ) @ #vk.68 )
                                          case Prov_SendNonce_2
                                          by contradiction /* cyclic */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case Prov_Confirmation_1
                              solve( !KU( ~Np ) @ #vk.67 )
                                case Prov_SendNonce_1
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_fst
                              solve( !KU( ~m ) @ #vk.67 )
                                case NDev_Confirmation_1
                                solve( !KU( ~Nd ) @ #vk.71 )
                                  case NDev_SendNonce_1
                                  solve( (Cp_1 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~m), '2'>),
                                               Np_1))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<z, '1'>+<z.1, '2'>), s1(<DHpkP, 'g'^~sk.1>))), 
                                              '1'>+
                                             <fst(~m), '2'>)) ∧
                                           (mk = rm(Cp_1, mo, Np_1))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( splitEqs(7) )
                                      case split_case_1
                                      solve( !KU( snd(~m) ) @ #vk.65 )
                                        case NDev_Confirmation_2
                                        solve( !KU( ~Nd.1 ) @ #vk.77 )
                                          case NDev_SendNonce_2
                                          solve( (Cp_2 =
                                                  cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<z, '1'>+<z.1, '2'>),
                                                                   s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~m), '2'>),
                                                       Np_2))  ∥
                                                 (∃ mk mo.
                                                   ((mk+mo) =
                                                    (
                                                     <
                                                      cmac('prck',
                                                           cmac((<z, '1'>+<z.1, '2'>),
                                                                s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                      '1'>+
                                                     <snd(~m), '2'>)) ∧
                                                   (mk = rm(Cp_2, mo, Np_2))
                                                  ∧
                                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                            case case_1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<z, '1'>+<z.1, '2'>),
                                                                    s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                     ) @ #vk.76 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<z, '1'>+<z.1, '2'>),
                                                                             s1(<<z, z.1>^inv(~sk.1), 
                                                                                 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~m), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.76 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case c_snd
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case split_case_2
                                      solve( !KU( snd(~m) ) @ #vk.65 )
                                        case NDev_Confirmation_2
                                        solve( !KU( ~Nd.1 ) @ #vk.77 )
                                          case NDev_SendNonce_2
                                          solve( (Cp_2 =
                                                  cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst(ECDHSecret.1), '1'>+
                                                                    <snd(ECDHSecret.1), '2'>),
                                                                   s1(<DHpkP, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~m), '2'>),
                                                       Np_2))  ∥
                                                 (∃ mk mo.
                                                   ((mk+mo) =
                                                    (
                                                     <
                                                      cmac('prck',
                                                           cmac((<fst(ECDHSecret.1), '1'>+
                                                                 <snd(ECDHSecret.1), '2'>),
                                                                s1(<DHpkP, 'g'^~sk.1>))), 
                                                      '1'>+
                                                     <snd(~m), '2'>)) ∧
                                                   (mk = rm(Cp_2, mo, Np_2))
                                                  ∧
                                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                            case case_1
                                            solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                             s1(<'g'^~sk, DHpkD>))
                                                   ) @ #vk.74 )
                                              case c_cmac
                                              solve( !KU( cmac('prck',
                                                               cmac((<fst(ECDHSecret.1), '1'>+
                                                                     <snd(ECDHSecret.1), '2'>),
                                                                    s1(<DHpkP, 'g'^~sk.1>)))
                                                     ) @ #vk.76 )
                                                case c_cmac
                                                solve( !KU( cmac((
                                                                  <
                                                                   cmac('prck',
                                                                        cmac((<fst(ECDHSecret.1), '1'>+
                                                                              <snd(ECDHSecret.1), '2'>),
                                                                             s1(<DHpkP, 'g'^~sk.1>))), 
                                                                   '1'>+
                                                                  <fst(~m), '2'>),
                                                                 Np_1)
                                                       ) @ #vk.76 )
                                                  case NDev_Confirmation_1
                                                  by contradiction /* cyclic */
                                                next
                                                  case Prov_Confirmation_1
                                                  solve( !KU( ~Np ) @ #vk.74 )
                                                    case Prov_SendNonce_1
                                                    by contradiction /* cyclic */
                                                  qed
                                                next
                                                  case c_cmac
                                                  by contradiction /* cyclic */
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      next
                                        case Prov_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case c_snd
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case NDev_Confirmation_2
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1
                                solve( !KU( ~Np ) @ #vk.68 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case split_case_2
              solve( !KU( cmac('prdk',
                               cmac((<z, '1'>+<z.1, '2'>),
                                    s1(<s1(<'g'^~sk, <z, z.1>^inv(~sk)>), ~Np.1, Nd_2>)))
                     ) @ #vk )
                case c_cmac
                solve( !KU( cmac((
                                  <
                                   cmac('prck',
                                        cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                                   '1'>+
                                  <fst(~m), '2'>),
                                 Nd_1)
                       ) @ #vk.12 )
                  case Prov_Confirmation_1
                  by contradiction /* from formulas */
                next
                  case c_cmac
                  solve( !KU( cmac((
                                    <
                                     cmac('prck',
                                          cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                                     '1'>+
                                    <snd(~m), '2'>),
                                   Nd_2)
                         ) @ #vk.11 )
                    case Prov_Confirmation_2
                    by contradiction /* from formulas */
                  next
                    case c_cmac
                    solve( !KU( <z, z.1>^inv(~sk) ) @ #vk.13 )
                      case c_exp
                      by solve( !KU( ~sk ) @ #vk.57 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case Receive_UserDevice_case_2
          solve( In_UD( <'AskForInput', 'Device', 'User'>, NDev, $User, 'Input'
                 ) ▶₄ #vr.10 )
            case Receive_UserDevice
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  next
    case Prov_Check_case_3
    solve( (Cd_1 =
            cmac((
                  <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                  <fst(~random), '2'>),
                 Nd_1))  ∥
           (∃ mk mo.
             ((mk+mo) =
              (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
               <fst(~random), '2'>)) ∧
             (mk = rm(Cd_1, mo, Nd_1))
            ∧
             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
      case case_1
      solve( (Cd_2 =
              cmac((
                    <cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                    <snd(~random), '2'>),
                   Nd_2))  ∥
             (∃ mk mo.
               ((mk+mo) =
                (<cmac('prck', cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, DHpkD>))), '1'>+
                 <snd(~random), '2'>)) ∧
               (mk = rm(Cd_2, mo, Nd_2))
              ∧
               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
        case case_1
        solve( splitEqs(2) )
          case split_case_1
          solve( !KU( cmac('prdk',
                           cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>)))
                 ) @ #vk )
            case c_cmac
            solve( !KU( cmac((
                              <
                               cmac('prck',
                                    cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                         s1(<'g'^~sk, DHpkD>))), 
                               '1'>+
                              <fst(~random), '2'>),
                             Nd_1)
                   ) @ #vk.13 )
              case NDev_Confirmation_1_case_1
              solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                     ) ▶₂ #vr.23 )
                case Receive_UserDevice
                solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, AuthValue_In
                       ) ▶₃ #vr.23 )
                  case Receive_UserDevice
                  by contradiction /* from formulas */
                qed
              qed
            next
              case NDev_Confirmation_1_case_2
              solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, AuthValue_In
                     ) ▶₂ #vr.23 )
                case Receive_UserDevice
                solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                       ) ▶₃ #vr.23 )
                  case Receive_UserDevice
                  solve( !KU( ~Nd ) @ #vk.13 )
                    case NDev_SendNonce_1
                    solve( (Cp_1 =
                            cmac((
                                  <
                                   cmac('prck',
                                        cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                             s1(<'g'^~sk, 'g'^~sk.1>))), 
                                   '1'>+
                                  <fst(~random), '2'>),
                                 Np_1))  ∥
                           (∃ mk mo.
                             ((mk+mo) =
                              (
                               <
                                cmac('prck',
                                     cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                          s1(<'g'^~sk, 'g'^~sk.1>))), 
                                '1'>+
                               <fst(~random), '2'>)) ∧
                             (mk = rm(Cp_1, mo, Np_1))
                            ∧
                             ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                      case case_1
                      solve( !KU( cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <snd(~random), '2'>),
                                       Nd_2)
                             ) @ #vk.13 )
                        case NDev_Confirmation_2
                        solve( !KU( ~Nd.1 ) @ #vk.13 )
                          case NDev_SendNonce_2
                          solve( (Cp_2 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <snd(~random), '2'>),
                                       Np_2))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk, 'g'^~sk.1>))), 
                                      '1'>+
                                     <snd(~random), '2'>)) ∧
                                   (mk = rm(Cp_2, mo, Np_2))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                             ),
                                             s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>))
                                   ) @ #vk.32 )
                              case c_cmac
                              solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd.1>) ) @ #vk.56 )
                                case c_s1
                                solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.63 )
                                  case c_s1
                                  solve( !KU( cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <fst(~random), '2'>),
                                                   Np_1)
                                         ) @ #vk.49 )
                                    case NDev_Confirmation_1
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_1
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2)
                                           ) @ #vk.59 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.61 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.65 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.66 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.66 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.68 )
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.62 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.71 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.72 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.72 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.74 )
                                        qed
                                      qed
                                    qed
                                  next
                                    case c_cmac
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2)
                                           ) @ #vk.60 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.63 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.70 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.71 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.71 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.73 )
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.64 )
                                        case c_fst
                                        solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.74 )
                                          case NDev_SendPK_InBand
                                          by solve( !KU( ~sk ) @ #vk.75 )
                                        next
                                          case Prov_SendPK_InBand
                                          by solve( !KU( ~sk.1 ) @ #vk.75 )
                                        next
                                          case c_exp
                                          by solve( !KU( ~sk ) @ #vk.77 )
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case Prov_Confirmation_2
                        by contradiction /* from formulas */
                      next
                        case c_cmac
                        solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                         ),
                                         s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>))
                               ) @ #vk.33 )
                          case c_cmac
                          solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, Nd_2>) ) @ #vk.59 )
                            case c_s1
                            solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.64 )
                              case c_s1
                              solve( !KU( cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                            <snd('g'^(~sk*~sk.1)), '2'>),
                                                           s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1)
                                     ) @ #vk.49 )
                                case NDev_Confirmation_1
                                by contradiction /* cyclic */
                              next
                                case Prov_Confirmation_1
                                solve( !KU( cmac('prck',
                                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                      ),
                                                      s1(<'g'^~sk, 'g'^~sk.1>)))
                                       ) @ #vk.59 )
                                  case NDev_Confirmation_1
                                  solve( !KU( snd(~random) ) @ #vk.61 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.71 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.68 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.74 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.75 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.75 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.77 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.67 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.69 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.72 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.69 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.76 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.76 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.78 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.68 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( snd(~random) ) @ #vk.61 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.71 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.68 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.74 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.75 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.75 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.77 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.67 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.69 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.72 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.69 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.76 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.76 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.78 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.68 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( snd(~random) ) @ #vk.61 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.71 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.67 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.74 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.75 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.75 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.77 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.66 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.69 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.72 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.68 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.76 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.77 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.77 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.79 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.67 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case c_cmac
                                solve( !KU( cmac('prck',
                                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                      ),
                                                      s1(<'g'^~sk, 'g'^~sk.1>)))
                                       ) @ #vk.60 )
                                  case NDev_Confirmation_1
                                  by contradiction /* cyclic */
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( ~Np ) @ #vk.70 )
                                    case Prov_SendNonce_1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( snd(~random) ) @ #vk.62 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.74 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                <snd('g'^(~sk*~sk.1)), '2'>),
                                                               s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                             <snd('g'^(~sk*~sk.1)), '2'>),
                                                            s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.69 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.77 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.78 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.78 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.80 )
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.68 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.72 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.75 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                               <snd('g'^(~sk*~sk.1)), '2'>),
                                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.70 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.78 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.79 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.79 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.81 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.69 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case NDev_Confirmation_2_case_1
              solve( (Cp_1 =
                      cmac((<z, '2'>+
                            <
                             cmac('prck',
                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                             '1'>
                           ),
                           Np_1))  ∥
                     (∃ mk mo.
                       ((mk+mo) =
                        (<z, '2'>+
                         <
                          cmac('prck',
                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                          '1'>
                        )) ∧
                       (mk = rm(Cp_1, mo, Np_1))
                      ∧
                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                case case_1
                solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                       ) ▶₂ #vr.25 )
                  case Receive_UserDevice
                  by solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1,
                                   <z, fst(~random)>
                            ) ▶₃ #vr.25 )
                qed
              qed
            next
              case NDev_Confirmation_2_case_2
              solve( (Cp_1 =
                      cmac((<z, '2'>+
                            <
                             cmac('prck',
                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                             '1'>
                           ),
                           Np_1))  ∥
                     (∃ mk mo.
                       ((mk+mo) =
                        (<z, '2'>+
                         <
                          cmac('prck',
                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                          '1'>
                        )) ∧
                       (mk = rm(Cp_1, mo, Np_1))
                      ∧
                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                case case_1
                by solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1,
                                 <z, fst(~random)>
                          ) ▶₂ #vr.25 )
              qed
            next
              case Prov_Confirmation_1
              by contradiction /* from formulas */
            next
              case c_cmac
              solve( !KU( cmac((
                                <
                                 cmac('prck',
                                      cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                           s1(<'g'^~sk, DHpkD>))), 
                                 '1'>+
                                <snd(~random), '2'>),
                               Nd_2)
                     ) @ #vk.12 )
                case NDev_Confirmation_1_case_1
                solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                       ) ▶₂ #vr.23 )
                  case Receive_UserDevice
                  by solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1,
                                   <snd(~random), x>
                            ) ▶₃ #vr.23 )
                qed
              next
                case NDev_Confirmation_1_case_2
                by solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1,
                                 <snd(~random), x>
                          ) ▶₂ #vr.23 )
              next
                case NDev_Confirmation_2_case_1
                solve( (Cp_1 =
                        cmac((<z, '2'>+
                              <
                               cmac('prck',
                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                               '1'>
                             ),
                             Np_1))  ∥
                       (∃ mk mo.
                         ((mk+mo) =
                          (<z, '2'>+
                           <
                            cmac('prck',
                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                      s1(<'g'^~sk, 'g'^~sk.1>))), 
                            '1'>
                          )) ∧
                         (mk = rm(Cp_1, mo, Np_1))
                        ∧
                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                  case case_1
                  solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                         ) ▶₂ #vr.25 )
                    case Receive_UserDevice
                    solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, AuthValue_In
                           ) ▶₃ #vr.25 )
                      case Receive_UserDevice
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case NDev_Confirmation_2_case_2
                solve( (Cp_1 =
                        cmac((<z, '2'>+
                              <
                               cmac('prck',
                                    cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                         s1(<'g'^~sk, 'g'^~sk.1>))), 
                               '1'>
                             ),
                             Np_1))  ∥
                       (∃ mk mo.
                         ((mk+mo) =
                          (<z, '2'>+
                           <
                            cmac('prck',
                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                      s1(<'g'^~sk, 'g'^~sk.1>))), 
                            '1'>
                          )) ∧
                         (mk = rm(Cp_1, mo, Np_1))
                        ∧
                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                  case case_1
                  solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, AuthValue_In
                         ) ▶₂ #vr.25 )
                    case Receive_UserDevice
                    solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                           ) ▶₃ #vr.25 )
                      case Receive_UserDevice
                      solve( !KU( ~Nd ) @ #vk.12 )
                        case NDev_SendNonce_2
                        solve( (Cp_2 =
                                cmac((
                                      <
                                       cmac('prck',
                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                       '1'>+
                                      <snd(~random), '2'>),
                                     Np_2))  ∥
                               (∃ mk mo.
                                 ((mk+mo) =
                                  (
                                   <
                                    cmac('prck',
                                         cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                              s1(<'g'^~sk, 'g'^~sk.1>))), 
                                    '1'>+
                                   <snd(~random), '2'>)) ∧
                                 (mk = rm(Cp_2, mo, Np_2))
                                ∧
                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                          case case_1
                          solve( !KU( cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                           ),
                                           s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>))
                                 ) @ #vk.34 )
                            case c_cmac
                            solve( !KU( s1(<s1(<'g'^~sk, 'g'^~sk.1>), ~Np.1, ~Nd>) ) @ #vk.63 )
                              case c_s1
                              solve( !KU( s1(<'g'^~sk, 'g'^~sk.1>) ) @ #vk.68 )
                                case c_s1
                                solve( !KU( cmac('prck',
                                                 cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>
                                                      ),
                                                      s1(<'g'^~sk, 'g'^~sk.1>)))
                                       ) @ #vk.42 )
                                  case NDev_Confirmation_1
                                  solve( !KU( fst(~random) ) @ #vk.44 )
                                    case c_fst
                                    solve( !KU( ~random ) @ #vk.72 )
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                next
                                  case Prov_Confirmation_1
                                  solve( !KU( ~Np ) @ #vk.71 )
                                    case Prov_SendNonce_1
                                    by contradiction /* cyclic */
                                  qed
                                next
                                  case c_cmac
                                  solve( !KU( fst(~random) ) @ #vk.44 )
                                    case NDev_Confirmation_1
                                    solve( !KU( cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                  <snd('g'^(~sk*~sk.1)), '2'>),
                                                                 s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <fst(~random), '2'>),
                                                     Np_1)
                                           ) @ #vk.58 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_1
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <snd(~random), '2'>),
                                                       Np_2)
                                             ) @ #vk.57 )
                                        case NDev_Confirmation_2
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_2
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.68 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.73 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.74 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.74 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.76 )
                                          qed
                                        qed
                                      next
                                        case c_cmac
                                        solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.70 )
                                          case c_fst
                                          solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.77 )
                                            case NDev_SendPK_InBand
                                            by solve( !KU( ~sk ) @ #vk.78 )
                                          next
                                            case Prov_SendPK_InBand
                                            by solve( !KU( ~sk.1 ) @ #vk.78 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk ) @ #vk.80 )
                                          qed
                                        qed
                                      qed
                                    next
                                      case c_cmac
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case Prov_Confirmation_1
                                    solve( !KU( ~Np ) @ #vk.73 )
                                      case Prov_SendNonce_1
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_fst
                                    solve( !KU( ~random ) @ #vk.73 )
                                      case NDev_Confirmation_1
                                      solve( !KU( cmac((
                                                        <
                                                         cmac('prck',
                                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                    <snd('g'^(~sk*~sk.1)), '2'>),
                                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                         '1'>+
                                                        <fst(~random), '2'>),
                                                       Np_1)
                                             ) @ #vk.59 )
                                        case NDev_Confirmation_1
                                        by contradiction /* cyclic */
                                      next
                                        case Prov_Confirmation_1
                                        solve( !KU( cmac((
                                                          <
                                                           cmac('prck',
                                                                cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                                      <snd('g'^(~sk*~sk.1)), '2'>),
                                                                     s1(<'g'^~sk, 'g'^~sk.1>))), 
                                                           '1'>+
                                                          <snd(~random), '2'>),
                                                         Np_2)
                                               ) @ #vk.58 )
                                          case NDev_Confirmation_2
                                          by contradiction /* cyclic */
                                        next
                                          case Prov_Confirmation_2
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.69 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.75 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.76 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.76 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.78 )
                                            qed
                                          qed
                                        next
                                          case c_cmac
                                          solve( !KU( fst('g'^(~sk*~sk.1)) ) @ #vk.71 )
                                            case c_fst
                                            solve( !KU( 'g'^(~sk*~sk.1) ) @ #vk.78 )
                                              case NDev_SendPK_InBand
                                              by solve( !KU( ~sk ) @ #vk.79 )
                                            next
                                              case Prov_SendPK_InBand
                                              by solve( !KU( ~sk.1 ) @ #vk.79 )
                                            next
                                              case c_exp
                                              by solve( !KU( ~sk ) @ #vk.81 )
                                            qed
                                          qed
                                        qed
                                      next
                                        case c_cmac
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case NDev_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_Confirmation_1
                                      solve( !KU( ~Np ) @ #vk.74 )
                                        case Prov_SendNonce_1
                                        by contradiction /* cyclic */
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case Prov_Confirmation_2
                by contradiction /* from formulas */
              next
                case c_cmac
                solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                 s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>))
                       ) @ #vk.35 )
                  case c_cmac
                  solve( !KU( s1(<s1(<'g'^~sk, DHpkD>), ~Np.1, Nd_2>) ) @ #vk.45 )
                    case c_s1
                    solve( !KU( s1(<'g'^~sk, DHpkD>) ) @ #vk.50 )
                      case c_s1
                      solve( !KU( cmac('prck',
                                       cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                            s1(<'g'^~sk, DHpkD>)))
                             ) @ #vk.43 )
                        case NDev_Confirmation_1_case_1
                        solve( !KU( ~Nd ) @ #vk.62 )
                          case NDev_SendNonce_1
                          solve( (Cp_1 =
                                  cmac((
                                        <
                                         cmac('prck',
                                              cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                   s1(<'g'^~sk, 'g'^~sk.1>))), 
                                         '1'>+
                                        <fst(~random.1), '2'>),
                                       Np_1))  ∥
                                 (∃ mk mo.
                                   ((mk+mo) =
                                    (
                                     <
                                      cmac('prck',
                                           cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                s1(<'g'^~sk, 'g'^~sk.1>))), 
                                      '1'>+
                                     <fst(~random.1), '2'>)) ∧
                                   (mk = rm(Cp_1, mo, Np_1))
                                  ∧
                                   ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                            case case_1
                            solve( !KU( fst(~random) ) @ #vk.46 )
                              case Prov_Confirmation_1
                              solve( !KU( ~Np ) @ #vk.73 )
                                case Prov_SendNonce_1
                                by contradiction /* cyclic */
                              qed
                            next
                              case c_fst
                              solve( !KU( ~random ) @ #vk.73 )
                                case Prov_Confirmation_1
                                solve( !KU( ~Np ) @ #vk.74 )
                                  case Prov_SendNonce_1
                                  by contradiction /* cyclic */
                                qed
                              next
                                case Prov_Confirmation_2
                                by contradiction /* cyclic */
                              qed
                            qed
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_2
                        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                               ) ▶₂ #vr.26 )
                          case Receive_UserDevice
                          solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, AuthValue_In
                                 ) ▶₃ #vr.26 )
                            case Receive_UserDevice
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_3
                        solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, AuthValue_In
                               ) ▶₂ #vr.26 )
                          case Receive_UserDevice
                          solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                 ) ▶₃ #vr.26 )
                            case Receive_UserDevice
                            solve( !KU( ~Nd ) @ #vk.61 )
                              case NDev_SendNonce_1
                              solve( (Cp_1 =
                                      cmac((
                                            <
                                             cmac('prck',
                                                  cmac((<fst('g'^(~sk*~sk.1)), '1'>+
                                                        <snd('g'^(~sk*~sk.1)), '2'>),
                                                       s1(<'g'^~sk, 'g'^~sk.1>))), 
                                             '1'>+
                                            <fst(~random), '2'>),
                                           Np_1))  ∥
                                     (∃ mk mo.
                                       ((mk+mo) =
                                        (
                                         <
                                          cmac('prck',
                                               cmac((<fst('g'^(~sk*~sk.1)), '1'>+<snd('g'^(~sk*~sk.1)), '2'>),
                                                    s1(<'g'^~sk, 'g'^~sk.1>))), 
                                          '1'>+
                                         <fst(~random), '2'>)) ∧
                                       (mk = rm(Cp_1, mo, Np_1))
                                      ∧
                                       ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                case case_1
                                solve( !KU( fst(~random) ) @ #vk.46 )
                                  case c_fst
                                  solve( !KU( ~random ) @ #vk.71 )
                                    case NDev_Confirmation_2
                                    by contradiction /* cyclic */
                                  next
                                    case Prov_Confirmation_2
                                    by contradiction /* cyclic */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case NDev_Confirmation_1_case_4
                        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                               ) ▶₃ #vr.26 )
                          case Receive_UserDevice
                          by solve( In_UD( <'AskForInput', 'Device', 'User'>, NDev, $User.1,
                                           'Input'
                                    ) ▶₄ #vr.26 )
                        qed
                      next
                        case NDev_Confirmation_1_case_5
                        solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                               ) ▶₃ #vr.26 )
                          case Receive_UserDevice
                          by contradiction /* from formulas */
                        qed
                      next
                        case Prov_Confirmation_1
                        solve( !KU( ~Np ) @ #vk.54 )
                          case Prov_SendNonce_1
                          by contradiction /* cyclic */
                        qed
                      next
                        case c_cmac
                        solve( !KU( fst(~random) ) @ #vk.45 )
                          case NDev_Confirmation_1_case_1
                          solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                                 ) ▶₂ #vr.26 )
                            case Receive_UserDevice
                            solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                   ) ▶₃ #vr.26 )
                              case Receive_UserDevice
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case NDev_Confirmation_1_case_2
                          solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                                 ) ▶₂ #vr.26 )
                            case Receive_UserDevice
                            solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                   ) ▶₃ #vr.26 )
                              case Receive_UserDevice
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case NDev_Confirmation_1_case_3
                          solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                                 ) ▶₂ #vr.26 )
                            case Receive_UserDevice
                            solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                   ) ▶₃ #vr.26 )
                              case Receive_UserDevice
                              solve( !KU( ~Nd ) @ #vk.64 )
                                case NDev_SendNonce_1
                                solve( (Cp_1 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                         s1(<DHpkP, 'g'^~sk.1>))), 
                                               '1'>+
                                              <fst(~random), '2'>),
                                             Np_1))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                      s1(<DHpkP, 'g'^~sk.1>))), 
                                            '1'>+
                                           <fst(~random), '2'>)) ∧
                                         (mk = rm(Cp_1, mo, Np_1))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( snd(~random) ) @ #vk.51 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.78 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<fst(ECDHSecret.1), '1'>+
                                                                <snd(ECDHSecret.1), '2'>),
                                                               s1(<DHpkP, 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>
                                                            ),
                                                            s1(<DHpkP, 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<'g'^~sk, DHpkD>))
                                               ) @ #vk.58 )
                                          case c_cmac
                                          solve( !KU( cmac('prck',
                                                           cmac((<fst(ECDHSecret.1), '1'>+
                                                                 <snd(ECDHSecret.1), '2'>),
                                                                s1(<DHpkP, 'g'^~sk.1>)))
                                                 ) @ #vk.69 )
                                            case c_cmac
                                            solve( !KU( cmac((
                                                              <
                                                               cmac('prck',
                                                                    cmac((<fst(ECDHSecret.1), '1'>+
                                                                          <snd(ECDHSecret.1), '2'>),
                                                                         s1(<DHpkP, 'g'^~sk.1>))), 
                                                               '1'>+
                                                              <fst(~random), '2'>),
                                                             Np_1)
                                                   ) @ #vk.69 )
                                              case NDev_Confirmation_1
                                              by contradiction /* cyclic */
                                            next
                                              case Prov_Confirmation_1
                                              solve( !KU( ~Np ) @ #vk.75 )
                                                case Prov_SendNonce_1
                                                by contradiction /* cyclic */
                                              qed
                                            next
                                              case c_cmac
                                              by contradiction /* cyclic */
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.54 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.76 )
                                      case NDev_Confirmation_1_case_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_1_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_1_case_3
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_1_case_4
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_1_case_5
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_1_case_6
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2_case_1
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(DHpkP^~sk.1), '1'>+
                                                                  <snd(DHpkP^~sk.1), '2'>),
                                                                 s1(<DHpkP, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>
                                                              ),
                                                              s1(<DHpkP, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(DHpkP^~sk.1), '1'>+
                                                                   <snd(DHpkP^~sk.1), '2'>),
                                                                  s1(<DHpkP, 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(DHpkP^~sk.1), '1'>+
                                                                            <snd(DHpkP^~sk.1), '2'>),
                                                                           s1(<DHpkP, 'g'^~sk.1>))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Np_1)
                                                     ) @ #vk.70 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case NDev_Confirmation_2_case_2
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(ECDHSecret.1), '1'>+
                                                                  <snd(ECDHSecret.1), '2'>),
                                                                 s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(ECDHSecret.1), '1'>+
                                                               <snd(ECDHSecret.1), '2'>),
                                                              s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(ECDHSecret.1), '1'>+
                                                                   <snd(ECDHSecret.1), '2'>),
                                                                  s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(ECDHSecret.1), '1'>+
                                                                            <snd(ECDHSecret.1), '2'>),
                                                                           s1(<ECDHSecret.1^inv(~sk.1), 
                                                                               'g'^~sk.1>))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Np_1)
                                                     ) @ #vk.70 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case NDev_Confirmation_2_case_3
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                  <snd(x^(~sk.1*x.1)), '2'>),
                                                                 s1(<x^x.1, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                               <snd(x^(~sk.1*x.1)), '2'>),
                                                              s1(<x^x.1, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                   <snd(x^(~sk.1*x.1)), '2'>),
                                                                  s1(<x^x.1, 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                            <snd(x^(~sk.1*x.1)), '2'>),
                                                                           s1(<x^x.1, 'g'^~sk.1>))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Np_1)
                                                     ) @ #vk.70 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_1
                                                solve( !KU( ~Np ) @ #vk.76 )
                                                  case Prov_SendNonce_1
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case NDev_Confirmation_2_case_4
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(x^inv(x.1)), '1'>+
                                                                  <snd(x^inv(x.1)), '2'>),
                                                                 s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                              s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(x^inv(x.1)), '1'>+
                                                                   <snd(x^inv(x.1)), '2'>),
                                                                  s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(x^inv(x.1)), '1'>+
                                                                            <snd(x^inv(x.1)), '2'>),
                                                                           s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1
                                                                              >))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Np_1)
                                                     ) @ #vk.70 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case NDev_Confirmation_2_case_5
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(x^x.1), '1'>+<snd(x^x.1), '2'>),
                                                                 s1(<x^(x.1*inv(~sk.1)), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(x^x.1), '1'>+<snd(x^x.1), '2'>),
                                                              s1(<x^(x.1*inv(~sk.1)), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( x^(x.1*inv(~sk.1)) ) @ #vk.71 )
                                            case NDev_SendPK_InBand_case_1
                                            by contradiction /* cyclic */
                                          next
                                            case NDev_SendPK_InBand_case_2
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_SendPK_InBand_case_1
                                            by solve( !KU( ~sk.1 ) @ #vk.83 )
                                          next
                                            case Prov_SendPK_InBand_case_2
                                            by solve( !KU( ~sk.1 ) @ #vk.85 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk.1 ) @ #vk.86 )
                                          qed
                                        qed
                                      qed
                                    next
                                      case NDev_Confirmation_2_case_6
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(x^(x.1*inv(x.2))), '1'>+
                                                                  <snd(x^(x.1*inv(x.2))), '2'>),
                                                                 s1(<x^(x.1*inv((~sk.1*x.2))), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(x^(x.1*inv(x.2))), '1'>+
                                                               <snd(x^(x.1*inv(x.2))), '2'>),
                                                              s1(<x^(x.1*inv((~sk.1*x.2))), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x.3 y. ((y+x.3) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( x^(x.1*inv((~sk.1*x.2))) ) @ #vk.71 )
                                            case NDev_SendPK_InBand_case_1
                                            by contradiction /* cyclic */
                                          next
                                            case NDev_SendPK_InBand_case_2
                                            by contradiction /* cyclic */
                                          next
                                            case Prov_SendPK_InBand_case_1
                                            by solve( !KU( ~sk.1 ) @ #vk.84 )
                                          next
                                            case Prov_SendPK_InBand_case_2
                                            by solve( !KU( ~sk.1 ) @ #vk.86 )
                                          next
                                            case c_exp
                                            by solve( !KU( ~sk.1 ) @ #vk.87 )
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.55 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case NDev_Confirmation_1_case_4
                          solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                                 ) ▶₂ #vr.26 )
                            case Receive_UserDevice
                            solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                   ) ▶₃ #vr.26 )
                              case Receive_UserDevice
                              solve( !KU( ~Nd ) @ #vk.64 )
                                case NDev_SendNonce_1
                                solve( (Cp_1 =
                                        cmac((
                                              <
                                               cmac('prck',
                                                    cmac((<z, '1'>+<z.1, '2'>),
                                                         s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                               '1'>+
                                              <fst(~random), '2'>),
                                             Np_1))  ∥
                                       (∃ mk mo.
                                         ((mk+mo) =
                                          (
                                           <
                                            cmac('prck',
                                                 cmac((<z, '1'>+<z.1, '2'>),
                                                      s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                            '1'>+
                                           <fst(~random), '2'>)) ∧
                                         (mk = rm(Cp_1, mo, Np_1))
                                        ∧
                                         ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                  case case_1
                                  solve( !KU( snd(~random) ) @ #vk.51 )
                                    case NDev_Confirmation_2
                                    solve( !KU( ~Nd.1 ) @ #vk.78 )
                                      case NDev_SendNonce_2
                                      solve( (Cp_2 =
                                              cmac((
                                                    <
                                                     cmac('prck',
                                                          cmac((<z, '1'>+<z.1, '2'>),
                                                               s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                     '1'>+
                                                    <snd(~random), '2'>),
                                                   Np_2))  ∥
                                             (∃ mk mo.
                                               ((mk+mo) =
                                                (
                                                 <
                                                  cmac('prck',
                                                       cmac((<z, '1'>+<z.1, '2'>),
                                                            s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                  '1'>+
                                                 <snd(~random), '2'>)) ∧
                                               (mk = rm(Cp_2, mo, Np_2))
                                              ∧
                                               ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                        case case_1
                                        solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                         s1(<'g'^~sk, DHpkD>))
                                               ) @ #vk.58 )
                                          case c_cmac
                                          solve( !KU( cmac('prck',
                                                           cmac((<z, '1'>+<z.1, '2'>),
                                                                s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                 ) @ #vk.69 )
                                            case c_cmac
                                            solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.70 )
                                              case c_exp
                                              by solve( !KU( ~sk.1 ) @ #vk.86 )
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  next
                                    case Prov_Confirmation_2
                                    solve( !KU( ~Np.1 ) @ #vk.54 )
                                      case Prov_SendNonce_2
                                      by contradiction /* cyclic */
                                    qed
                                  next
                                    case c_snd
                                    solve( !KU( ~random ) @ #vk.76 )
                                      case NDev_Confirmation_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<z, '1'>+<z.1, '2'>),
                                                                 s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<z, '1'>+<z.1, '2'>),
                                                              s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<z, '1'>+<z.1, '2'>),
                                                                  s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.71 )
                                                case c_exp
                                                by solve( !KU( ~sk.1 ) @ #vk.87 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      solve( !KU( ~Np.1 ) @ #vk.55 )
                                        case Prov_SendNonce_2
                                        by contradiction /* cyclic */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case Prov_Confirmation_1
                          solve( !KU( ~Np ) @ #vk.56 )
                            case Prov_SendNonce_1
                            by contradiction /* cyclic */
                          qed
                        next
                          case c_fst
                          solve( !KU( ~random ) @ #vk.56 )
                            case NDev_Confirmation_1_case_01
                            solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_02
                            solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_03
                            solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_04
                            solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_05
                            solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_06
                            solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_07
                            solve( In_UD( <'AskForInput', 'Device', 'User'>, $P, $User.1, 'Input'
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'Display', 'Device', 'User'>, NDev, $User.1, ~random
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_08
                            solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                solve( !KU( ~Nd ) @ #vk.65 )
                                  case NDev_SendNonce_1
                                  solve( (Cp_1 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>),
                                                           s1(<DHpkP, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>),
                                                        s1(<DHpkP, 'g'^~sk.1>))), 
                                              '1'>+
                                             <fst(~random), '2'>)) ∧
                                           (mk = rm(Cp_1, mo, Np_1))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( snd(~random) ) @ #vk.52 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(DHpkP^~sk.1), '1'>+
                                                                  <snd(DHpkP^~sk.1), '2'>),
                                                                 s1(<DHpkP, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(DHpkP^~sk.1), '1'>+<snd(DHpkP^~sk.1), '2'>
                                                              ),
                                                              s1(<DHpkP, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(DHpkP^~sk.1), '1'>+
                                                                   <snd(DHpkP^~sk.1), '2'>),
                                                                  s1(<DHpkP, 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(DHpkP^~sk.1), '1'>+
                                                                            <snd(DHpkP^~sk.1), '2'>),
                                                                           s1(<DHpkP, 'g'^~sk.1>))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Np_1)
                                                     ) @ #vk.70 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case c_snd
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_09
                            solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                solve( !KU( ~Nd ) @ #vk.65 )
                                  case NDev_SendNonce_1
                                  solve( (Cp_1 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>
                                                           ),
                                                           s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst(ECDHSecret.1), '1'>+<snd(ECDHSecret.1), '2'>),
                                                        s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                              '1'>+
                                             <fst(~random), '2'>)) ∧
                                           (mk = rm(Cp_1, mo, Np_1))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( snd(~random) ) @ #vk.52 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(ECDHSecret.1), '1'>+
                                                                  <snd(ECDHSecret.1), '2'>),
                                                                 s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(ECDHSecret.1), '1'>+
                                                               <snd(ECDHSecret.1), '2'>),
                                                              s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(ECDHSecret.1), '1'>+
                                                                   <snd(ECDHSecret.1), '2'>),
                                                                  s1(<ECDHSecret.1^inv(~sk.1), 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( ECDHSecret.1^inv(~sk.1) ) @ #vk.71 )
                                                case c_exp
                                                by solve( !KU( ~sk.1 ) @ #vk.85 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case c_snd
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_10
                            solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                solve( !KU( ~Nd ) @ #vk.65 )
                                  case NDev_SendNonce_1
                                  solve( (Cp_1 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                            <snd(x^(~sk.1*x.1)), '2'>),
                                                           s1(<x^x.1, 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst(x^(~sk.1*x.1)), '1'>+<snd(x^(~sk.1*x.1)), '2'>),
                                                        s1(<x^x.1, 'g'^~sk.1>))), 
                                              '1'>+
                                             <fst(~random), '2'>)) ∧
                                           (mk = rm(Cp_1, mo, Np_1))
                                          ∧
                                           ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( snd(~random) ) @ #vk.52 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                  <snd(x^(~sk.1*x.1)), '2'>),
                                                                 s1(<x^x.1, 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                               <snd(x^(~sk.1*x.1)), '2'>),
                                                              s1(<x^x.1, 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                   <snd(x^(~sk.1*x.1)), '2'>),
                                                                  s1(<x^x.1, 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( cmac((
                                                                <
                                                                 cmac('prck',
                                                                      cmac((<fst(x^(~sk.1*x.1)), '1'>+
                                                                            <snd(x^(~sk.1*x.1)), '2'>),
                                                                           s1(<x^x.1, 'g'^~sk.1>))), 
                                                                 '1'>+
                                                                <fst(~random), '2'>),
                                                               Np_1)
                                                     ) @ #vk.70 )
                                                case NDev_Confirmation_1
                                                by contradiction /* cyclic */
                                              next
                                                case Prov_Confirmation_1
                                                solve( !KU( ~Np ) @ #vk.76 )
                                                  case Prov_SendNonce_1
                                                  by contradiction /* cyclic */
                                                qed
                                              next
                                                case c_cmac
                                                by contradiction /* cyclic */
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case c_snd
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_11
                            solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                solve( !KU( ~Nd ) @ #vk.65 )
                                  case NDev_SendNonce_1
                                  solve( (Cp_1 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                           s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                        s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                              '1'>+
                                             <fst(~random), '2'>)) ∧
                                           (mk = rm(Cp_1, mo, Np_1))
                                          ∧
                                           ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( snd(~random) ) @ #vk.52 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<fst(x^inv(x.1)), '1'>+
                                                                  <snd(x^inv(x.1)), '2'>),
                                                                 s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<fst(x^inv(x.1)), '1'>+<snd(x^inv(x.1)), '2'>),
                                                              s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<fst(x^inv(x.1)), '1'>+
                                                                   <snd(x^inv(x.1)), '2'>),
                                                                  s1(<x^inv((~sk.1*x.1)), 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( x^inv((~sk.1*x.1)) ) @ #vk.71 )
                                                case c_exp
                                                by solve( !KU( ~sk.1 ) @ #vk.86 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case c_snd
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_12
                            solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                solve( !KU( ~Nd ) @ #vk.65 )
                                  case NDev_SendNonce_1
                                  solve( (Cp_1 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst(x^x.1), '1'>+<snd(x^x.1), '2'>),
                                                           s1(<x^(x.1*inv(~sk.1)), 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst(x^x.1), '1'>+<snd(x^x.1), '2'>),
                                                        s1(<x^(x.1*inv(~sk.1)), 'g'^~sk.1>))), 
                                              '1'>+
                                             <fst(~random), '2'>)) ∧
                                           (mk = rm(Cp_1, mo, Np_1))
                                          ∧
                                           ∀ x.2 y. ((y+x.2) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( x^(x.1*inv(~sk.1)) ) @ #vk.68 )
                                      case NDev_SendPK_InBand_case_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_SendPK_InBand_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_SendPK_InBand_case_1
                                      by solve( !KU( ~sk.1 ) @ #vk.78 )
                                    next
                                      case Prov_SendPK_InBand_case_2
                                      by solve( !KU( ~sk.1 ) @ #vk.80 )
                                    next
                                      case c_exp
                                      by solve( !KU( ~sk.1 ) @ #vk.81 )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_13
                            solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                solve( !KU( ~Nd ) @ #vk.65 )
                                  case NDev_SendNonce_1
                                  solve( (Cp_1 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<fst(x^(x.1*inv(x.2))), '1'>+
                                                            <snd(x^(x.1*inv(x.2))), '2'>),
                                                           s1(<x^(x.1*inv((~sk.1*x.2))), 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<fst(x^(x.1*inv(x.2))), '1'>+
                                                         <snd(x^(x.1*inv(x.2))), '2'>),
                                                        s1(<x^(x.1*inv((~sk.1*x.2))), 'g'^~sk.1>))), 
                                              '1'>+
                                             <fst(~random), '2'>)) ∧
                                           (mk = rm(Cp_1, mo, Np_1))
                                          ∧
                                           ∀ x.3 y. ((y+x.3) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( x^(x.1*inv((~sk.1*x.2))) ) @ #vk.68 )
                                      case NDev_SendPK_InBand_case_1
                                      by contradiction /* cyclic */
                                    next
                                      case NDev_SendPK_InBand_case_2
                                      by contradiction /* cyclic */
                                    next
                                      case Prov_SendPK_InBand_case_1
                                      by solve( !KU( ~sk.1 ) @ #vk.79 )
                                    next
                                      case Prov_SendPK_InBand_case_2
                                      by solve( !KU( ~sk.1 ) @ #vk.81 )
                                    next
                                      case c_exp
                                      by solve( !KU( ~sk.1 ) @ #vk.82 )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_1_case_14
                            solve( In_UD( <'Display', 'Device', 'User'>, $P, $User.1, ~random
                                   ) ▶₂ #vr.26 )
                              case Receive_UserDevice
                              solve( In_UD( <'AskForInput', 'Device', 'User'>, $D, $User, 'Input'
                                     ) ▶₃ #vr.26 )
                                case Receive_UserDevice
                                solve( !KU( ~Nd ) @ #vk.65 )
                                  case NDev_SendNonce_1
                                  solve( (Cp_1 =
                                          cmac((
                                                <
                                                 cmac('prck',
                                                      cmac((<z, '1'>+<z.1, '2'>),
                                                           s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                 '1'>+
                                                <fst(~random), '2'>),
                                               Np_1))  ∥
                                         (∃ mk mo.
                                           ((mk+mo) =
                                            (
                                             <
                                              cmac('prck',
                                                   cmac((<z, '1'>+<z.1, '2'>),
                                                        s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                              '1'>+
                                             <fst(~random), '2'>)) ∧
                                           (mk = rm(Cp_1, mo, Np_1))
                                          ∧
                                           ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                    case case_1
                                    solve( !KU( snd(~random) ) @ #vk.52 )
                                      case NDev_Confirmation_2
                                      solve( !KU( ~Nd.1 ) @ #vk.79 )
                                        case NDev_SendNonce_2
                                        solve( (Cp_2 =
                                                cmac((
                                                      <
                                                       cmac('prck',
                                                            cmac((<z, '1'>+<z.1, '2'>),
                                                                 s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                       '1'>+
                                                      <snd(~random), '2'>),
                                                     Np_2))  ∥
                                               (∃ mk mo.
                                                 ((mk+mo) =
                                                  (
                                                   <
                                                    cmac('prck',
                                                         cmac((<z, '1'>+<z.1, '2'>),
                                                              s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>))), 
                                                    '1'>+
                                                   <snd(~random), '2'>)) ∧
                                                 (mk = rm(Cp_2, mo, Np_2))
                                                ∧
                                                 ∀ x y. ((x+y) = mk) ⇒ ⊥) )
                                          case case_1
                                          solve( !KU( cmac((<fst(ECDHSecret), '1'>+<snd(ECDHSecret), '2'>),
                                                           s1(<'g'^~sk, DHpkD>))
                                                 ) @ #vk.59 )
                                            case c_cmac
                                            solve( !KU( cmac('prck',
                                                             cmac((<z, '1'>+<z.1, '2'>),
                                                                  s1(<<z, z.1>^inv(~sk.1), 'g'^~sk.1>)))
                                                   ) @ #vk.70 )
                                              case c_cmac
                                              solve( !KU( <z, z.1>^inv(~sk.1) ) @ #vk.71 )
                                                case c_exp
                                                by solve( !KU( ~sk.1 ) @ #vk.87 )
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    next
                                      case Prov_Confirmation_2
                                      by contradiction /* cyclic */
                                    next
                                      case c_snd
                                      by contradiction /* cyclic */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case NDev_Confirmation_2_case_01
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_02
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_03
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_04
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_05
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_06
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_07
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_08
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_09
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_10
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_11
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_12
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_13
                            by contradiction /* cyclic */
                          next
                            case NDev_Confirmation_2_case_14
                            by contradiction /* cyclic */
                          next
                            case Prov_Confirmation_1
                            solve( !KU( ~Np ) @ #vk.57 )
                              case Prov_SendNonce_1
                              by contradiction /* cyclic */
                            qed
                          next
                            case Prov_Confirmation_2
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case split_case_2
          solve( !KU( cmac('prdk',
                           cmac((<z, '1'>+<z.1, '2'>),
                                s1(<s1(<'g'^~sk, <z, z.1>^inv(~sk)>), ~Np.1, Nd_2>)))
                 ) @ #vk )
            case c_cmac
            solve( !KU( cmac((
                              <
                               cmac('prck',
                                    cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                               '1'>+
                              <fst(~random), '2'>),
                             Nd_1)
                   ) @ #vk.13 )
              case Prov_Confirmation_1
              by contradiction /* from formulas */
            next
              case c_cmac
              solve( !KU( cmac((
                                <
                                 cmac('prck',
                                      cmac((<z, '1'>+<z.1, '2'>), s1(<'g'^~sk, <z, z.1>^inv(~sk)>))), 
                                 '1'>+
                                <snd(~random), '2'>),
                               Nd_2)
                     ) @ #vk.12 )
                case Prov_Confirmation_2
                by contradiction /* from formulas */
              next
                case c_cmac
                solve( !KU( <z, z.1>^inv(~sk) ) @ #vk.15 )
                  case c_exp
                  by solve( !KU( ~sk ) @ #vk.46 )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
maude tool: 'maude'
 checking version: 3.1. OK.
 checking installation: OK.


analyzing: ./Results/Fixed/INBAND_OUT/MESH_10InBand110.spthy

------------------------------------------------------------------------------
analyzed: ./Results/Fixed/INBAND_OUT/MESH_10InBand110.spthy

  output:          ./Results/Fixed/INBAND_OUT/proofs/Out_All_MESH_10InBand110.spthy
  processing time: 8319.970077s
  types (all-traces): verified (84 steps)
  executability (exists-trace): verified (29 steps)
  Noninj_Agreement_NDev (all-traces): verified (1001 steps)
  Noninj_Agreement_Prov (all-traces): verified (1040 steps)
  Secrecy_Keys (all-traces): verified (3626 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: ./Results/Fixed/INBAND_OUT/MESH_10InBand110.spthy

  output:          ./Results/Fixed/INBAND_OUT/proofs/Out_All_MESH_10InBand110.spthy
  processing time: 8319.970077s
  types (all-traces): verified (84 steps)
  executability (exists-trace): verified (29 steps)
  Noninj_Agreement_NDev (all-traces): verified (1001 steps)
  Noninj_Agreement_Prov (all-traces): verified (1040 steps)
  Secrecy_Keys (all-traces): verified (3626 steps)

==============================================================================
